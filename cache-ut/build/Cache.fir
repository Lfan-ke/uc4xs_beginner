circuit Cache :
  module CacheStage1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}}}, metaReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, dataReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}}

    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 51:35]
    reg c : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T = add(c, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_1 = tail(_c_T, 1) @[GTimer.scala 25:12]
    c <= _c_T_1 @[GTimer.scala 25:7]
    wire enableDisplay : UInt<1> @[Debug.scala 40:33]
    enableDisplay <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_1 = and(_T, enableDisplay) @[Debug.scala 55:16]
    when _T_1 : @[Debug.scala 55:31]
      node _T_2 = asUInt(reset) @[Debug.scala 56:24]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_3 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage1: ", c) : printf @[Debug.scala 56:24]
      node _T_4 = asUInt(reset) @[Debug.scala 57:13]
      node _T_5 = eq(_T_4, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_5 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[L1$] cache stage1, addr in: %x, user: %x id: %x\n", io.in.bits.addr, io.in.bits.user, UInt<1>("h0")) : printf_1 @[Debug.scala 57:13]
    node readBusValid = and(io.in.valid, io.out.ready) @[Cache.scala 165:34]
    wire _WIRE : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_1 : UInt<32> @[Cache.scala 79:45]
    _WIRE_1 <= io.in.bits.addr @[Cache.scala 79:45]
    node _T_6 = bits(_WIRE_1, 2, 0) @[Cache.scala 79:45]
    _WIRE.byteOffset <= _T_6 @[Cache.scala 79:45]
    node _T_7 = bits(_WIRE_1, 5, 3) @[Cache.scala 79:45]
    _WIRE.wordIndex <= _T_7 @[Cache.scala 79:45]
    node _T_8 = bits(_WIRE_1, 12, 6) @[Cache.scala 79:45]
    _WIRE.index <= _T_8 @[Cache.scala 79:45]
    node _T_9 = bits(_WIRE_1, 31, 13) @[Cache.scala 79:45]
    _WIRE.tag <= _T_9 @[Cache.scala 79:45]
    io.metaReadBus.req.bits.setIdx <= _WIRE.index @[SRAMTemplate.scala 26:17]
    io.metaReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    wire _WIRE_2 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 81:22]
    wire _WIRE_3 : UInt<32> @[Cache.scala 81:22]
    _WIRE_3 <= io.in.bits.addr @[Cache.scala 81:22]
    node _T_10 = bits(_WIRE_3, 2, 0) @[Cache.scala 81:22]
    _WIRE_2.byteOffset <= _T_10 @[Cache.scala 81:22]
    node _T_11 = bits(_WIRE_3, 5, 3) @[Cache.scala 81:22]
    _WIRE_2.wordIndex <= _T_11 @[Cache.scala 81:22]
    node _T_12 = bits(_WIRE_3, 12, 6) @[Cache.scala 81:22]
    _WIRE_2.index <= _T_12 @[Cache.scala 81:22]
    node _T_13 = bits(_WIRE_3, 31, 13) @[Cache.scala 81:22]
    _WIRE_2.tag <= _T_13 @[Cache.scala 81:22]
    wire _WIRE_4 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 81:55]
    wire _WIRE_5 : UInt<32> @[Cache.scala 81:55]
    _WIRE_5 <= io.in.bits.addr @[Cache.scala 81:55]
    node _T_14 = bits(_WIRE_5, 2, 0) @[Cache.scala 81:55]
    _WIRE_4.byteOffset <= _T_14 @[Cache.scala 81:55]
    node _T_15 = bits(_WIRE_5, 5, 3) @[Cache.scala 81:55]
    _WIRE_4.wordIndex <= _T_15 @[Cache.scala 81:55]
    node _T_16 = bits(_WIRE_5, 12, 6) @[Cache.scala 81:55]
    _WIRE_4.index <= _T_16 @[Cache.scala 81:55]
    node _T_17 = bits(_WIRE_5, 31, 13) @[Cache.scala 81:55]
    _WIRE_4.tag <= _T_17 @[Cache.scala 81:55]
    node _T_18 = cat(_WIRE_2.index, _WIRE_4.wordIndex) @[Cat.scala 33:92]
    io.dataReadBus.req.bits.setIdx <= _T_18 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= readBusValid @[SRAMTemplate.scala 53:20]
    io.out.bits.req <= io.in.bits @[Cache.scala 175:19]
    node _io_out_valid_T = and(io.in.valid, io.metaReadBus.req.ready) @[Cache.scala 176:31]
    node _io_out_valid_T_1 = and(_io_out_valid_T, io.dataReadBus.req.ready) @[Cache.scala 176:59]
    io.out.valid <= _io_out_valid_T_1 @[Cache.scala 176:16]
    node _io_in_ready_T = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 177:19]
    node _io_in_ready_T_1 = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    node _io_in_ready_T_2 = or(_io_in_ready_T, _io_in_ready_T_1) @[Cache.scala 177:32]
    node _io_in_ready_T_3 = and(_io_in_ready_T_2, io.metaReadBus.req.ready) @[Cache.scala 177:48]
    node _io_in_ready_T_4 = and(_io_in_ready_T_3, io.dataReadBus.req.ready) @[Cache.scala 177:76]
    io.in.ready <= _io_in_ready_T_4 @[Cache.scala 177:15]
    reg c_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_2 = add(c_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_3 = tail(_c_T_2, 1) @[GTimer.scala 25:12]
    c_1 <= _c_T_3 @[GTimer.scala 25:7]
    wire enableDisplay_1 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_1 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_19 = and(UInt<1>("h1"), enableDisplay_1) @[Debug.scala 55:16]
    when _T_19 : @[Debug.scala 55:31]
      node _T_20 = asUInt(reset) @[Debug.scala 56:24]
      node _T_21 = eq(_T_20, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_21 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage1: ", c_1) : printf_2 @[Debug.scala 56:24]
      node _T_22 = asUInt(reset) @[Debug.scala 57:13]
      node _T_23 = eq(_T_22, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_23 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "in.ready = %d, in.valid = %d, out.valid = %d, out.ready = %d, addr = %x, cmd = %x, dataReadBus.req.valid = %d\n", io.in.ready, io.in.valid, io.out.valid, io.out.ready, io.in.bits.addr, io.in.bits.cmd, io.dataReadBus.req.valid) : printf_3 @[Debug.scala 57:13]


  module CacheStage2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, flip metaReadResp : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], flip dataReadResp : { data : UInt<64>}[4], flip metaWriteBus : { req : { ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, flip dataWriteBus : { req : { ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    wire addr : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 217:31]
    wire _addr_WIRE : UInt<32> @[Cache.scala 217:31]
    _addr_WIRE <= io.in.bits.req.addr @[Cache.scala 217:31]
    node _addr_T = bits(_addr_WIRE, 2, 0) @[Cache.scala 217:31]
    addr.byteOffset <= _addr_T @[Cache.scala 217:31]
    node _addr_T_1 = bits(_addr_WIRE, 5, 3) @[Cache.scala 217:31]
    addr.wordIndex <= _addr_T_1 @[Cache.scala 217:31]
    node _addr_T_2 = bits(_addr_WIRE, 12, 6) @[Cache.scala 217:31]
    addr.index <= _addr_T_2 @[Cache.scala 217:31]
    node _addr_T_3 = bits(_addr_WIRE, 31, 13) @[Cache.scala 217:31]
    addr.tag <= _addr_T_3 @[Cache.scala 217:31]
    node _isForwardMeta_T = and(io.in.valid, io.metaWriteBus.req.valid) @[Cache.scala 220:17]
    wire _isForwardMeta_WIRE : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _isForwardMeta_WIRE_1 : UInt<32> @[Cache.scala 79:45]
    _isForwardMeta_WIRE_1 <= io.in.bits.req.addr @[Cache.scala 79:45]
    node _isForwardMeta_T_1 = bits(_isForwardMeta_WIRE_1, 2, 0) @[Cache.scala 79:45]
    _isForwardMeta_WIRE.byteOffset <= _isForwardMeta_T_1 @[Cache.scala 79:45]
    node _isForwardMeta_T_2 = bits(_isForwardMeta_WIRE_1, 5, 3) @[Cache.scala 79:45]
    _isForwardMeta_WIRE.wordIndex <= _isForwardMeta_T_2 @[Cache.scala 79:45]
    node _isForwardMeta_T_3 = bits(_isForwardMeta_WIRE_1, 12, 6) @[Cache.scala 79:45]
    _isForwardMeta_WIRE.index <= _isForwardMeta_T_3 @[Cache.scala 79:45]
    node _isForwardMeta_T_4 = bits(_isForwardMeta_WIRE_1, 31, 13) @[Cache.scala 79:45]
    _isForwardMeta_WIRE.tag <= _isForwardMeta_T_4 @[Cache.scala 79:45]
    node _isForwardMeta_T_5 = eq(io.metaWriteBus.req.bits.setIdx, _isForwardMeta_WIRE.index) @[Cache.scala 220:81]
    node isForwardMeta = and(_isForwardMeta_T, _isForwardMeta_T_5) @[Cache.scala 220:46]
    reg isForwardMetaReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 223:33]
    when isForwardMeta : @[Cache.scala 224:23]
      isForwardMetaReg <= UInt<1>("h1") @[Cache.scala 224:42]
    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 51:35]
    node _T_1 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 225:22]
    node _T_2 = or(_T, _T_1) @[Cache.scala 225:19]
    when _T_2 : @[Cache.scala 225:36]
      isForwardMetaReg <= UInt<1>("h0") @[Cache.scala 225:55]
    reg forwardMetaReg : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), forwardMetaReg) @[Reg.scala 19:16]
    when isForwardMeta : @[Reg.scala 20:18]
      forwardMetaReg <= io.metaWriteBus.req.bits @[Reg.scala 20:22]
    wire metaWay : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Cache.scala 228:21]
    node pickForwardMeta = or(isForwardMetaReg, isForwardMeta) @[Cache.scala 229:42]
    node forwardMeta = mux(isForwardMeta, io.metaWriteBus.req.bits, forwardMetaReg) @[Cache.scala 230:24]
    node forwardWaymask_0 = bits(forwardMeta.waymask, 0, 0) @[Cache.scala 231:61]
    node forwardWaymask_1 = bits(forwardMeta.waymask, 1, 1) @[Cache.scala 231:61]
    node forwardWaymask_2 = bits(forwardMeta.waymask, 2, 2) @[Cache.scala 231:61]
    node forwardWaymask_3 = bits(forwardMeta.waymask, 3, 3) @[Cache.scala 231:61]
    node _metaWay_0_T = and(pickForwardMeta, forwardWaymask_0) @[Cache.scala 234:23]
    node _metaWay_0_T_1 = mux(_metaWay_0_T, forwardMeta.data, io.metaReadResp[0]) @[Cache.scala 233:22]
    metaWay[0] <= _metaWay_0_T_1 @[Cache.scala 233:16]
    node _metaWay_1_T = and(pickForwardMeta, forwardWaymask_1) @[Cache.scala 234:23]
    node _metaWay_1_T_1 = mux(_metaWay_1_T, forwardMeta.data, io.metaReadResp[1]) @[Cache.scala 233:22]
    metaWay[1] <= _metaWay_1_T_1 @[Cache.scala 233:16]
    node _metaWay_2_T = and(pickForwardMeta, forwardWaymask_2) @[Cache.scala 234:23]
    node _metaWay_2_T_1 = mux(_metaWay_2_T, forwardMeta.data, io.metaReadResp[2]) @[Cache.scala 233:22]
    metaWay[2] <= _metaWay_2_T_1 @[Cache.scala 233:16]
    node _metaWay_3_T = and(pickForwardMeta, forwardWaymask_3) @[Cache.scala 234:23]
    node _metaWay_3_T_1 = mux(_metaWay_3_T, forwardMeta.data, io.metaReadResp[3]) @[Cache.scala 233:22]
    metaWay[3] <= _metaWay_3_T_1 @[Cache.scala 233:16]
    node _hitVec_T = eq(metaWay[0].tag, addr.tag) @[Cache.scala 241:40]
    node _hitVec_T_1 = and(metaWay[0].valid, _hitVec_T) @[Cache.scala 241:30]
    node _hitVec_T_2 = and(_hitVec_T_1, io.in.valid) @[Cache.scala 241:54]
    node _hitVec_T_3 = eq(metaWay[1].tag, addr.tag) @[Cache.scala 241:40]
    node _hitVec_T_4 = and(metaWay[1].valid, _hitVec_T_3) @[Cache.scala 241:30]
    node _hitVec_T_5 = and(_hitVec_T_4, io.in.valid) @[Cache.scala 241:54]
    node _hitVec_T_6 = eq(metaWay[2].tag, addr.tag) @[Cache.scala 241:40]
    node _hitVec_T_7 = and(metaWay[2].valid, _hitVec_T_6) @[Cache.scala 241:30]
    node _hitVec_T_8 = and(_hitVec_T_7, io.in.valid) @[Cache.scala 241:54]
    node _hitVec_T_9 = eq(metaWay[3].tag, addr.tag) @[Cache.scala 241:40]
    node _hitVec_T_10 = and(metaWay[3].valid, _hitVec_T_9) @[Cache.scala 241:30]
    node _hitVec_T_11 = and(_hitVec_T_10, io.in.valid) @[Cache.scala 241:54]
    wire _hitVec_WIRE : UInt<1>[4] @[Cache.scala 240:23]
    _hitVec_WIRE[0] <= _hitVec_T_2 @[Cache.scala 240:23]
    _hitVec_WIRE[1] <= _hitVec_T_5 @[Cache.scala 240:23]
    _hitVec_WIRE[2] <= _hitVec_T_8 @[Cache.scala 240:23]
    _hitVec_WIRE[3] <= _hitVec_T_11 @[Cache.scala 240:23]
    node hitVec_lo = cat(_hitVec_WIRE[1], _hitVec_WIRE[0]) @[Cache.scala 242:5]
    node hitVec_hi = cat(_hitVec_WIRE[3], _hitVec_WIRE[2]) @[Cache.scala 242:5]
    node hitVec = cat(hitVec_hi, hitVec_lo) @[Cache.scala 242:5]
    reg victimWaymask_lfsr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h1234567887654321")) @[LFSR64.scala 25:23]
    node _victimWaymask_xor_T = bits(victimWaymask_lfsr, 0, 0) @[LFSR64.scala 26:19]
    node _victimWaymask_xor_T_1 = bits(victimWaymask_lfsr, 1, 1) @[LFSR64.scala 26:29]
    node _victimWaymask_xor_T_2 = xor(_victimWaymask_xor_T, _victimWaymask_xor_T_1) @[LFSR64.scala 26:23]
    node _victimWaymask_xor_T_3 = bits(victimWaymask_lfsr, 3, 3) @[LFSR64.scala 26:39]
    node _victimWaymask_xor_T_4 = xor(_victimWaymask_xor_T_2, _victimWaymask_xor_T_3) @[LFSR64.scala 26:33]
    node _victimWaymask_xor_T_5 = bits(victimWaymask_lfsr, 4, 4) @[LFSR64.scala 26:49]
    node victimWaymask_xor = xor(_victimWaymask_xor_T_4, _victimWaymask_xor_T_5) @[LFSR64.scala 26:43]
    when UInt<1>("h1") : @[LFSR64.scala 27:22]
      node _victimWaymask_lfsr_T = eq(victimWaymask_lfsr, UInt<1>("h0")) @[LFSR64.scala 28:24]
      node _victimWaymask_lfsr_T_1 = bits(victimWaymask_lfsr, 63, 1) @[LFSR64.scala 28:51]
      node _victimWaymask_lfsr_T_2 = cat(victimWaymask_xor, _victimWaymask_lfsr_T_1) @[Cat.scala 33:92]
      node _victimWaymask_lfsr_T_3 = mux(_victimWaymask_lfsr_T, UInt<1>("h1"), _victimWaymask_lfsr_T_2) @[LFSR64.scala 28:18]
      victimWaymask_lfsr <= _victimWaymask_lfsr_T_3 @[LFSR64.scala 28:12]
    node _victimWaymask_T = bits(victimWaymask_lfsr, 1, 0) @[Cache.scala 244:35]
    node victimWaymask = dshl(UInt<1>("h1"), _victimWaymask_T) @[Cache.scala 244:24]
    node _invalidVec_T = eq(metaWay[0].valid, UInt<1>("h0")) @[Cache.scala 246:45]
    node _invalidVec_T_1 = eq(metaWay[1].valid, UInt<1>("h0")) @[Cache.scala 246:45]
    node _invalidVec_T_2 = eq(metaWay[2].valid, UInt<1>("h0")) @[Cache.scala 246:45]
    node _invalidVec_T_3 = eq(metaWay[3].valid, UInt<1>("h0")) @[Cache.scala 246:45]
    wire _invalidVec_WIRE : UInt<1>[4] @[Cache.scala 246:27]
    _invalidVec_WIRE[0] <= _invalidVec_T @[Cache.scala 246:27]
    _invalidVec_WIRE[1] <= _invalidVec_T_1 @[Cache.scala 246:27]
    _invalidVec_WIRE[2] <= _invalidVec_T_2 @[Cache.scala 246:27]
    _invalidVec_WIRE[3] <= _invalidVec_T_3 @[Cache.scala 246:27]
    node invalidVec_lo = cat(_invalidVec_WIRE[1], _invalidVec_WIRE[0]) @[Cache.scala 246:56]
    node invalidVec_hi = cat(_invalidVec_WIRE[3], _invalidVec_WIRE[2]) @[Cache.scala 246:56]
    node invalidVec = cat(invalidVec_hi, invalidVec_lo) @[Cache.scala 246:56]
    node hasInvalidWay = orr(invalidVec) @[Cache.scala 247:34]
    node _refillInvalidWaymask_T = geq(invalidVec, UInt<4>("h8")) @[Cache.scala 249:16]
    node _refillInvalidWaymask_T_1 = geq(invalidVec, UInt<3>("h4")) @[Cache.scala 252:18]
    node _refillInvalidWaymask_T_2 = geq(invalidVec, UInt<2>("h2")) @[Cache.scala 254:22]
    node _refillInvalidWaymask_T_3 = mux(_refillInvalidWaymask_T_2, UInt<2>("h2"), UInt<1>("h1")) @[Cache.scala 254:10]
    node _refillInvalidWaymask_T_4 = mux(_refillInvalidWaymask_T_1, UInt<3>("h4"), _refillInvalidWaymask_T_3) @[Cache.scala 251:8]
    node refillInvalidWaymask = mux(_refillInvalidWaymask_T, UInt<4>("h8"), _refillInvalidWaymask_T_4) @[Cache.scala 248:33]
    node _waymask_T = mux(hasInvalidWay, refillInvalidWaymask, victimWaymask) @[Cache.scala 262:8]
    node waymask = mux(io.out.bits.hit, hitVec, _waymask_T) @[Cache.scala 259:20]
    node _T_3 = bits(waymask, 0, 0) @[Bitwise.scala 53:100]
    node _T_4 = bits(waymask, 1, 1) @[Bitwise.scala 53:100]
    node _T_5 = bits(waymask, 2, 2) @[Bitwise.scala 53:100]
    node _T_6 = bits(waymask, 3, 3) @[Bitwise.scala 53:100]
    node _T_7 = add(_T_3, _T_4) @[Bitwise.scala 51:90]
    node _T_8 = bits(_T_7, 1, 0) @[Bitwise.scala 51:90]
    node _T_9 = add(_T_5, _T_6) @[Bitwise.scala 51:90]
    node _T_10 = bits(_T_9, 1, 0) @[Bitwise.scala 51:90]
    node _T_11 = add(_T_8, _T_10) @[Bitwise.scala 51:90]
    node _T_12 = bits(_T_11, 2, 0) @[Bitwise.scala 51:90]
    node _T_13 = gt(_T_12, UInt<1>("h1")) @[Cache.scala 264:26]
    when _T_13 : @[Cache.scala 264:33]
      reg c : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T = add(c, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_1 = tail(_c_T, 1) @[GTimer.scala 25:12]
      c <= _c_T_1 @[GTimer.scala 25:7]
      wire enableDisplay : UInt<1> @[Debug.scala 40:33]
      enableDisplay <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_14 = and(UInt<1>("h1"), enableDisplay) @[Debug.scala 55:16]
      when _T_14 : @[Debug.scala 55:31]
        node _T_15 = asUInt(reset) @[Debug.scala 56:24]
        node _T_16 = eq(_T_15, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_16 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c) : printf @[Debug.scala 56:24]
        node _T_17 = asUInt(reset) @[Debug.scala 57:13]
        node _T_18 = eq(_T_17, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_18 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[0].valid, metaWay[0].tag, addr.tag) : printf_1 @[Debug.scala 57:13]
      reg c_1 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_2 = add(c_1, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_3 = tail(_c_T_2, 1) @[GTimer.scala 25:12]
      c_1 <= _c_T_3 @[GTimer.scala 25:7]
      wire enableDisplay_1 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_1 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_19 = and(UInt<1>("h1"), enableDisplay_1) @[Debug.scala 55:16]
      when _T_19 : @[Debug.scala 55:31]
        node _T_20 = asUInt(reset) @[Debug.scala 56:24]
        node _T_21 = eq(_T_20, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_21 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_1) : printf_2 @[Debug.scala 56:24]
        node _T_22 = asUInt(reset) @[Debug.scala 57:13]
        node _T_23 = eq(_T_22, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_23 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[1].valid, metaWay[1].tag, addr.tag) : printf_3 @[Debug.scala 57:13]
      reg c_2 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_4 = add(c_2, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_5 = tail(_c_T_4, 1) @[GTimer.scala 25:12]
      c_2 <= _c_T_5 @[GTimer.scala 25:7]
      wire enableDisplay_2 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_2 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_24 = and(UInt<1>("h1"), enableDisplay_2) @[Debug.scala 55:16]
      when _T_24 : @[Debug.scala 55:31]
        node _T_25 = asUInt(reset) @[Debug.scala 56:24]
        node _T_26 = eq(_T_25, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_26 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_2) : printf_4 @[Debug.scala 56:24]
        node _T_27 = asUInt(reset) @[Debug.scala 57:13]
        node _T_28 = eq(_T_27, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_28 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[2].valid, metaWay[2].tag, addr.tag) : printf_5 @[Debug.scala 57:13]
      reg c_3 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_6 = add(c_3, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_7 = tail(_c_T_6, 1) @[GTimer.scala 25:12]
      c_3 <= _c_T_7 @[GTimer.scala 25:7]
      wire enableDisplay_3 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_3 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_29 = and(UInt<1>("h1"), enableDisplay_3) @[Debug.scala 55:16]
      when _T_29 : @[Debug.scala 55:31]
        node _T_30 = asUInt(reset) @[Debug.scala 56:24]
        node _T_31 = eq(_T_30, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_31 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_3) : printf_6 @[Debug.scala 56:24]
        node _T_32 = asUInt(reset) @[Debug.scala 57:13]
        node _T_33 = eq(_T_32, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_33 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaWay %x metat %x reqt %x\n", metaWay[3].valid, metaWay[3].tag, addr.tag) : printf_7 @[Debug.scala 57:13]
      reg c_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_8 = add(c_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_9 = tail(_c_T_8, 1) @[GTimer.scala 25:12]
      c_4 <= _c_T_9 @[GTimer.scala 25:7]
      wire enableDisplay_4 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_4 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_34 = and(UInt<1>("h1"), enableDisplay_4) @[Debug.scala 55:16]
      when _T_34 : @[Debug.scala 55:31]
        node _T_35 = asUInt(reset) @[Debug.scala 56:24]
        node _T_36 = eq(_T_35, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_36 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_4) : printf_8 @[Debug.scala 56:24]
        node _T_37 = asUInt(reset) @[Debug.scala 57:13]
        node _T_38 = eq(_T_37, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_38 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[0].valid, io.metaReadResp[0].tag, addr.tag) : printf_9 @[Debug.scala 57:13]
      reg c_5 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_10 = add(c_5, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_11 = tail(_c_T_10, 1) @[GTimer.scala 25:12]
      c_5 <= _c_T_11 @[GTimer.scala 25:7]
      wire enableDisplay_5 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_5 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_39 = and(UInt<1>("h1"), enableDisplay_5) @[Debug.scala 55:16]
      when _T_39 : @[Debug.scala 55:31]
        node _T_40 = asUInt(reset) @[Debug.scala 56:24]
        node _T_41 = eq(_T_40, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_41 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_5) : printf_10 @[Debug.scala 56:24]
        node _T_42 = asUInt(reset) @[Debug.scala 57:13]
        node _T_43 = eq(_T_42, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_43 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[1].valid, io.metaReadResp[1].tag, addr.tag) : printf_11 @[Debug.scala 57:13]
      reg c_6 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_12 = add(c_6, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_13 = tail(_c_T_12, 1) @[GTimer.scala 25:12]
      c_6 <= _c_T_13 @[GTimer.scala 25:7]
      wire enableDisplay_6 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_6 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_44 = and(UInt<1>("h1"), enableDisplay_6) @[Debug.scala 55:16]
      when _T_44 : @[Debug.scala 55:31]
        node _T_45 = asUInt(reset) @[Debug.scala 56:24]
        node _T_46 = eq(_T_45, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_46 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_6) : printf_12 @[Debug.scala 56:24]
        node _T_47 = asUInt(reset) @[Debug.scala 57:13]
        node _T_48 = eq(_T_47, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_48 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[2].valid, io.metaReadResp[2].tag, addr.tag) : printf_13 @[Debug.scala 57:13]
      reg c_7 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_14 = add(c_7, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_15 = tail(_c_T_14, 1) @[GTimer.scala 25:12]
      c_7 <= _c_T_15 @[GTimer.scala 25:7]
      wire enableDisplay_7 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_7 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_49 = and(UInt<1>("h1"), enableDisplay_7) @[Debug.scala 55:16]
      when _T_49 : @[Debug.scala 55:31]
        node _T_50 = asUInt(reset) @[Debug.scala 56:24]
        node _T_51 = eq(_T_50, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_51 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_7) : printf_14 @[Debug.scala 56:24]
        node _T_52 = asUInt(reset) @[Debug.scala 57:13]
        node _T_53 = eq(_T_52, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_53 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] metaReadResp %x metat %x reqt %x\n", io.metaReadResp[3].valid, io.metaReadResp[3].tag, addr.tag) : printf_15 @[Debug.scala 57:13]
      reg c_8 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_16 = add(c_8, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_17 = tail(_c_T_16, 1) @[GTimer.scala 25:12]
      c_8 <= _c_T_17 @[GTimer.scala 25:7]
      wire enableDisplay_8 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_8 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_54 = and(UInt<1>("h1"), enableDisplay_8) @[Debug.scala 55:16]
      when _T_54 : @[Debug.scala 55:31]
        node _T_55 = asUInt(reset) @[Debug.scala 56:24]
        node _T_56 = eq(_T_55, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_56 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_8) : printf_16 @[Debug.scala 56:24]
        node _T_57 = asUInt(reset) @[Debug.scala 57:13]
        node _T_58 = eq(_T_57, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_58 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] forwardMetaReg isForwardMetaReg %x %x metat %x wm %b\n", isForwardMetaReg, forwardMetaReg.data.valid, forwardMetaReg.data.tag, forwardMetaReg.waymask) : printf_17 @[Debug.scala 57:13]
      reg c_9 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_18 = add(c_9, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_19 = tail(_c_T_18, 1) @[GTimer.scala 25:12]
      c_9 <= _c_T_19 @[GTimer.scala 25:7]
      wire enableDisplay_9 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_9 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_59 = and(UInt<1>("h1"), enableDisplay_9) @[Debug.scala 55:16]
      when _T_59 : @[Debug.scala 55:31]
        node _T_60 = asUInt(reset) @[Debug.scala 56:24]
        node _T_61 = eq(_T_60, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_61 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_9) : printf_18 @[Debug.scala 56:24]
        node _T_62 = asUInt(reset) @[Debug.scala 57:13]
        node _T_63 = eq(_T_62, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_63 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] forwardMeta isForwardMeta %x %x metat %x wm %b\n", isForwardMeta, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.tag, io.metaWriteBus.req.bits.waymask) : printf_19 @[Debug.scala 57:13]
    node _T_64 = bits(waymask, 0, 0) @[Bitwise.scala 53:100]
    node _T_65 = bits(waymask, 1, 1) @[Bitwise.scala 53:100]
    node _T_66 = bits(waymask, 2, 2) @[Bitwise.scala 53:100]
    node _T_67 = bits(waymask, 3, 3) @[Bitwise.scala 53:100]
    node _T_68 = add(_T_64, _T_65) @[Bitwise.scala 51:90]
    node _T_69 = bits(_T_68, 1, 0) @[Bitwise.scala 51:90]
    node _T_70 = add(_T_66, _T_67) @[Bitwise.scala 51:90]
    node _T_71 = bits(_T_70, 1, 0) @[Bitwise.scala 51:90]
    node _T_72 = add(_T_69, _T_71) @[Bitwise.scala 51:90]
    node _T_73 = bits(_T_72, 2, 0) @[Bitwise.scala 51:90]
    node _T_74 = gt(_T_73, UInt<1>("h1")) @[Cache.scala 291:26]
    when _T_74 : @[Cache.scala 291:33]
      reg c_10 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_20 = add(c_10, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_21 = tail(_c_T_20, 1) @[GTimer.scala 25:12]
      c_10 <= _c_T_21 @[GTimer.scala 25:7]
      wire enableDisplay_10 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_10 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_75 = and(UInt<1>("h1"), enableDisplay_10) @[Debug.scala 55:16]
      when _T_75 : @[Debug.scala 55:31]
        node _T_76 = asUInt(reset) @[Debug.scala 56:24]
        node _T_77 = eq(_T_76, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_77 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_10) : printf_20 @[Debug.scala 56:24]
        node _T_78 = asUInt(reset) @[Debug.scala 57:13]
        node _T_79 = eq(_T_78, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_79 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[ERROR] hit %b wmask %b hitvec %b\n", io.out.bits.hit, forwardMeta.waymask, hitVec) : printf_21 @[Debug.scala 57:13]
    node _T_80 = bits(waymask, 0, 0) @[Bitwise.scala 53:100]
    node _T_81 = bits(waymask, 1, 1) @[Bitwise.scala 53:100]
    node _T_82 = bits(waymask, 2, 2) @[Bitwise.scala 53:100]
    node _T_83 = bits(waymask, 3, 3) @[Bitwise.scala 53:100]
    node _T_84 = add(_T_80, _T_81) @[Bitwise.scala 51:90]
    node _T_85 = bits(_T_84, 1, 0) @[Bitwise.scala 51:90]
    node _T_86 = add(_T_82, _T_83) @[Bitwise.scala 51:90]
    node _T_87 = bits(_T_86, 1, 0) @[Bitwise.scala 51:90]
    node _T_88 = add(_T_85, _T_87) @[Bitwise.scala 51:90]
    node _T_89 = bits(_T_88, 2, 0) @[Bitwise.scala 51:90]
    node _T_90 = gt(_T_89, UInt<1>("h1")) @[Cache.scala 299:45]
    node _T_91 = and(io.in.valid, _T_90) @[Cache.scala 299:24]
    node _T_92 = eq(_T_91, UInt<1>("h0")) @[Cache.scala 299:10]
    node _T_93 = asUInt(reset) @[Cache.scala 299:9]
    node _T_94 = eq(_T_93, UInt<1>("h0")) @[Cache.scala 299:9]
    when _T_94 : @[Cache.scala 299:9]
      node _T_95 = eq(_T_92, UInt<1>("h0")) @[Cache.scala 299:9]
      when _T_95 : @[Cache.scala 299:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:299 assert(!(io.in.valid && PopCount(waymask) > 1.U))\n") : printf_22 @[Cache.scala 299:9]
      assert(clock, _T_92, UInt<1>("h1"), "") : assert @[Cache.scala 299:9]
    io.out.bits.metas <= metaWay @[Cache.scala 301:21]
    node _io_out_bits_hit_T = orr(hitVec) @[Cache.scala 302:44]
    node _io_out_bits_hit_T_1 = and(io.in.valid, _io_out_bits_hit_T) @[Cache.scala 302:34]
    io.out.bits.hit <= _io_out_bits_hit_T_1 @[Cache.scala 302:19]
    io.out.bits.waymask <= waymask @[Cache.scala 303:23]
    io.out.bits.datas <= io.dataReadResp @[Cache.scala 304:21]
    node _io_out_bits_mmio_T = xor(io.in.bits.req.addr, UInt<30>("h30000000")) @[NutCore.scala 86:11]
    node _io_out_bits_mmio_T_1 = bits(_io_out_bits_mmio_T, 31, 28) @[NutCore.scala 86:24]
    node _io_out_bits_mmio_T_2 = eq(_io_out_bits_mmio_T_1, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _io_out_bits_mmio_T_3 = xor(io.in.bits.req.addr, UInt<31>("h40000000")) @[NutCore.scala 86:11]
    node _io_out_bits_mmio_T_4 = bits(_io_out_bits_mmio_T_3, 31, 30) @[NutCore.scala 86:24]
    node _io_out_bits_mmio_T_5 = eq(_io_out_bits_mmio_T_4, UInt<1>("h0")) @[NutCore.scala 86:44]
    node _io_out_bits_mmio_T_6 = or(_io_out_bits_mmio_T_2, _io_out_bits_mmio_T_5) @[NutCore.scala 87:15]
    io.out.bits.mmio <= _io_out_bits_mmio_T_6 @[Cache.scala 305:20]
    wire _isForwardData_WIRE : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 81:22]
    wire _isForwardData_WIRE_1 : UInt<32> @[Cache.scala 81:22]
    _isForwardData_WIRE_1 <= io.in.bits.req.addr @[Cache.scala 81:22]
    node _isForwardData_T = bits(_isForwardData_WIRE_1, 2, 0) @[Cache.scala 81:22]
    _isForwardData_WIRE.byteOffset <= _isForwardData_T @[Cache.scala 81:22]
    node _isForwardData_T_1 = bits(_isForwardData_WIRE_1, 5, 3) @[Cache.scala 81:22]
    _isForwardData_WIRE.wordIndex <= _isForwardData_T_1 @[Cache.scala 81:22]
    node _isForwardData_T_2 = bits(_isForwardData_WIRE_1, 12, 6) @[Cache.scala 81:22]
    _isForwardData_WIRE.index <= _isForwardData_T_2 @[Cache.scala 81:22]
    node _isForwardData_T_3 = bits(_isForwardData_WIRE_1, 31, 13) @[Cache.scala 81:22]
    _isForwardData_WIRE.tag <= _isForwardData_T_3 @[Cache.scala 81:22]
    wire _isForwardData_WIRE_2 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 81:55]
    wire _isForwardData_WIRE_3 : UInt<32> @[Cache.scala 81:55]
    _isForwardData_WIRE_3 <= io.in.bits.req.addr @[Cache.scala 81:55]
    node _isForwardData_T_4 = bits(_isForwardData_WIRE_3, 2, 0) @[Cache.scala 81:55]
    _isForwardData_WIRE_2.byteOffset <= _isForwardData_T_4 @[Cache.scala 81:55]
    node _isForwardData_T_5 = bits(_isForwardData_WIRE_3, 5, 3) @[Cache.scala 81:55]
    _isForwardData_WIRE_2.wordIndex <= _isForwardData_T_5 @[Cache.scala 81:55]
    node _isForwardData_T_6 = bits(_isForwardData_WIRE_3, 12, 6) @[Cache.scala 81:55]
    _isForwardData_WIRE_2.index <= _isForwardData_T_6 @[Cache.scala 81:55]
    node _isForwardData_T_7 = bits(_isForwardData_WIRE_3, 31, 13) @[Cache.scala 81:55]
    _isForwardData_WIRE_2.tag <= _isForwardData_T_7 @[Cache.scala 81:55]
    node _isForwardData_T_8 = cat(_isForwardData_WIRE.index, _isForwardData_WIRE_2.wordIndex) @[Cat.scala 33:92]
    node _isForwardData_T_9 = eq(io.dataWriteBus.req.bits.setIdx, _isForwardData_T_8) @[Cache.scala 309:32]
    node _isForwardData_T_10 = and(io.dataWriteBus.req.valid, _isForwardData_T_9) @[Cache.scala 309:15]
    node isForwardData = and(io.in.valid, _isForwardData_T_10) @[Cache.scala 307:35]
    reg isForwardDataReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 311:33]
    when isForwardData : @[Cache.scala 312:23]
      isForwardDataReg <= UInt<1>("h1") @[Cache.scala 312:42]
    node _T_96 = and(io.in.ready, io.in.valid) @[Decoupled.scala 51:35]
    node _T_97 = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 313:22]
    node _T_98 = or(_T_96, _T_97) @[Cache.scala 313:19]
    when _T_98 : @[Cache.scala 313:36]
      isForwardDataReg <= UInt<1>("h0") @[Cache.scala 313:55]
    reg forwardDataReg : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}, clock with :
      reset => (UInt<1>("h0"), forwardDataReg) @[Reg.scala 19:16]
    when isForwardData : @[Reg.scala 20:18]
      forwardDataReg <= io.dataWriteBus.req.bits @[Reg.scala 20:22]
    node _io_out_bits_isForwardData_T = or(isForwardDataReg, isForwardData) @[Cache.scala 315:49]
    io.out.bits.isForwardData <= _io_out_bits_isForwardData_T @[Cache.scala 315:29]
    node _io_out_bits_forwardData_T = mux(isForwardData, io.dataWriteBus.req.bits, forwardDataReg) @[Cache.scala 316:33]
    io.out.bits.forwardData <= _io_out_bits_forwardData_T @[Cache.scala 316:27]
    io.out.bits.req <= io.in.bits.req @[Cache.scala 322:19]
    io.out.valid <= io.in.valid @[Cache.scala 323:16]
    node _io_in_ready_T = eq(io.in.valid, UInt<1>("h0")) @[Cache.scala 324:18]
    node _io_in_ready_T_1 = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    node _io_in_ready_T_2 = or(_io_in_ready_T, _io_in_ready_T_1) @[Cache.scala 324:31]
    io.in.ready <= _io_in_ready_T_2 @[Cache.scala 324:15]
    node _T_99 = and(io.in.ready, io.in.valid) @[Decoupled.scala 51:35]
    reg c_11 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_22 = add(c_11, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_23 = tail(_c_T_22, 1) @[GTimer.scala 25:12]
    c_11 <= _c_T_23 @[GTimer.scala 25:7]
    wire enableDisplay_11 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_11 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_100 = and(UInt<1>("h1"), enableDisplay_11) @[Debug.scala 55:16]
    when _T_100 : @[Debug.scala 55:31]
      node _T_101 = asUInt(reset) @[Debug.scala 56:24]
      node _T_102 = eq(_T_101, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_102 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_11) : printf_23 @[Debug.scala 56:24]
      node _T_103 = asUInt(reset) @[Debug.scala 57:13]
      node _T_104 = eq(_T_103, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_104 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[isFD:%d isFDreg:%d inFire:%d invalid:%d \n", isForwardData, isForwardDataReg, _T_99, io.in.valid) : printf_24 @[Debug.scala 57:13]
    wire _WIRE : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_1 : UInt<32> @[Cache.scala 79:45]
    _WIRE_1 <= io.in.bits.req.addr @[Cache.scala 79:45]
    node _T_105 = bits(_WIRE_1, 2, 0) @[Cache.scala 79:45]
    _WIRE.byteOffset <= _T_105 @[Cache.scala 79:45]
    node _T_106 = bits(_WIRE_1, 5, 3) @[Cache.scala 79:45]
    _WIRE.wordIndex <= _T_106 @[Cache.scala 79:45]
    node _T_107 = bits(_WIRE_1, 12, 6) @[Cache.scala 79:45]
    _WIRE.index <= _T_107 @[Cache.scala 79:45]
    node _T_108 = bits(_WIRE_1, 31, 13) @[Cache.scala 79:45]
    _WIRE.tag <= _T_108 @[Cache.scala 79:45]
    reg c_12 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_24 = add(c_12, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_25 = tail(_c_T_24, 1) @[GTimer.scala 25:12]
    c_12 <= _c_T_25 @[GTimer.scala 25:7]
    wire enableDisplay_12 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_12 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_109 = and(UInt<1>("h1"), enableDisplay_12) @[Debug.scala 55:16]
    when _T_109 : @[Debug.scala 55:31]
      node _T_110 = asUInt(reset) @[Debug.scala 56:24]
      node _T_111 = eq(_T_110, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_111 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage2: ", c_12) : printf_25 @[Debug.scala 56:24]
      node _T_112 = asUInt(reset) @[Debug.scala 57:13]
      node _T_113 = eq(_T_112, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_113 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[isFM:%d isFMreg:%d metawreq:%x widx:%x ridx:%x \n", isForwardMeta, isForwardMetaReg, io.metaWriteBus.req.valid, io.metaWriteBus.req.bits.setIdx, _WIRE.index) : printf_26 @[Debug.scala 57:13]


  module Arbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 135:13]
    io.out.bits <= io.in[1].bits @[Arbiter.scala 136:15]
    when io.in[0].valid : @[Arbiter.scala 138:26]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 139:17]
      io.out.bits <= io.in[0].bits @[Arbiter.scala 140:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 146:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 146:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 146:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 146:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 147:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 147:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 147:16]

  module Arbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 135:13]
    io.out.bits <= io.in[1].bits @[Arbiter.scala 136:15]
    when io.in[0].valid : @[Arbiter.scala 138:26]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 139:17]
      io.out.bits <= io.in[0].bits @[Arbiter.scala 140:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 146:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 146:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 146:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 146:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 147:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 147:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 147:16]

  module CacheStage3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>, user : UInt<16>}}, isFinish : UInt<1>, flip flush : UInt<1>, dataReadBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}, dataWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}, metaWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}, mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, cohResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}, dataReadRespToL1 : UInt<1>}

    inst metaWriteArb of Arbiter @[Cache.scala 366:28]
    metaWriteArb.clock <= clock
    metaWriteArb.reset <= reset
    inst dataWriteArb of Arbiter_1 @[Cache.scala 367:28]
    dataWriteArb.clock <= clock
    dataWriteArb.reset <= reset
    wire addr : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 370:31]
    wire _addr_WIRE : UInt<32> @[Cache.scala 370:31]
    _addr_WIRE <= io.in.bits.req.addr @[Cache.scala 370:31]
    node _addr_T = bits(_addr_WIRE, 2, 0) @[Cache.scala 370:31]
    addr.byteOffset <= _addr_T @[Cache.scala 370:31]
    node _addr_T_1 = bits(_addr_WIRE, 5, 3) @[Cache.scala 370:31]
    addr.wordIndex <= _addr_T_1 @[Cache.scala 370:31]
    node _addr_T_2 = bits(_addr_WIRE, 12, 6) @[Cache.scala 370:31]
    addr.index <= _addr_T_2 @[Cache.scala 370:31]
    node _addr_T_3 = bits(_addr_WIRE, 31, 13) @[Cache.scala 370:31]
    addr.tag <= _addr_T_3 @[Cache.scala 370:31]
    node mmio = and(io.in.valid, io.in.bits.mmio) @[Cache.scala 371:26]
    node hit = and(io.in.valid, io.in.bits.hit) @[Cache.scala 372:25]
    node _miss_T = eq(io.in.bits.hit, UInt<1>("h0")) @[Cache.scala 373:29]
    node miss = and(io.in.valid, _miss_T) @[Cache.scala 373:26]
    node _probe_T = and(io.in.valid, UInt<1>("h1")) @[Cache.scala 374:27]
    node _probe_T_1 = eq(io.in.bits.req.cmd, UInt<4>("h8")) @[SimpleBus.scala 79:23]
    node probe = and(_probe_T, _probe_T_1) @[Cache.scala 374:39]
    node _hitReadBurst_T = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[SimpleBus.scala 76:27]
    node hitReadBurst = and(hit, _hitReadBurst_T) @[Cache.scala 375:26]
    node _meta_T = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _meta_T_1 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _meta_T_2 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _meta_T_3 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire meta : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Mux.scala 27:73]
    node _meta_T_4 = mux(_meta_T, io.in.bits.metas[0].dirty, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_5 = mux(_meta_T_1, io.in.bits.metas[1].dirty, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_6 = mux(_meta_T_2, io.in.bits.metas[2].dirty, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_7 = mux(_meta_T_3, io.in.bits.metas[3].dirty, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_8 = or(_meta_T_4, _meta_T_5) @[Mux.scala 27:73]
    node _meta_T_9 = or(_meta_T_8, _meta_T_6) @[Mux.scala 27:73]
    node _meta_T_10 = or(_meta_T_9, _meta_T_7) @[Mux.scala 27:73]
    wire _meta_WIRE : UInt<1> @[Mux.scala 27:73]
    _meta_WIRE <= _meta_T_10 @[Mux.scala 27:73]
    meta.dirty <= _meta_WIRE @[Mux.scala 27:73]
    node _meta_T_11 = mux(_meta_T, io.in.bits.metas[0].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_12 = mux(_meta_T_1, io.in.bits.metas[1].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_13 = mux(_meta_T_2, io.in.bits.metas[2].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_14 = mux(_meta_T_3, io.in.bits.metas[3].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_15 = or(_meta_T_11, _meta_T_12) @[Mux.scala 27:73]
    node _meta_T_16 = or(_meta_T_15, _meta_T_13) @[Mux.scala 27:73]
    node _meta_T_17 = or(_meta_T_16, _meta_T_14) @[Mux.scala 27:73]
    wire _meta_WIRE_1 : UInt<1> @[Mux.scala 27:73]
    _meta_WIRE_1 <= _meta_T_17 @[Mux.scala 27:73]
    meta.valid <= _meta_WIRE_1 @[Mux.scala 27:73]
    node _meta_T_18 = mux(_meta_T, io.in.bits.metas[0].tag, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_19 = mux(_meta_T_1, io.in.bits.metas[1].tag, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_20 = mux(_meta_T_2, io.in.bits.metas[2].tag, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_21 = mux(_meta_T_3, io.in.bits.metas[3].tag, UInt<1>("h0")) @[Mux.scala 27:73]
    node _meta_T_22 = or(_meta_T_18, _meta_T_19) @[Mux.scala 27:73]
    node _meta_T_23 = or(_meta_T_22, _meta_T_20) @[Mux.scala 27:73]
    node _meta_T_24 = or(_meta_T_23, _meta_T_21) @[Mux.scala 27:73]
    wire _meta_WIRE_2 : UInt<19> @[Mux.scala 27:73]
    _meta_WIRE_2 <= _meta_T_24 @[Mux.scala 27:73]
    meta.tag <= _meta_WIRE_2 @[Mux.scala 27:73]
    node _T = and(mmio, hit) @[Cache.scala 377:17]
    node _T_1 = eq(_T, UInt<1>("h0")) @[Cache.scala 377:10]
    node _T_2 = asUInt(reset) @[Cache.scala 377:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[Cache.scala 377:9]
    when _T_3 : @[Cache.scala 377:9]
      node _T_4 = eq(_T_1, UInt<1>("h0")) @[Cache.scala 377:9]
      when _T_4 : @[Cache.scala 377:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: MMIO request should not hit in cache\n    at Cache.scala:377 assert(!(mmio && hit), \"MMIO request should not hit in cache\")\n") : printf @[Cache.scala 377:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[Cache.scala 377:9]
    node _useForwardData_T = eq(io.in.bits.waymask, io.in.bits.forwardData.waymask) @[Cache.scala 385:52]
    node useForwardData = and(io.in.bits.isForwardData, _useForwardData_T) @[Cache.scala 385:30]
    node _dataReadArray_T = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _dataReadArray_T_1 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _dataReadArray_T_2 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _dataReadArray_T_3 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire _dataReadArray_WIRE : { data : UInt<64>} @[Mux.scala 27:73]
    node _dataReadArray_T_4 = mux(_dataReadArray_T, io.in.bits.datas[0].data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _dataReadArray_T_5 = mux(_dataReadArray_T_1, io.in.bits.datas[1].data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _dataReadArray_T_6 = mux(_dataReadArray_T_2, io.in.bits.datas[2].data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _dataReadArray_T_7 = mux(_dataReadArray_T_3, io.in.bits.datas[3].data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _dataReadArray_T_8 = or(_dataReadArray_T_4, _dataReadArray_T_5) @[Mux.scala 27:73]
    node _dataReadArray_T_9 = or(_dataReadArray_T_8, _dataReadArray_T_6) @[Mux.scala 27:73]
    node _dataReadArray_T_10 = or(_dataReadArray_T_9, _dataReadArray_T_7) @[Mux.scala 27:73]
    wire _dataReadArray_WIRE_1 : UInt<64> @[Mux.scala 27:73]
    _dataReadArray_WIRE_1 <= _dataReadArray_T_10 @[Mux.scala 27:73]
    _dataReadArray_WIRE.data <= _dataReadArray_WIRE_1 @[Mux.scala 27:73]
    node dataRead = mux(useForwardData, io.in.bits.forwardData.data.data, _dataReadArray_WIRE.data) @[Cache.scala 389:8]
    node _wordMask_T = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 391:9]
    node _wordMask_T_1 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _wordMask_T_2 = and(_wordMask_T, _wordMask_T_1) @[Cache.scala 391:15]
    node _wordMask_T_3 = bits(io.in.bits.req.wmask, 0, 0) @[BitUtils.scala 27:29]
    node _wordMask_T_4 = bits(io.in.bits.req.wmask, 1, 1) @[BitUtils.scala 27:29]
    node _wordMask_T_5 = bits(io.in.bits.req.wmask, 2, 2) @[BitUtils.scala 27:29]
    node _wordMask_T_6 = bits(io.in.bits.req.wmask, 3, 3) @[BitUtils.scala 27:29]
    node _wordMask_T_7 = bits(io.in.bits.req.wmask, 4, 4) @[BitUtils.scala 27:29]
    node _wordMask_T_8 = bits(io.in.bits.req.wmask, 5, 5) @[BitUtils.scala 27:29]
    node _wordMask_T_9 = bits(io.in.bits.req.wmask, 6, 6) @[BitUtils.scala 27:29]
    node _wordMask_T_10 = bits(io.in.bits.req.wmask, 7, 7) @[BitUtils.scala 27:29]
    node _wordMask_T_11 = bits(_wordMask_T_3, 0, 0) @[Bitwise.scala 77:15]
    node _wordMask_T_12 = mux(_wordMask_T_11, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _wordMask_T_13 = bits(_wordMask_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _wordMask_T_14 = mux(_wordMask_T_13, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _wordMask_T_15 = bits(_wordMask_T_5, 0, 0) @[Bitwise.scala 77:15]
    node _wordMask_T_16 = mux(_wordMask_T_15, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _wordMask_T_17 = bits(_wordMask_T_6, 0, 0) @[Bitwise.scala 77:15]
    node _wordMask_T_18 = mux(_wordMask_T_17, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _wordMask_T_19 = bits(_wordMask_T_7, 0, 0) @[Bitwise.scala 77:15]
    node _wordMask_T_20 = mux(_wordMask_T_19, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _wordMask_T_21 = bits(_wordMask_T_8, 0, 0) @[Bitwise.scala 77:15]
    node _wordMask_T_22 = mux(_wordMask_T_21, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _wordMask_T_23 = bits(_wordMask_T_9, 0, 0) @[Bitwise.scala 77:15]
    node _wordMask_T_24 = mux(_wordMask_T_23, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _wordMask_T_25 = bits(_wordMask_T_10, 0, 0) @[Bitwise.scala 77:15]
    node _wordMask_T_26 = mux(_wordMask_T_25, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node wordMask_lo_lo = cat(_wordMask_T_14, _wordMask_T_12) @[Cat.scala 33:92]
    node wordMask_lo_hi = cat(_wordMask_T_18, _wordMask_T_16) @[Cat.scala 33:92]
    node wordMask_lo = cat(wordMask_lo_hi, wordMask_lo_lo) @[Cat.scala 33:92]
    node wordMask_hi_lo = cat(_wordMask_T_22, _wordMask_T_20) @[Cat.scala 33:92]
    node wordMask_hi_hi = cat(_wordMask_T_26, _wordMask_T_24) @[Cat.scala 33:92]
    node wordMask_hi = cat(wordMask_hi_hi, wordMask_hi_lo) @[Cat.scala 33:92]
    node _wordMask_T_27 = cat(wordMask_hi, wordMask_lo) @[Cat.scala 33:92]
    node wordMask = mux(_wordMask_T_2, _wordMask_T_27, UInt<64>("h0")) @[Cache.scala 391:8]
    reg writeL2BeatCnt_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 61:40]
    node _T_5 = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    node _T_6 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 395:29]
    node _T_7 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _T_8 = or(_T_6, _T_7) @[Cache.scala 395:57]
    node _T_9 = and(_T_5, _T_8) @[Cache.scala 395:17]
    when _T_9 : @[Cache.scala 396:5]
      node wrap = eq(writeL2BeatCnt_value, UInt<3>("h7")) @[Counter.scala 73:24]
      node _value_T = add(writeL2BeatCnt_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      writeL2BeatCnt_value <= _value_T_1 @[Counter.scala 77:15]
    node _hitWrite_T = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node hitWrite = and(hit, _hitWrite_T) @[Cache.scala 400:22]
    wire dataHitWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 401:29]
    wire dataHitWriteBus_x1 : { data : UInt<64>} @[Cache.scala 402:16]
    node _dataHitWriteBus_x1_T = and(io.in.bits.req.wdata, wordMask) @[BitUtils.scala 34:14]
    node _dataHitWriteBus_x1_T_1 = not(wordMask) @[BitUtils.scala 34:39]
    node _dataHitWriteBus_x1_T_2 = and(dataRead, _dataHitWriteBus_x1_T_1) @[BitUtils.scala 34:37]
    node _dataHitWriteBus_x1_T_3 = or(_dataHitWriteBus_x1_T, _dataHitWriteBus_x1_T_2) @[BitUtils.scala 34:26]
    dataHitWriteBus_x1.data <= _dataHitWriteBus_x1_T_3 @[Cache.scala 117:15]
    node _dataHitWriteBus_x3_T = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 407:17]
    node _dataHitWriteBus_x3_T_1 = eq(io.in.bits.req.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
    node _dataHitWriteBus_x3_T_2 = or(_dataHitWriteBus_x3_T, _dataHitWriteBus_x3_T_1) @[Cache.scala 407:45]
    node _dataHitWriteBus_x3_T_3 = mux(_dataHitWriteBus_x3_T_2, writeL2BeatCnt_value, addr.wordIndex) @[Cache.scala 406:10]
    node dataHitWriteBus_x3 = cat(addr.index, _dataHitWriteBus_x3_T_3) @[Cat.scala 33:92]
    dataHitWriteBus.req.bits.setIdx <= dataHitWriteBus_x3 @[SRAMTemplate.scala 26:17]
    dataHitWriteBus.req.bits.data <= dataHitWriteBus_x1 @[SRAMTemplate.scala 37:15]
    dataHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataHitWriteBus.req.valid <= hitWrite @[SRAMTemplate.scala 63:20]
    wire metaHitWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 415:29]
    node _metaHitWriteBus_x5_T = eq(meta.dirty, UInt<1>("h0")) @[Cache.scala 416:25]
    node metaHitWriteBus_x5 = and(hitWrite, _metaHitWriteBus_x5_T) @[Cache.scala 416:22]
    wire _metaHitWriteBus_x6_WIRE : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _metaHitWriteBus_x6_WIRE_1 : UInt<32> @[Cache.scala 79:45]
    _metaHitWriteBus_x6_WIRE_1 <= io.in.bits.req.addr @[Cache.scala 79:45]
    node _metaHitWriteBus_x6_T = bits(_metaHitWriteBus_x6_WIRE_1, 2, 0) @[Cache.scala 79:45]
    _metaHitWriteBus_x6_WIRE.byteOffset <= _metaHitWriteBus_x6_T @[Cache.scala 79:45]
    node _metaHitWriteBus_x6_T_1 = bits(_metaHitWriteBus_x6_WIRE_1, 5, 3) @[Cache.scala 79:45]
    _metaHitWriteBus_x6_WIRE.wordIndex <= _metaHitWriteBus_x6_T_1 @[Cache.scala 79:45]
    node _metaHitWriteBus_x6_T_2 = bits(_metaHitWriteBus_x6_WIRE_1, 12, 6) @[Cache.scala 79:45]
    _metaHitWriteBus_x6_WIRE.index <= _metaHitWriteBus_x6_T_2 @[Cache.scala 79:45]
    node _metaHitWriteBus_x6_T_3 = bits(_metaHitWriteBus_x6_WIRE_1, 31, 13) @[Cache.scala 79:45]
    _metaHitWriteBus_x6_WIRE.tag <= _metaHitWriteBus_x6_T_3 @[Cache.scala 79:45]
    wire metaHitWriteBus_x8 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 419:16]
    metaHitWriteBus_x8.tag <= meta.tag @[Cache.scala 105:14]
    metaHitWriteBus_x8.valid <= UInt<1>("h1") @[Cache.scala 106:16]
    metaHitWriteBus_x8.dirty <= UInt<1>("h1") @[Cache.scala 107:16]
    metaHitWriteBus.req.bits.setIdx <= _metaHitWriteBus_x6_WIRE.index @[SRAMTemplate.scala 26:17]
    metaHitWriteBus.req.bits.data <= metaHitWriteBus_x8 @[SRAMTemplate.scala 37:15]
    metaHitWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaHitWriteBus.req.valid <= metaHitWriteBus_x5 @[SRAMTemplate.scala 63:20]
    reg state : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Cache.scala 425:22]
    reg needFlush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 426:26]
    node _T_10 = neq(state, UInt<4>("h0")) @[Cache.scala 428:27]
    node _T_11 = and(io.flush, _T_10) @[Cache.scala 428:17]
    when _T_11 : @[Cache.scala 428:40]
      needFlush <= UInt<1>("h1") @[Cache.scala 428:52]
    node _T_12 = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    node _T_13 = and(_T_12, needFlush) @[Cache.scala 429:20]
    when _T_13 : @[Cache.scala 429:34]
      needFlush <= UInt<1>("h0") @[Cache.scala 429:46]
    reg readBeatCnt_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 61:40]
    reg writeBeatCnt_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 61:40]
    reg state2 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Cache.scala 435:23]
    node _T_14 = eq(state, UInt<4>("h3")) @[Cache.scala 439:14]
    node _T_15 = eq(state, UInt<4>("h8")) @[Cache.scala 439:41]
    node _T_16 = or(_T_14, _T_15) @[Cache.scala 439:32]
    node _T_17 = eq(state2, UInt<2>("h0")) @[Cache.scala 439:67]
    node _T_18 = and(_T_16, _T_17) @[Cache.scala 439:56]
    node _T_19 = eq(state, UInt<4>("h8")) @[Cache.scala 442:17]
    node _T_20 = mux(_T_19, readBeatCnt_value, writeBeatCnt_value) @[Cache.scala 442:10]
    node _T_21 = cat(addr.index, _T_20) @[Cat.scala 33:92]
    io.dataReadBus.req.bits.setIdx <= _T_21 @[SRAMTemplate.scala 26:17]
    io.dataReadBus.req.valid <= _T_18 @[SRAMTemplate.scala 53:20]
    node _dataWay_T = eq(state2, UInt<2>("h1")) @[Cache.scala 445:60]
    reg dataWay : { data : UInt<64>}[4], clock with :
      reset => (UInt<1>("h0"), dataWay) @[Reg.scala 19:16]
    when _dataWay_T : @[Reg.scala 20:18]
      dataWay <= io.dataReadBus.resp.data @[Reg.scala 20:22]
    node _dataHitWay_T = bits(io.in.bits.waymask, 0, 0) @[Mux.scala 29:36]
    node _dataHitWay_T_1 = bits(io.in.bits.waymask, 1, 1) @[Mux.scala 29:36]
    node _dataHitWay_T_2 = bits(io.in.bits.waymask, 2, 2) @[Mux.scala 29:36]
    node _dataHitWay_T_3 = bits(io.in.bits.waymask, 3, 3) @[Mux.scala 29:36]
    wire _dataHitWay_WIRE : { data : UInt<64>} @[Mux.scala 27:73]
    node _dataHitWay_T_4 = mux(_dataHitWay_T, dataWay[0].data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _dataHitWay_T_5 = mux(_dataHitWay_T_1, dataWay[1].data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _dataHitWay_T_6 = mux(_dataHitWay_T_2, dataWay[2].data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _dataHitWay_T_7 = mux(_dataHitWay_T_3, dataWay[3].data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _dataHitWay_T_8 = or(_dataHitWay_T_4, _dataHitWay_T_5) @[Mux.scala 27:73]
    node _dataHitWay_T_9 = or(_dataHitWay_T_8, _dataHitWay_T_6) @[Mux.scala 27:73]
    node _dataHitWay_T_10 = or(_dataHitWay_T_9, _dataHitWay_T_7) @[Mux.scala 27:73]
    wire _dataHitWay_WIRE_1 : UInt<64> @[Mux.scala 27:73]
    _dataHitWay_WIRE_1 <= _dataHitWay_T_10 @[Mux.scala 27:73]
    _dataHitWay_WIRE.data <= _dataHitWay_WIRE_1 @[Mux.scala 27:73]
    node _T_22 = eq(UInt<2>("h0"), state2) @[Cache.scala 448:18]
    when _T_22 : @[Cache.scala 448:18]
      node _T_23 = and(io.dataReadBus.req.ready, io.dataReadBus.req.valid) @[Decoupled.scala 51:35]
      when _T_23 : @[Cache.scala 449:49]
        state2 <= UInt<2>("h1") @[Cache.scala 449:58]
    else :
      node _T_24 = eq(UInt<2>("h1"), state2) @[Cache.scala 448:18]
      when _T_24 : @[Cache.scala 448:18]
        state2 <= UInt<2>("h2") @[Cache.scala 450:34]
      else :
        node _T_25 = eq(UInt<2>("h2"), state2) @[Cache.scala 448:18]
        when _T_25 : @[Cache.scala 448:18]
          node _T_26 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 51:35]
          node _T_27 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 51:35]
          node _T_28 = or(_T_26, _T_27) @[Cache.scala 452:28]
          node _T_29 = and(hitReadBurst, io.out.ready) @[Cache.scala 452:63]
          node _T_30 = or(_T_28, _T_29) @[Cache.scala 452:47]
          when _T_30 : @[Cache.scala 452:80]
            state2 <= UInt<2>("h0") @[Cache.scala 453:16]
    node _raddr_T = bits(io.in.bits.req.addr, 31, 3) @[Cache.scala 460:34]
    node raddr = cat(_raddr_T, UInt<3>("h0")) @[Cat.scala 33:92]
    node waddr_hi = cat(meta.tag, addr.index) @[Cat.scala 33:92]
    node waddr = cat(waddr_hi, UInt<6>("h0")) @[Cat.scala 33:92]
    node _cmd_T = eq(state, UInt<4>("h1")) @[Cache.scala 465:11]
    node _cmd_T_1 = eq(writeBeatCnt_value, UInt<3>("h7")) @[Cache.scala 468:27]
    node _cmd_T_2 = mux(_cmd_T_1, UInt<3>("h7"), UInt<2>("h3")) @[Cache.scala 467:8]
    node cmd = mux(_cmd_T, UInt<2>("h2"), _cmd_T_2) @[Cache.scala 464:16]
    node _T_31 = eq(state, UInt<4>("h1")) @[Cache.scala 474:22]
    node _T_32 = mux(_T_31, raddr, waddr) @[Cache.scala 474:15]
    node _T_33 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    io.mem.req.bits.addr <= _T_32 @[SimpleBus.scala 64:15]
    io.mem.req.bits.cmd <= cmd @[SimpleBus.scala 65:14]
    io.mem.req.bits.size <= UInt<2>("h3") @[SimpleBus.scala 66:15]
    io.mem.req.bits.wdata <= _dataHitWay_WIRE.data @[SimpleBus.scala 67:16]
    io.mem.req.bits.wmask <= _T_33 @[SimpleBus.scala 68:16]
    io.mem.resp.ready <= UInt<1>("h1") @[Cache.scala 481:21]
    node _io_mem_req_valid_T = eq(state, UInt<4>("h1")) @[Cache.scala 482:30]
    node _io_mem_req_valid_T_1 = eq(state, UInt<4>("h3")) @[Cache.scala 482:59]
    node _io_mem_req_valid_T_2 = eq(state2, UInt<2>("h2")) @[Cache.scala 482:89]
    node _io_mem_req_valid_T_3 = and(_io_mem_req_valid_T_1, _io_mem_req_valid_T_2) @[Cache.scala 482:78]
    node _io_mem_req_valid_T_4 = or(_io_mem_req_valid_T, _io_mem_req_valid_T_3) @[Cache.scala 482:48]
    io.mem.req.valid <= _io_mem_req_valid_T_4 @[Cache.scala 482:20]
    io.mmio.req.bits.wdata <= io.in.bits.req.wdata @[Cache.scala 485:20]
    io.mmio.req.bits.wmask <= io.in.bits.req.wmask @[Cache.scala 485:20]
    io.mmio.req.bits.cmd <= io.in.bits.req.cmd @[Cache.scala 485:20]
    io.mmio.req.bits.size <= io.in.bits.req.size @[Cache.scala 485:20]
    io.mmio.req.bits.addr <= io.in.bits.req.addr @[Cache.scala 485:20]
    io.mmio.resp.ready <= UInt<1>("h1") @[Cache.scala 486:22]
    node _io_mmio_req_valid_T = eq(state, UInt<4>("h5")) @[Cache.scala 487:31]
    io.mmio.req.valid <= _io_mmio_req_valid_T @[Cache.scala 487:21]
    reg afterFirstRead : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 489:31]
    node _alreadyOutFire_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    reg alreadyOutFire : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when _alreadyOutFire_T : @[Reg.scala 36:18]
      alreadyOutFire <= UInt<1>("h1") @[Reg.scala 36:22]
    node _readingFirst_T = eq(afterFirstRead, UInt<1>("h0")) @[Cache.scala 492:5]
    node _readingFirst_T_1 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 51:35]
    node _readingFirst_T_2 = and(_readingFirst_T, _readingFirst_T_1) @[Cache.scala 492:21]
    node _readingFirst_T_3 = eq(state, UInt<4>("h2")) @[Cache.scala 492:51]
    node readingFirst = and(_readingFirst_T_2, _readingFirst_T_3) @[Cache.scala 492:41]
    node _inRdataRegDemand_T = mux(mmio, io.mmio.resp.bits.rdata, io.mem.resp.bits.rdata) @[Cache.scala 494:8]
    node _inRdataRegDemand_T_1 = eq(state, UInt<4>("h6")) @[Cache.scala 495:21]
    node _inRdataRegDemand_T_2 = mux(mmio, _inRdataRegDemand_T_1, readingFirst) @[Cache.scala 495:8]
    reg inRdataRegDemand : UInt<64>, clock with :
      reset => (UInt<1>("h0"), inRdataRegDemand) @[Reg.scala 19:16]
    when _inRdataRegDemand_T_2 : @[Reg.scala 20:18]
      inRdataRegDemand <= _inRdataRegDemand_T @[Reg.scala 20:22]
    node _io_cohResp_valid_T = eq(state, UInt<4>("h0")) @[Cache.scala 499:31]
    node _io_cohResp_valid_T_1 = and(_io_cohResp_valid_T, probe) @[Cache.scala 499:43]
    node _io_cohResp_valid_T_2 = eq(state, UInt<4>("h8")) @[Cache.scala 500:13]
    node _io_cohResp_valid_T_3 = eq(state2, UInt<2>("h2")) @[Cache.scala 500:39]
    node _io_cohResp_valid_T_4 = and(_io_cohResp_valid_T_2, _io_cohResp_valid_T_3) @[Cache.scala 500:28]
    node _io_cohResp_valid_T_5 = or(_io_cohResp_valid_T_1, _io_cohResp_valid_T_4) @[Cache.scala 499:53]
    io.cohResp.valid <= _io_cohResp_valid_T_5 @[Cache.scala 499:20]
    io.cohResp.bits.rdata <= _dataHitWay_WIRE.data @[Cache.scala 501:25]
    node _releaseLast_T = eq(state, UInt<4>("h8")) @[Cache.scala 503:19]
    node _releaseLast_T_1 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 51:35]
    node _releaseLast_T_2 = and(_releaseLast_T, _releaseLast_T_1) @[Cache.scala 503:33]
    reg releaseLast_c_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 61:40]
    wire releaseLast : UInt<1> @[Counter.scala 117:24]
    releaseLast <= UInt<1>("h0") @[Counter.scala 117:24]
    when _releaseLast_T_2 : @[Counter.scala 118:16]
      node releaseLast_wrap_wrap = eq(releaseLast_c_value, UInt<3>("h7")) @[Counter.scala 73:24]
      node _releaseLast_wrap_value_T = add(releaseLast_c_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _releaseLast_wrap_value_T_1 = tail(_releaseLast_wrap_value_T, 1) @[Counter.scala 77:24]
      releaseLast_c_value <= _releaseLast_wrap_value_T_1 @[Counter.scala 77:15]
      releaseLast <= releaseLast_wrap_wrap @[Counter.scala 118:23]
    node _io_cohResp_bits_cmd_T = eq(state, UInt<4>("h8")) @[Cache.scala 505:11]
    node _io_cohResp_bits_cmd_T_1 = mux(releaseLast, UInt<3>("h6"), UInt<1>("h0")) @[Cache.scala 506:8]
    node _io_cohResp_bits_cmd_T_2 = mux(hit, UInt<4>("hc"), UInt<4>("h8")) @[Cache.scala 507:8]
    node _io_cohResp_bits_cmd_T_3 = mux(_io_cohResp_bits_cmd_T, _io_cohResp_bits_cmd_T_1, _io_cohResp_bits_cmd_T_2) @[Cache.scala 504:29]
    io.cohResp.bits.cmd <= _io_cohResp_bits_cmd_T_3 @[Cache.scala 504:23]
    node _respToL1Fire_T = and(hitReadBurst, io.out.ready) @[Cache.scala 510:35]
    node _respToL1Fire_T_1 = eq(state2, UInt<2>("h2")) @[Cache.scala 510:61]
    node respToL1Fire = and(_respToL1Fire_T, _respToL1Fire_T_1) @[Cache.scala 510:51]
    node _respToL1Last_T = eq(state, UInt<4>("h0")) @[Cache.scala 512:12]
    node _respToL1Last_T_1 = eq(state, UInt<4>("h8")) @[Cache.scala 512:32]
    node _respToL1Last_T_2 = eq(state2, UInt<2>("h2")) @[Cache.scala 512:56]
    node _respToL1Last_T_3 = and(_respToL1Last_T_1, _respToL1Last_T_2) @[Cache.scala 512:46]
    node _respToL1Last_T_4 = or(_respToL1Last_T, _respToL1Last_T_3) @[Cache.scala 512:23]
    node _respToL1Last_T_5 = and(_respToL1Last_T_4, hitReadBurst) @[Cache.scala 512:71]
    node _respToL1Last_T_6 = and(_respToL1Last_T_5, io.out.ready) @[Cache.scala 512:87]
    reg respToL1Last_c_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 61:40]
    wire respToL1Last : UInt<1> @[Counter.scala 117:24]
    respToL1Last <= UInt<1>("h0") @[Counter.scala 117:24]
    when _respToL1Last_T_6 : @[Counter.scala 118:16]
      node respToL1Last_wrap_wrap = eq(respToL1Last_c_value, UInt<3>("h7")) @[Counter.scala 73:24]
      node _respToL1Last_wrap_value_T = add(respToL1Last_c_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _respToL1Last_wrap_value_T_1 = tail(_respToL1Last_wrap_value_T, 1) @[Counter.scala 77:24]
      respToL1Last_c_value <= _respToL1Last_wrap_value_T_1 @[Counter.scala 77:15]
      respToL1Last <= respToL1Last_wrap_wrap @[Counter.scala 118:23]
    node _T_34 = eq(UInt<4>("h0"), state) @[Cache.scala 516:17]
    when _T_34 : @[Cache.scala 516:17]
      afterFirstRead <= UInt<1>("h0") @[Cache.scala 518:22]
      alreadyOutFire <= UInt<1>("h0") @[Cache.scala 519:22]
      when probe : @[Cache.scala 521:19]
        node _T_35 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 51:35]
        when _T_35 : @[Cache.scala 522:31]
          node _state_T = mux(hit, UInt<4>("h8"), UInt<4>("h0")) @[Cache.scala 523:23]
          state <= _state_T @[Cache.scala 523:17]
          readBeatCnt_value <= addr.wordIndex @[Cache.scala 524:29]
      else :
        node _T_36 = and(hitReadBurst, io.out.ready) @[Cache.scala 526:31]
        when _T_36 : @[Cache.scala 526:48]
          state <= UInt<4>("h8") @[Cache.scala 527:15]
          node _value_T_2 = eq(addr.wordIndex, UInt<3>("h7")) @[Cache.scala 529:26]
          node _value_T_3 = add(addr.wordIndex, UInt<1>("h1")) @[Cache.scala 531:27]
          node _value_T_4 = tail(_value_T_3, 1) @[Cache.scala 531:27]
          node _value_T_5 = mux(_value_T_2, UInt<1>("h0"), _value_T_4) @[Cache.scala 528:33]
          readBeatCnt_value <= _value_T_5 @[Cache.scala 528:27]
        else :
          node _T_37 = or(miss, mmio) @[Cache.scala 533:24]
          node _T_38 = eq(io.flush, UInt<1>("h0")) @[Cache.scala 533:36]
          node _T_39 = and(_T_37, _T_38) @[Cache.scala 533:33]
          when _T_39 : @[Cache.scala 533:47]
            node _state_T_1 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 537:15]
            node _state_T_2 = and(_state_T_1, meta.dirty) @[Cache.scala 537:21]
            node _state_T_3 = mux(_state_T_2, UInt<4>("h3"), UInt<4>("h1")) @[Cache.scala 537:14]
            node _state_T_4 = mux(mmio, UInt<4>("h5"), _state_T_3) @[Cache.scala 534:21]
            state <= _state_T_4 @[Cache.scala 534:15]
    else :
      node _T_40 = eq(UInt<4>("h5"), state) @[Cache.scala 516:17]
      when _T_40 : @[Cache.scala 516:17]
        node _T_41 = and(io.mmio.req.ready, io.mmio.req.valid) @[Decoupled.scala 51:35]
        when _T_41 : @[Cache.scala 542:44]
          state <= UInt<4>("h6") @[Cache.scala 542:52]
      else :
        node _T_42 = eq(UInt<4>("h6"), state) @[Cache.scala 516:17]
        when _T_42 : @[Cache.scala 516:17]
          node _T_43 = and(io.mmio.resp.ready, io.mmio.resp.valid) @[Decoupled.scala 51:35]
          when _T_43 : @[Cache.scala 543:46]
            state <= UInt<4>("h7") @[Cache.scala 543:54]
        else :
          node _T_44 = eq(UInt<4>("h8"), state) @[Cache.scala 516:17]
          when _T_44 : @[Cache.scala 516:17]
            node _T_45 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 51:35]
            node _T_46 = or(_T_45, respToL1Fire) @[Cache.scala 546:28]
            when _T_46 : @[Cache.scala 546:45]
              node wrap_1 = eq(readBeatCnt_value, UInt<3>("h7")) @[Counter.scala 73:24]
              node _value_T_6 = add(readBeatCnt_value, UInt<1>("h1")) @[Counter.scala 77:24]
              node _value_T_7 = tail(_value_T_6, 1) @[Counter.scala 77:24]
              readBeatCnt_value <= _value_T_7 @[Counter.scala 77:15]
            node _T_47 = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 51:35]
            node _T_48 = and(probe, _T_47) @[Cache.scala 548:15]
            node _T_49 = and(_T_48, releaseLast) @[Cache.scala 548:34]
            node _T_50 = and(respToL1Fire, respToL1Last) @[Cache.scala 548:65]
            node _T_51 = or(_T_49, _T_50) @[Cache.scala 548:49]
            when _T_51 : @[Cache.scala 549:9]
              state <= UInt<4>("h0") @[Cache.scala 549:17]
          else :
            node _T_52 = eq(UInt<4>("h1"), state) @[Cache.scala 516:17]
            when _T_52 : @[Cache.scala 516:17]
              node _T_53 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 51:35]
              when _T_53 : @[Cache.scala 553:29]
                state <= UInt<4>("h2") @[Cache.scala 554:15]
                readBeatCnt_value <= addr.wordIndex @[Cache.scala 555:27]
            else :
              node _T_54 = eq(UInt<4>("h2"), state) @[Cache.scala 516:17]
              when _T_54 : @[Cache.scala 516:17]
                node _T_55 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 51:35]
                when _T_55 : @[Cache.scala 560:30]
                  afterFirstRead <= UInt<1>("h1") @[Cache.scala 561:24]
                  node wrap_2 = eq(readBeatCnt_value, UInt<3>("h7")) @[Counter.scala 73:24]
                  node _value_T_8 = add(readBeatCnt_value, UInt<1>("h1")) @[Counter.scala 77:24]
                  node _value_T_9 = tail(_value_T_8, 1) @[Counter.scala 77:24]
                  readBeatCnt_value <= _value_T_9 @[Counter.scala 77:15]
                  node _T_56 = eq(io.in.bits.req.cmd, UInt<2>("h3")) @[Cache.scala 563:22]
                  when _T_56 : @[Cache.scala 563:51]
                    writeL2BeatCnt_value <= UInt<1>("h0") @[Cache.scala 564:32]
                  node _T_57 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:24]
                  when _T_57 : @[Cache.scala 566:43]
                    state <= UInt<4>("h7") @[Cache.scala 566:51]
              else :
                node _T_58 = eq(UInt<4>("h3"), state) @[Cache.scala 516:17]
                when _T_58 : @[Cache.scala 516:17]
                  node _T_59 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 51:35]
                  when _T_59 : @[Cache.scala 571:29]
                    node wrap_3 = eq(writeBeatCnt_value, UInt<3>("h7")) @[Counter.scala 73:24]
                    node _value_T_10 = add(writeBeatCnt_value, UInt<1>("h1")) @[Counter.scala 77:24]
                    node _value_T_11 = tail(_value_T_10, 1) @[Counter.scala 77:24]
                    writeBeatCnt_value <= _value_T_11 @[Counter.scala 77:15]
                  node _T_60 = eq(io.mem.req.bits.cmd, UInt<3>("h7")) @[SimpleBus.scala 78:27]
                  node _T_61 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 51:35]
                  node _T_62 = and(_T_60, _T_61) @[Cache.scala 572:42]
                  when _T_62 : @[Cache.scala 572:62]
                    state <= UInt<4>("h4") @[Cache.scala 573:15]
                else :
                  node _T_63 = eq(UInt<4>("h4"), state) @[Cache.scala 516:17]
                  when _T_63 : @[Cache.scala 516:17]
                    node _T_64 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 51:35]
                    when _T_64 : @[Cache.scala 577:49]
                      state <= UInt<4>("h1") @[Cache.scala 577:57]
                  else :
                    node _T_65 = eq(UInt<4>("h7"), state) @[Cache.scala 516:17]
                    when _T_65 : @[Cache.scala 516:17]
                      node _T_66 = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
                      node _T_67 = or(_T_66, needFlush) @[Cache.scala 579:24]
                      node _T_68 = or(_T_67, alreadyOutFire) @[Cache.scala 579:37]
                      when _T_68 : @[Cache.scala 579:56]
                        state <= UInt<4>("h0") @[Cache.scala 579:64]
    node _dataRefill_T = mux(readingFirst, wordMask, UInt<64>("h0")) @[Cache.scala 586:8]
    node _dataRefill_T_1 = and(io.in.bits.req.wdata, _dataRefill_T) @[BitUtils.scala 34:14]
    node _dataRefill_T_2 = not(_dataRefill_T) @[BitUtils.scala 34:39]
    node _dataRefill_T_3 = and(io.mem.resp.bits.rdata, _dataRefill_T_2) @[BitUtils.scala 34:37]
    node dataRefill = or(_dataRefill_T_1, _dataRefill_T_3) @[BitUtils.scala 34:26]
    wire dataRefillWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}} @[Cache.scala 588:32]
    node _dataRefillWriteBus_x9_T = eq(state, UInt<4>("h2")) @[Cache.scala 589:20]
    node _dataRefillWriteBus_x9_T_1 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 51:35]
    node dataRefillWriteBus_x9 = and(_dataRefillWriteBus_x9_T, _dataRefillWriteBus_x9_T_1) @[Cache.scala 589:39]
    node dataRefillWriteBus_x10 = cat(addr.index, readBeatCnt_value) @[Cat.scala 33:92]
    wire dataRefillWriteBus_x11 : { data : UInt<64>} @[Cache.scala 591:16]
    dataRefillWriteBus_x11.data <= dataRefill @[Cache.scala 117:15]
    dataRefillWriteBus.req.bits.setIdx <= dataRefillWriteBus_x10 @[SRAMTemplate.scala 26:17]
    dataRefillWriteBus.req.bits.data <= dataRefillWriteBus_x11 @[SRAMTemplate.scala 37:15]
    dataRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    dataRefillWriteBus.req.valid <= dataRefillWriteBus_x9 @[SRAMTemplate.scala 63:20]
    dataWriteArb.io.in[0] <= dataHitWriteBus.req @[Cache.scala 595:25]
    dataWriteArb.io.in[1] <= dataRefillWriteBus.req @[Cache.scala 596:25]
    io.dataWriteBus.req.bits <= dataWriteArb.io.out.bits @[Cache.scala 597:23]
    io.dataWriteBus.req.valid <= dataWriteArb.io.out.valid @[Cache.scala 597:23]
    dataWriteArb.io.out.ready <= io.dataWriteBus.req.ready @[Cache.scala 597:23]
    wire metaRefillWriteBus : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}} @[Cache.scala 599:32]
    node _metaRefillWriteBus_T = eq(state, UInt<4>("h2")) @[Cache.scala 601:14]
    node _metaRefillWriteBus_T_1 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 51:35]
    node _metaRefillWriteBus_T_2 = and(_metaRefillWriteBus_T, _metaRefillWriteBus_T_1) @[Cache.scala 601:33]
    node _metaRefillWriteBus_T_3 = eq(io.mem.resp.bits.cmd, UInt<3>("h6")) @[SimpleBus.scala 91:24]
    node _metaRefillWriteBus_T_4 = and(_metaRefillWriteBus_T_2, _metaRefillWriteBus_T_3) @[Cache.scala 601:53]
    wire metaRefillWriteBus_qual4 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[Cache.scala 602:16]
    node _metaRefillWriteBus_x15_T = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 603:54]
    node _metaRefillWriteBus_x15_T_1 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node metaRefillWriteBus_x15 = and(_metaRefillWriteBus_x15_T, _metaRefillWriteBus_x15_T_1) @[Cache.scala 603:60]
    metaRefillWriteBus_qual4.tag <= addr.tag @[Cache.scala 105:14]
    metaRefillWriteBus_qual4.valid <= UInt<1>("h1") @[Cache.scala 106:16]
    metaRefillWriteBus_qual4.dirty <= metaRefillWriteBus_x15 @[Cache.scala 107:16]
    wire _metaRefillWriteBus_WIRE : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _metaRefillWriteBus_WIRE_1 : UInt<32> @[Cache.scala 79:45]
    _metaRefillWriteBus_WIRE_1 <= io.in.bits.req.addr @[Cache.scala 79:45]
    node _metaRefillWriteBus_T_5 = bits(_metaRefillWriteBus_WIRE_1, 2, 0) @[Cache.scala 79:45]
    _metaRefillWriteBus_WIRE.byteOffset <= _metaRefillWriteBus_T_5 @[Cache.scala 79:45]
    node _metaRefillWriteBus_T_6 = bits(_metaRefillWriteBus_WIRE_1, 5, 3) @[Cache.scala 79:45]
    _metaRefillWriteBus_WIRE.wordIndex <= _metaRefillWriteBus_T_6 @[Cache.scala 79:45]
    node _metaRefillWriteBus_T_7 = bits(_metaRefillWriteBus_WIRE_1, 12, 6) @[Cache.scala 79:45]
    _metaRefillWriteBus_WIRE.index <= _metaRefillWriteBus_T_7 @[Cache.scala 79:45]
    node _metaRefillWriteBus_T_8 = bits(_metaRefillWriteBus_WIRE_1, 31, 13) @[Cache.scala 79:45]
    _metaRefillWriteBus_WIRE.tag <= _metaRefillWriteBus_T_8 @[Cache.scala 79:45]
    metaRefillWriteBus.req.bits.setIdx <= _metaRefillWriteBus_WIRE.index @[SRAMTemplate.scala 26:17]
    metaRefillWriteBus.req.bits.data <= metaRefillWriteBus_qual4 @[SRAMTemplate.scala 37:15]
    metaRefillWriteBus.req.bits.waymask <= io.in.bits.waymask @[SRAMTemplate.scala 38:24]
    metaRefillWriteBus.req.valid <= _metaRefillWriteBus_T_4 @[SRAMTemplate.scala 63:20]
    metaWriteArb.io.in[0] <= metaHitWriteBus.req @[Cache.scala 608:25]
    metaWriteArb.io.in[1] <= metaRefillWriteBus.req @[Cache.scala 609:25]
    io.metaWriteBus.req.bits <= metaWriteArb.io.out.bits @[Cache.scala 610:23]
    io.metaWriteBus.req.valid <= metaWriteArb.io.out.valid @[Cache.scala 610:23]
    metaWriteArb.io.out.ready <= io.metaWriteBus.req.ready @[Cache.scala 610:23]
    node _io_out_bits_rdata_T = mux(hit, dataRead, inRdataRegDemand) @[Cache.scala 638:29]
    io.out.bits.rdata <= _io_out_bits_rdata_T @[Cache.scala 638:23]
    node _io_out_bits_cmd_T = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 73:22]
    node _io_out_bits_cmd_T_1 = eq(_io_out_bits_cmd_T, UInt<1>("h0")) @[SimpleBus.scala 73:18]
    node _io_out_bits_cmd_T_2 = bits(io.in.bits.req.cmd, 3, 3) @[SimpleBus.scala 73:33]
    node _io_out_bits_cmd_T_3 = eq(_io_out_bits_cmd_T_2, UInt<1>("h0")) @[SimpleBus.scala 73:29]
    node _io_out_bits_cmd_T_4 = and(_io_out_bits_cmd_T_1, _io_out_bits_cmd_T_3) @[SimpleBus.scala 73:26]
    node _io_out_bits_cmd_T_5 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    wire _io_out_bits_cmd_WIRE : UInt<3> @[Cache.scala 642:10]
    _io_out_bits_cmd_WIRE is invalid @[Cache.scala 642:10]
    node _io_out_bits_cmd_T_6 = mux(_io_out_bits_cmd_T_5, UInt<3>("h5"), _io_out_bits_cmd_WIRE) @[Cache.scala 642:10]
    node _io_out_bits_cmd_T_7 = mux(_io_out_bits_cmd_T_4, UInt<3>("h6"), _io_out_bits_cmd_T_6) @[Cache.scala 639:27]
    io.out.bits.cmd <= _io_out_bits_cmd_T_7 @[Cache.scala 639:21]
    io.out.bits.user <= io.in.bits.req.user @[Cache.scala 645:57]
    node _io_out_valid_T = bits(io.in.bits.req.cmd, 1, 1) @[SimpleBus.scala 75:22]
    node _io_out_valid_T_1 = and(_io_out_valid_T, UInt<1>("h0")) @[Cache.scala 649:19]
    node _io_out_valid_T_2 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _io_out_valid_T_3 = eq(hit, UInt<1>("h0")) @[Cache.scala 651:32]
    node _io_out_valid_T_4 = eq(state, UInt<4>("h7")) @[Cache.scala 651:46]
    node _io_out_valid_T_5 = and(_io_out_valid_T_3, _io_out_valid_T_4) @[Cache.scala 651:37]
    node _io_out_valid_T_6 = or(hit, _io_out_valid_T_5) @[Cache.scala 651:29]
    node _io_out_valid_T_7 = and(_io_out_valid_T_2, _io_out_valid_T_6) @[Cache.scala 651:21]
    node _io_out_valid_T_8 = eq(state, UInt<4>("h2")) @[Cache.scala 653:14]
    node _io_out_valid_T_9 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 51:35]
    node _io_out_valid_T_10 = and(_io_out_valid_T_8, _io_out_valid_T_9) @[Cache.scala 653:32]
    node _io_out_valid_T_11 = eq(io.in.bits.req.cmd, UInt<2>("h2")) @[Cache.scala 653:63]
    node _io_out_valid_T_12 = and(_io_out_valid_T_10, _io_out_valid_T_11) @[Cache.scala 653:52]
    node _io_out_valid_T_13 = mux(_io_out_valid_T_7, UInt<1>("h1"), _io_out_valid_T_12) @[Cache.scala 650:8]
    node _io_out_valid_T_14 = and(respToL1Fire, respToL1Last) @[Cache.scala 654:24]
    node _io_out_valid_T_15 = eq(state, UInt<4>("h8")) @[Cache.scala 654:49]
    node _io_out_valid_T_16 = and(_io_out_valid_T_14, _io_out_valid_T_15) @[Cache.scala 654:40]
    node _io_out_valid_T_17 = or(_io_out_valid_T_13, _io_out_valid_T_16) @[Cache.scala 654:7]
    node _io_out_valid_T_18 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _io_out_valid_T_19 = or(_io_out_valid_T_18, mmio) @[Cache.scala 662:25]
    node _io_out_valid_T_20 = eq(state, UInt<4>("h7")) @[Cache.scala 663:17]
    node _io_out_valid_T_21 = eq(alreadyOutFire, UInt<1>("h0")) @[Cache.scala 664:29]
    node _io_out_valid_T_22 = and(afterFirstRead, _io_out_valid_T_21) @[Cache.scala 664:26]
    node _io_out_valid_T_23 = mux(_io_out_valid_T_19, _io_out_valid_T_20, _io_out_valid_T_22) @[Cache.scala 661:12]
    node _io_out_valid_T_24 = mux(hit, UInt<1>("h1"), _io_out_valid_T_23) @[Cache.scala 658:10]
    node _io_out_valid_T_25 = mux(probe, UInt<1>("h0"), _io_out_valid_T_24) @[Cache.scala 655:8]
    node _io_out_valid_T_26 = mux(_io_out_valid_T_1, _io_out_valid_T_17, _io_out_valid_T_25) @[Cache.scala 648:37]
    node _io_out_valid_T_27 = and(io.in.valid, _io_out_valid_T_26) @[Cache.scala 648:31]
    io.out.valid <= _io_out_valid_T_27 @[Cache.scala 648:16]
    node _io_isFinish_T = and(io.cohResp.ready, io.cohResp.valid) @[Decoupled.scala 51:35]
    node _io_isFinish_T_1 = eq(state, UInt<4>("h0")) @[Cache.scala 678:13]
    node _io_isFinish_T_2 = eq(state, UInt<4>("h8")) @[Cache.scala 679:14]
    node _io_isFinish_T_3 = and(_io_isFinish_T_2, releaseLast) @[Cache.scala 679:29]
    node _io_isFinish_T_4 = mux(miss, _io_isFinish_T_1, _io_isFinish_T_3) @[Cache.scala 676:27]
    node _io_isFinish_T_5 = and(_io_isFinish_T, _io_isFinish_T_4) @[Cache.scala 676:21]
    node _io_isFinish_T_6 = bits(io.in.bits.req.cmd, 0, 0) @[SimpleBus.scala 74:22]
    node _io_isFinish_T_7 = or(hit, _io_isFinish_T_6) @[Cache.scala 682:11]
    node _io_isFinish_T_8 = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    node _io_isFinish_T_9 = eq(state, UInt<4>("h7")) @[Cache.scala 684:14]
    node _io_isFinish_T_10 = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    node _io_isFinish_T_11 = or(_io_isFinish_T_10, alreadyOutFire) @[Cache.scala 684:47]
    node _io_isFinish_T_12 = and(_io_isFinish_T_9, _io_isFinish_T_11) @[Cache.scala 684:31]
    node _io_isFinish_T_13 = mux(_io_isFinish_T_7, _io_isFinish_T_8, _io_isFinish_T_12) @[Cache.scala 681:8]
    node _io_isFinish_T_14 = mux(probe, _io_isFinish_T_5, _io_isFinish_T_13) @[Cache.scala 674:21]
    io.isFinish <= _io_isFinish_T_14 @[Cache.scala 674:15]
    node _io_in_ready_T = eq(state, UInt<4>("h0")) @[Cache.scala 688:41]
    node _io_in_ready_T_1 = eq(hitReadBurst, UInt<1>("h0")) @[Cache.scala 688:55]
    node _io_in_ready_T_2 = and(_io_in_ready_T, _io_in_ready_T_1) @[Cache.scala 688:52]
    node _io_in_ready_T_3 = and(io.out.ready, _io_in_ready_T_2) @[Cache.scala 688:31]
    node _io_in_ready_T_4 = eq(miss, UInt<1>("h0")) @[Cache.scala 688:73]
    node _io_in_ready_T_5 = and(_io_in_ready_T_3, _io_in_ready_T_4) @[Cache.scala 688:70]
    node _io_in_ready_T_6 = eq(probe, UInt<1>("h0")) @[Cache.scala 688:82]
    node _io_in_ready_T_7 = and(_io_in_ready_T_5, _io_in_ready_T_6) @[Cache.scala 688:79]
    io.in.ready <= _io_in_ready_T_7 @[Cache.scala 688:15]
    node _io_dataReadRespToL1_T = eq(state, UInt<4>("h0")) @[Cache.scala 689:49]
    node _io_dataReadRespToL1_T_1 = and(_io_dataReadRespToL1_T, io.out.ready) @[Cache.scala 689:60]
    node _io_dataReadRespToL1_T_2 = eq(state, UInt<4>("h8")) @[Cache.scala 689:85]
    node _io_dataReadRespToL1_T_3 = eq(state2, UInt<2>("h2")) @[Cache.scala 689:109]
    node _io_dataReadRespToL1_T_4 = and(_io_dataReadRespToL1_T_2, _io_dataReadRespToL1_T_3) @[Cache.scala 689:99]
    node _io_dataReadRespToL1_T_5 = or(_io_dataReadRespToL1_T_1, _io_dataReadRespToL1_T_4) @[Cache.scala 689:76]
    node _io_dataReadRespToL1_T_6 = and(hitReadBurst, _io_dataReadRespToL1_T_5) @[Cache.scala 689:39]
    io.dataReadRespToL1 <= _io_dataReadRespToL1_T_6 @[Cache.scala 689:23]
    node _T_69 = and(metaHitWriteBus.req.valid, metaRefillWriteBus.req.valid) @[Cache.scala 691:38]
    node _T_70 = eq(_T_69, UInt<1>("h0")) @[Cache.scala 691:10]
    node _T_71 = asUInt(reset) @[Cache.scala 691:9]
    node _T_72 = eq(_T_71, UInt<1>("h0")) @[Cache.scala 691:9]
    when _T_72 : @[Cache.scala 691:9]
      node _T_73 = eq(_T_70, UInt<1>("h0")) @[Cache.scala 691:9]
      when _T_73 : @[Cache.scala 691:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:691 assert(!(metaHitWriteBus.req.valid && metaRefillWriteBus.req.valid))\n") : printf_1 @[Cache.scala 691:9]
      assert(clock, _T_70, UInt<1>("h1"), "") : assert_1 @[Cache.scala 691:9]
    node _T_74 = and(dataHitWriteBus.req.valid, dataRefillWriteBus.req.valid) @[Cache.scala 692:38]
    node _T_75 = eq(_T_74, UInt<1>("h0")) @[Cache.scala 692:10]
    node _T_76 = asUInt(reset) @[Cache.scala 692:9]
    node _T_77 = eq(_T_76, UInt<1>("h0")) @[Cache.scala 692:9]
    when _T_77 : @[Cache.scala 692:9]
      node _T_78 = eq(_T_75, UInt<1>("h0")) @[Cache.scala 692:9]
      when _T_78 : @[Cache.scala 692:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Cache.scala:692 assert(!(dataHitWriteBus.req.valid && dataRefillWriteBus.req.valid))\n") : printf_2 @[Cache.scala 692:9]
      assert(clock, _T_75, UInt<1>("h1"), "") : assert_2 @[Cache.scala 692:9]
    node _T_79 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Cache.scala 693:12]
    node _T_80 = and(_T_79, io.flush) @[Cache.scala 693:18]
    node _T_81 = eq(_T_80, UInt<1>("h0")) @[Cache.scala 693:10]
    node _T_82 = asUInt(reset) @[Cache.scala 693:9]
    node _T_83 = eq(_T_82, UInt<1>("h0")) @[Cache.scala 693:9]
    when _T_83 : @[Cache.scala 693:9]
      node _T_84 = eq(_T_81, UInt<1>("h0")) @[Cache.scala 693:9]
      when _T_84 : @[Cache.scala 693:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: only allow to flush icache\n    at Cache.scala:693 assert(!(!ro.B && io.flush), \"only allow to flush icache\")\n") : printf_3 @[Cache.scala 693:9]
      assert(clock, _T_81, UInt<1>("h1"), "") : assert_3 @[Cache.scala 693:9]
    wire _WIRE : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_1 : UInt<32> @[Cache.scala 79:45]
    _WIRE_1 <= io.in.bits.req.addr @[Cache.scala 79:45]
    node _T_85 = bits(_WIRE_1, 2, 0) @[Cache.scala 79:45]
    _WIRE.byteOffset <= _T_85 @[Cache.scala 79:45]
    node _T_86 = bits(_WIRE_1, 5, 3) @[Cache.scala 79:45]
    _WIRE.wordIndex <= _T_86 @[Cache.scala 79:45]
    node _T_87 = bits(_WIRE_1, 12, 6) @[Cache.scala 79:45]
    _WIRE.index <= _T_87 @[Cache.scala 79:45]
    node _T_88 = bits(_WIRE_1, 31, 13) @[Cache.scala 79:45]
    _WIRE.tag <= _T_88 @[Cache.scala 79:45]
    node lo = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 710:22]
    node hi = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 710:22]
    node _T_89 = cat(hi, lo) @[Cache.scala 710:22]
    reg c : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T = add(c, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_1 = tail(_c_T, 1) @[GTimer.scala 25:12]
    c <= _c_T_1 @[GTimer.scala 25:7]
    wire enableDisplay : UInt<1> @[Debug.scala 40:33]
    enableDisplay <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_90 = and(UInt<1>("h1"), enableDisplay) @[Debug.scala 55:16]
    when _T_90 : @[Debug.scala 55:31]
      node _T_91 = asUInt(reset) @[Debug.scala 56:24]
      node _T_92 = eq(_T_91, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_92 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c) : printf_4 @[Debug.scala 56:24]
      node _T_93 = asUInt(reset) @[Debug.scala 57:13]
      node _T_94 = eq(_T_93, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_94 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " metaread idx %x waymask %b metas %x%x:%x %x%x:%x %x%x:%x %x%x:%x %x\n", _WIRE.index, io.in.bits.waymask, io.in.bits.metas[0].valid, io.in.bits.metas[0].dirty, io.in.bits.metas[0].tag, io.in.bits.metas[1].valid, io.in.bits.metas[1].dirty, io.in.bits.metas[1].tag, io.in.bits.metas[2].valid, io.in.bits.metas[2].dirty, io.in.bits.metas[2].tag, io.in.bits.metas[3].valid, io.in.bits.metas[3].dirty, io.in.bits.metas[3].tag, _T_89) : printf_5 @[Debug.scala 57:13]
    node _T_95 = and(io.metaWriteBus.req.ready, io.metaWriteBus.req.valid) @[Decoupled.scala 51:35]
    reg c_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_2 = add(c_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_3 = tail(_c_T_2, 1) @[GTimer.scala 25:12]
    c_1 <= _c_T_3 @[GTimer.scala 25:7]
    reg c_2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_4 = add(c_2, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_5 = tail(_c_T_4, 1) @[GTimer.scala 25:12]
    c_2 <= _c_T_5 @[GTimer.scala 25:7]
    wire enableDisplay_1 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_1 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_96 = and(_T_95, enableDisplay_1) @[Debug.scala 55:16]
    when _T_96 : @[Debug.scala 55:31]
      node _T_97 = asUInt(reset) @[Debug.scala 56:24]
      node _T_98 = eq(_T_97, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_98 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_2) : printf_6 @[Debug.scala 56:24]
      node _T_99 = asUInt(reset) @[Debug.scala 57:13]
      node _T_100 = eq(_T_99, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_100 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "%d: [tcache S3]: metawrite idx %x wmask %b meta %x%x:%x\n", c_1, io.metaWriteBus.req.bits.setIdx, io.metaWriteBus.req.bits.waymask, io.metaWriteBus.req.bits.data.valid, io.metaWriteBus.req.bits.data.dirty, io.metaWriteBus.req.bits.data.tag) : printf_7 @[Debug.scala 57:13]
    reg c_3 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_6 = add(c_3, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_7 = tail(_c_T_6, 1) @[GTimer.scala 25:12]
    c_3 <= _c_T_7 @[GTimer.scala 25:7]
    wire enableDisplay_2 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_2 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_101 = and(UInt<1>("h1"), enableDisplay_2) @[Debug.scala 55:16]
    when _T_101 : @[Debug.scala 55:31]
      node _T_102 = asUInt(reset) @[Debug.scala 56:24]
      node _T_103 = eq(_T_102, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_103 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_3) : printf_8 @[Debug.scala 56:24]
      node _T_104 = asUInt(reset) @[Debug.scala 57:13]
      node _T_105 = eq(_T_104, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_105 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " in.ready = %d, in.valid = %d, hit = %x, state = %d, addr = %x cmd:%d probe:%d isFinish:%d\n", io.in.ready, io.in.valid, hit, state, io.in.bits.req.addr, io.in.bits.req.cmd, probe, io.isFinish) : printf_9 @[Debug.scala 57:13]
    reg c_4 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_8 = add(c_4, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_9 = tail(_c_T_8, 1) @[GTimer.scala 25:12]
    c_4 <= _c_T_9 @[GTimer.scala 25:7]
    wire enableDisplay_3 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_3 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_106 = and(UInt<1>("h1"), enableDisplay_3) @[Debug.scala 55:16]
    when _T_106 : @[Debug.scala 55:31]
      node _T_107 = asUInt(reset) @[Debug.scala 56:24]
      node _T_108 = eq(_T_107, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_108 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_4) : printf_10 @[Debug.scala 56:24]
      node _T_109 = asUInt(reset) @[Debug.scala 57:13]
      node _T_110 = eq(_T_109, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_110 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " out.valid:%d rdata:%x cmd:%d user:%x id:%x \n", io.out.valid, io.out.bits.rdata, io.out.bits.cmd, io.out.bits.user, UInt<1>("h0")) : printf_11 @[Debug.scala 57:13]
    reg c_5 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_10 = add(c_5, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_11 = tail(_c_T_10, 1) @[GTimer.scala 25:12]
    c_5 <= _c_T_11 @[GTimer.scala 25:7]
    wire enableDisplay_4 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_4 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_111 = and(UInt<1>("h1"), enableDisplay_4) @[Debug.scala 55:16]
    when _T_111 : @[Debug.scala 55:31]
      node _T_112 = asUInt(reset) @[Debug.scala 56:24]
      node _T_113 = eq(_T_112, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_113 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_5) : printf_12 @[Debug.scala 56:24]
      node _T_114 = asUInt(reset) @[Debug.scala 57:13]
      node _T_115 = eq(_T_114, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_115 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " DHW: (%d, %d), data:%x setIdx:%x MHW:(%d, %d)\n", dataHitWriteBus.req.valid, dataHitWriteBus.req.ready, dataHitWriteBus.req.bits.data.data, dataHitWriteBus.req.bits.setIdx, metaHitWriteBus.req.valid, metaHitWriteBus.req.ready) : printf_13 @[Debug.scala 57:13]
    node lo_1 = cat(io.in.bits.datas[1].data, io.in.bits.datas[0].data) @[Cache.scala 750:48]
    node hi_1 = cat(io.in.bits.datas[3].data, io.in.bits.datas[2].data) @[Cache.scala 750:48]
    node _T_116 = cat(hi_1, lo_1) @[Cache.scala 750:48]
    reg c_6 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_12 = add(c_6, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_13 = tail(_c_T_12, 1) @[GTimer.scala 25:12]
    c_6 <= _c_T_13 @[GTimer.scala 25:7]
    wire enableDisplay_5 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_5 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_117 = and(UInt<1>("h1"), enableDisplay_5) @[Debug.scala 55:16]
    when _T_117 : @[Debug.scala 55:31]
      node _T_118 = asUInt(reset) @[Debug.scala 56:24]
      node _T_119 = eq(_T_118, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_119 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_6) : printf_14 @[Debug.scala 56:24]
      node _T_120 = asUInt(reset) @[Debug.scala 57:13]
      node _T_121 = eq(_T_120, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_121 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " DreadCache: %x \n", _T_116) : printf_15 @[Debug.scala 57:13]
    reg c_7 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_14 = add(c_7, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_15 = tail(_c_T_14, 1) @[GTimer.scala 25:12]
    c_7 <= _c_T_15 @[GTimer.scala 25:7]
    wire enableDisplay_6 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_6 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_122 = and(UInt<1>("h1"), enableDisplay_6) @[Debug.scala 55:16]
    when _T_122 : @[Debug.scala 55:31]
      node _T_123 = asUInt(reset) @[Debug.scala 56:24]
      node _T_124 = eq(_T_123, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_124 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_7) : printf_16 @[Debug.scala 56:24]
      node _T_125 = asUInt(reset) @[Debug.scala 57:13]
      node _T_126 = eq(_T_125, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_126 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), " useFD:%d isFD:%d FD:%x DreadArray:%x dataRead:%x inwaymask:%x FDwaymask:%x \n", useForwardData, io.in.bits.isForwardData, io.in.bits.forwardData.data.data, _dataReadArray_WIRE.data, dataRead, io.in.bits.waymask, io.in.bits.forwardData.waymask) : printf_17 @[Debug.scala 57:13]
    node _T_127 = and(io.dataWriteBus.req.ready, io.dataWriteBus.req.valid) @[Decoupled.scala 51:35]
    reg c_8 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_16 = add(c_8, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_17 = tail(_c_T_16, 1) @[GTimer.scala 25:12]
    c_8 <= _c_T_17 @[GTimer.scala 25:7]
    wire enableDisplay_7 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_7 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_128 = and(_T_127, enableDisplay_7) @[Debug.scala 55:16]
    when _T_128 : @[Debug.scala 55:31]
      node _T_129 = asUInt(reset) @[Debug.scala 56:24]
      node _T_130 = eq(_T_129, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_130 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_8) : printf_18 @[Debug.scala 56:24]
      node _T_131 = asUInt(reset) @[Debug.scala 57:13]
      node _T_132 = eq(_T_131, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_132 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[WB] waymask: %b data:%x setIdx:%x\n", io.dataWriteBus.req.bits.waymask, io.dataWriteBus.req.bits.data.data, io.dataWriteBus.req.bits.setIdx) : printf_19 @[Debug.scala 57:13]
    node _T_133 = eq(state, UInt<4>("h3")) @[Cache.scala 769:12]
    node _T_134 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 51:35]
    node _T_135 = and(_T_133, _T_134) @[Cache.scala 769:31]
    wire _WIRE_2 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_3 : UInt<32> @[Cache.scala 79:45]
    _WIRE_3 <= io.in.bits.req.addr @[Cache.scala 79:45]
    node _T_136 = bits(_WIRE_3, 2, 0) @[Cache.scala 79:45]
    _WIRE_2.byteOffset <= _T_136 @[Cache.scala 79:45]
    node _T_137 = bits(_WIRE_3, 5, 3) @[Cache.scala 79:45]
    _WIRE_2.wordIndex <= _T_137 @[Cache.scala 79:45]
    node _T_138 = bits(_WIRE_3, 12, 6) @[Cache.scala 79:45]
    _WIRE_2.index <= _T_138 @[Cache.scala 79:45]
    node _T_139 = bits(_WIRE_3, 31, 13) @[Cache.scala 79:45]
    _WIRE_2.tag <= _T_139 @[Cache.scala 79:45]
    reg c_9 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_18 = add(c_9, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_19 = tail(_c_T_18, 1) @[GTimer.scala 25:12]
    c_9 <= _c_T_19 @[GTimer.scala 25:7]
    wire enableDisplay_8 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_8 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_140 = and(_T_135, enableDisplay_8) @[Debug.scala 55:16]
    when _T_140 : @[Debug.scala 55:31]
      node _T_141 = asUInt(reset) @[Debug.scala 56:24]
      node _T_142 = eq(_T_141, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_142 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_9) : printf_20 @[Debug.scala 56:24]
      node _T_143 = asUInt(reset) @[Debug.scala 57:13]
      node _T_144 = eq(_T_143, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_144 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTW] cnt %x addr %x data %x cmd %x size %x wmask %x tag %x idx %x waymask %b \n", writeBeatCnt_value, io.mem.req.bits.addr, io.mem.req.bits.wdata, io.mem.req.bits.cmd, io.mem.req.bits.size, io.mem.req.bits.wmask, addr.tag, _WIRE_2.index, io.in.bits.waymask) : printf_21 @[Debug.scala 57:13]
    node _T_145 = eq(state, UInt<4>("h1")) @[Cache.scala 782:12]
    node _T_146 = and(io.mem.req.ready, io.mem.req.valid) @[Decoupled.scala 51:35]
    node _T_147 = and(_T_145, _T_146) @[Cache.scala 782:30]
    wire _WIRE_4 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_5 : UInt<32> @[Cache.scala 79:45]
    _WIRE_5 <= io.in.bits.req.addr @[Cache.scala 79:45]
    node _T_148 = bits(_WIRE_5, 2, 0) @[Cache.scala 79:45]
    _WIRE_4.byteOffset <= _T_148 @[Cache.scala 79:45]
    node _T_149 = bits(_WIRE_5, 5, 3) @[Cache.scala 79:45]
    _WIRE_4.wordIndex <= _T_149 @[Cache.scala 79:45]
    node _T_150 = bits(_WIRE_5, 12, 6) @[Cache.scala 79:45]
    _WIRE_4.index <= _T_150 @[Cache.scala 79:45]
    node _T_151 = bits(_WIRE_5, 31, 13) @[Cache.scala 79:45]
    _WIRE_4.tag <= _T_151 @[Cache.scala 79:45]
    reg c_10 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_20 = add(c_10, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_21 = tail(_c_T_20, 1) @[GTimer.scala 25:12]
    c_10 <= _c_T_21 @[GTimer.scala 25:7]
    wire enableDisplay_9 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_9 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_152 = and(_T_147, enableDisplay_9) @[Debug.scala 55:16]
    when _T_152 : @[Debug.scala 55:31]
      node _T_153 = asUInt(reset) @[Debug.scala 56:24]
      node _T_154 = eq(_T_153, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_154 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_10) : printf_22 @[Debug.scala 56:24]
      node _T_155 = asUInt(reset) @[Debug.scala 57:13]
      node _T_156 = eq(_T_155, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_156 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTR] addr %x tag %x idx %x waymask %b \n", io.mem.req.bits.addr, addr.tag, _WIRE_4.index, io.in.bits.waymask) : printf_23 @[Debug.scala 57:13]
    node _T_157 = eq(state, UInt<4>("h2")) @[Cache.scala 790:12]
    node _T_158 = and(io.mem.resp.ready, io.mem.resp.valid) @[Decoupled.scala 51:35]
    node _T_159 = and(_T_157, _T_158) @[Cache.scala 790:31]
    wire _WIRE_6 : { tag : UInt<19>, index : UInt<7>, wordIndex : UInt<3>, byteOffset : UInt<3>} @[Cache.scala 79:45]
    wire _WIRE_7 : UInt<32> @[Cache.scala 79:45]
    _WIRE_7 <= io.in.bits.req.addr @[Cache.scala 79:45]
    node _T_160 = bits(_WIRE_7, 2, 0) @[Cache.scala 79:45]
    _WIRE_6.byteOffset <= _T_160 @[Cache.scala 79:45]
    node _T_161 = bits(_WIRE_7, 5, 3) @[Cache.scala 79:45]
    _WIRE_6.wordIndex <= _T_161 @[Cache.scala 79:45]
    node _T_162 = bits(_WIRE_7, 12, 6) @[Cache.scala 79:45]
    _WIRE_6.index <= _T_162 @[Cache.scala 79:45]
    node _T_163 = bits(_WIRE_7, 31, 13) @[Cache.scala 79:45]
    _WIRE_6.tag <= _T_163 @[Cache.scala 79:45]
    reg c_11 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_22 = add(c_11, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_23 = tail(_c_T_22, 1) @[GTimer.scala 25:12]
    c_11 <= _c_T_23 @[GTimer.scala 25:7]
    wire enableDisplay_10 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_10 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_164 = and(_T_159, enableDisplay_10) @[Debug.scala 55:16]
    when _T_164 : @[Debug.scala 55:31]
      node _T_165 = asUInt(reset) @[Debug.scala 56:24]
      node _T_166 = eq(_T_165, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_166 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] CacheStage3: ", c_11) : printf_24 @[Debug.scala 56:24]
      node _T_167 = asUInt(reset) @[Debug.scala 57:13]
      node _T_168 = eq(_T_167, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_168 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "[COUTR] cnt %x data %x tag %x idx %x waymask %b \n", readBeatCnt_value, io.mem.resp.bits.rdata, addr.tag, _WIRE_6.index, io.in.bits.waymask) : printf_25 @[Debug.scala 57:13]


  module SRAMTemplate :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}

    smem array : UInt<21>[4] [128] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1> @[SRAMTemplate.scala 77:41]
    resetState <= UInt<1>("h0") @[SRAMTemplate.scala 77:41]
    wire resetSet : UInt @[SRAMTemplate.scala 77:60]
    resetSet <= UInt<1>("h0") @[SRAMTemplate.scala 77:60]
    reg _resetState : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SRAMTemplate.scala 80:30]
    reg _resetSet : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 61:40]
    wire resetFinish : UInt<1> @[Counter.scala 117:24]
    resetFinish <= UInt<1>("h0") @[Counter.scala 117:24]
    when _resetState : @[Counter.scala 118:16]
      node wrap_wrap = eq(_resetSet, UInt<7>("h7f")) @[Counter.scala 73:24]
      node _wrap_value_T = add(_resetSet, UInt<1>("h1")) @[Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 77:24]
      _resetSet <= _wrap_value_T_1 @[Counter.scala 77:15]
      resetFinish <= wrap_wrap @[Counter.scala 118:23]
    when resetFinish : @[SRAMTemplate.scala 82:24]
      _resetState <= UInt<1>("h0") @[SRAMTemplate.scala 82:38]
    resetState <= _resetState @[SRAMTemplate.scala 84:16]
    resetSet <= _resetSet @[SRAMTemplate.scala 85:14]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _realRen_T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _realRen_T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _wdataword_WIRE : UInt<21> @[SRAMTemplate.scala 92:47]
    _wdataword_WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node wdataword_hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data.valid) @[SRAMTemplate.scala 92:78]
    node _wdataword_T = cat(wdataword_hi, io.w.req.bits.data.dirty) @[SRAMTemplate.scala 92:78]
    node wdataword = mux(resetState, _wdataword_WIRE, _wdataword_T) @[SRAMTemplate.scala 92:22]
    node _waymask_T = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node waymask = mux(resetState, _waymask_T, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<21>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_1 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_2 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_3 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_4 = or(setIdx, UInt<7>("h0"))
      node _T_5 = bits(_T_4, 6, 0)
      write mport MPORT = array[_T_5], clock
      when _T :
        MPORT[0] <= wdata[0]
      when _T_1 :
        MPORT[1] <= wdata[1]
      when _T_2 :
        MPORT[2] <= wdata[2]
      when _T_3 :
        MPORT[3] <= wdata[3]
    wire _rdata_WIRE : UInt @[SRAMTemplate.scala 98:31]
    _rdata_WIRE is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _rdata_WIRE <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _rdata_T = or(_rdata_WIRE, UInt<7>("h0")) @[SRAMTemplate.scala 98:31]
      node _rdata_T_1 = bits(_rdata_T, 6, 0) @[SRAMTemplate.scala 98:31]
      read mport rdata_MPORT = array[_rdata_T_1], clock @[SRAMTemplate.scala 98:31]
    wire rdata_0 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _rdata_WIRE_1 : UInt<21> @[SRAMTemplate.scala 98:78]
    _rdata_WIRE_1 <= rdata_MPORT[0] @[SRAMTemplate.scala 98:78]
    node _rdata_T_2 = bits(_rdata_WIRE_1, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.dirty <= _rdata_T_2 @[SRAMTemplate.scala 98:78]
    node _rdata_T_3 = bits(_rdata_WIRE_1, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_0.valid <= _rdata_T_3 @[SRAMTemplate.scala 98:78]
    node _rdata_T_4 = bits(_rdata_WIRE_1, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_0.tag <= _rdata_T_4 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _rdata_WIRE_2 : UInt<21> @[SRAMTemplate.scala 98:78]
    _rdata_WIRE_2 <= rdata_MPORT[1] @[SRAMTemplate.scala 98:78]
    node _rdata_T_5 = bits(_rdata_WIRE_2, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.dirty <= _rdata_T_5 @[SRAMTemplate.scala 98:78]
    node _rdata_T_6 = bits(_rdata_WIRE_2, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_1.valid <= _rdata_T_6 @[SRAMTemplate.scala 98:78]
    node _rdata_T_7 = bits(_rdata_WIRE_2, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_1.tag <= _rdata_T_7 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _rdata_WIRE_3 : UInt<21> @[SRAMTemplate.scala 98:78]
    _rdata_WIRE_3 <= rdata_MPORT[2] @[SRAMTemplate.scala 98:78]
    node _rdata_T_8 = bits(_rdata_WIRE_3, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.dirty <= _rdata_T_8 @[SRAMTemplate.scala 98:78]
    node _rdata_T_9 = bits(_rdata_WIRE_3, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_2.valid <= _rdata_T_9 @[SRAMTemplate.scala 98:78]
    node _rdata_T_10 = bits(_rdata_WIRE_3, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_2.tag <= _rdata_T_10 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>} @[SRAMTemplate.scala 98:78]
    wire _rdata_WIRE_4 : UInt<21> @[SRAMTemplate.scala 98:78]
    _rdata_WIRE_4 <= rdata_MPORT[3] @[SRAMTemplate.scala 98:78]
    node _rdata_T_11 = bits(_rdata_WIRE_4, 0, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.dirty <= _rdata_T_11 @[SRAMTemplate.scala 98:78]
    node _rdata_T_12 = bits(_rdata_WIRE_4, 1, 1) @[SRAMTemplate.scala 98:78]
    rdata_3.valid <= _rdata_T_12 @[SRAMTemplate.scala 98:78]
    node _rdata_T_13 = bits(_rdata_WIRE_4, 20, 2) @[SRAMTemplate.scala 98:78]
    rdata_3.tag <= _rdata_T_13 @[SRAMTemplate.scala 98:78]
    wire _WIRE : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[SRAMTemplate.scala 99:28]
    _WIRE[0] <= rdata_0 @[SRAMTemplate.scala 99:28]
    _WIRE[1] <= rdata_1 @[SRAMTemplate.scala 99:28]
    _WIRE[2] <= rdata_2 @[SRAMTemplate.scala 99:28]
    _WIRE[3] <= rdata_3 @[SRAMTemplate.scala 99:28]
    io.r.resp.data <= _WIRE @[SRAMTemplate.scala 99:18]
    node _io_r_req_ready_T = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _io_r_req_ready_T_1 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _io_r_req_ready_T_2 = and(_io_r_req_ready_T, _io_r_req_ready_T_1) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _io_r_req_ready_T_2 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module Arbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, chosen : UInt<0>}

    io.chosen <= UInt<1>("h0") @[Arbiter.scala 135:13]
    io.out.bits <= io.in[0].bits @[Arbiter.scala 136:15]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 146:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 146:14]
    node _io_out_valid_T = eq(UInt<1>("h1"), UInt<1>("h0")) @[Arbiter.scala 147:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[0].valid) @[Arbiter.scala 147:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 147:16]

  module SRAMTemplateWithArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>}}, flip resp : { data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4]}}[1], flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<7>, data : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}, waymask : UInt<4>}}}}

    inst ram of SRAMTemplate @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w <= io.w @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_2 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0] <= io.r[0].req @[SRAMTemplate.scala 125:17]
    ram.io.r.req <= readArb.io.out @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 51:35]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAMTemplate.scala 130:58]
    REG <= _T @[SRAMTemplate.scala 130:58]
    wire _WIRE : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4] @[Hold.scala 23:81]
    _WIRE[0].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[0].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[0].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[1].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[1].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[1].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[2].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[2].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[2].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    _WIRE[3].dirty <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[3].valid <= UInt<1>("h0") @[Hold.scala 23:81]
    _WIRE[3].tag <= UInt<19>("h0") @[Hold.scala 23:81]
    reg r : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], clock with :
      reset => (reset, _WIRE) @[Reg.scala 35:20]
    when REG : @[Reg.scala 36:18]
      r <= ram.io.r.resp.data @[Reg.scala 36:22]
    node _T_1 = mux(REG, ram.io.r.resp.data, r) @[Hold.scala 23:48]
    io.r[0].resp.data <= _T_1 @[SRAMTemplate.scala 130:17]

  module SRAMTemplate_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    smem array : UInt<64>[4] [1024] @[SRAMTemplate.scala 76:26]
    wire resetState : UInt<1> @[SRAMTemplate.scala 77:41]
    resetState <= UInt<1>("h0") @[SRAMTemplate.scala 77:41]
    wire resetSet : UInt @[SRAMTemplate.scala 77:60]
    resetSet <= UInt<1>("h0") @[SRAMTemplate.scala 77:60]
    node wen = or(io.w.req.valid, resetState) @[SRAMTemplate.scala 88:52]
    node _realRen_T = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 89:41]
    node realRen = and(io.r.req.valid, _realRen_T) @[SRAMTemplate.scala 89:38]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[SRAMTemplate.scala 91:19]
    wire _wdataword_WIRE : UInt<64> @[SRAMTemplate.scala 92:47]
    _wdataword_WIRE <= UInt<1>("h0") @[SRAMTemplate.scala 92:47]
    node wdataword = mux(resetState, _wdataword_WIRE, io.w.req.bits.data.data) @[SRAMTemplate.scala 92:22]
    node _waymask_T = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node waymask = mux(resetState, _waymask_T, io.w.req.bits.waymask) @[SRAMTemplate.scala 93:20]
    wire wdata : UInt<64>[4] @[SRAMTemplate.scala 94:22]
    wdata[0] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[1] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[2] <= wdataword @[SRAMTemplate.scala 94:22]
    wdata[3] <= wdataword @[SRAMTemplate.scala 94:22]
    when wen : @[SRAMTemplate.scala 95:14]
      node _T = bits(waymask, 0, 0) @[SRAMTemplate.scala 95:51]
      node _T_1 = bits(waymask, 1, 1) @[SRAMTemplate.scala 95:51]
      node _T_2 = bits(waymask, 2, 2) @[SRAMTemplate.scala 95:51]
      node _T_3 = bits(waymask, 3, 3) @[SRAMTemplate.scala 95:51]
      node _T_4 = or(setIdx, UInt<10>("h0"))
      node _T_5 = bits(_T_4, 9, 0)
      write mport MPORT = array[_T_5], clock
      when _T :
        MPORT[0] <= wdata[0]
      when _T_1 :
        MPORT[1] <= wdata[1]
      when _T_2 :
        MPORT[2] <= wdata[2]
      when _T_3 :
        MPORT[3] <= wdata[3]
    wire _rdata_WIRE : UInt @[SRAMTemplate.scala 98:31]
    _rdata_WIRE is invalid @[SRAMTemplate.scala 98:31]
    when realRen : @[SRAMTemplate.scala 98:31]
      _rdata_WIRE <= io.r.req.bits.setIdx @[SRAMTemplate.scala 98:31]
      node _rdata_T = or(_rdata_WIRE, UInt<10>("h0")) @[SRAMTemplate.scala 98:31]
      node _rdata_T_1 = bits(_rdata_T, 9, 0) @[SRAMTemplate.scala 98:31]
      read mport rdata_MPORT = array[_rdata_T_1], clock @[SRAMTemplate.scala 98:31]
    wire rdata_0 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _rdata_WIRE_1 : UInt<64> @[SRAMTemplate.scala 98:78]
    _rdata_WIRE_1 <= rdata_MPORT[0] @[SRAMTemplate.scala 98:78]
    node _rdata_T_2 = bits(_rdata_WIRE_1, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_0.data <= _rdata_T_2 @[SRAMTemplate.scala 98:78]
    wire rdata_1 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _rdata_WIRE_2 : UInt<64> @[SRAMTemplate.scala 98:78]
    _rdata_WIRE_2 <= rdata_MPORT[1] @[SRAMTemplate.scala 98:78]
    node _rdata_T_3 = bits(_rdata_WIRE_2, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_1.data <= _rdata_T_3 @[SRAMTemplate.scala 98:78]
    wire rdata_2 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _rdata_WIRE_3 : UInt<64> @[SRAMTemplate.scala 98:78]
    _rdata_WIRE_3 <= rdata_MPORT[2] @[SRAMTemplate.scala 98:78]
    node _rdata_T_4 = bits(_rdata_WIRE_3, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_2.data <= _rdata_T_4 @[SRAMTemplate.scala 98:78]
    wire rdata_3 : { data : UInt<64>} @[SRAMTemplate.scala 98:78]
    wire _rdata_WIRE_4 : UInt<64> @[SRAMTemplate.scala 98:78]
    _rdata_WIRE_4 <= rdata_MPORT[3] @[SRAMTemplate.scala 98:78]
    node _rdata_T_5 = bits(_rdata_WIRE_4, 63, 0) @[SRAMTemplate.scala 98:78]
    rdata_3.data <= _rdata_T_5 @[SRAMTemplate.scala 98:78]
    wire _WIRE : { data : UInt<64>}[4] @[SRAMTemplate.scala 99:28]
    _WIRE[0] <= rdata_0 @[SRAMTemplate.scala 99:28]
    _WIRE[1] <= rdata_1 @[SRAMTemplate.scala 99:28]
    _WIRE[2] <= rdata_2 @[SRAMTemplate.scala 99:28]
    _WIRE[3] <= rdata_3 @[SRAMTemplate.scala 99:28]
    io.r.resp.data <= _WIRE @[SRAMTemplate.scala 99:18]
    node _io_r_req_ready_T = eq(resetState, UInt<1>("h0")) @[SRAMTemplate.scala 101:21]
    node _io_r_req_ready_T_1 = eq(wen, UInt<1>("h0")) @[SRAMTemplate.scala 101:53]
    node _io_r_req_ready_T_2 = and(_io_r_req_ready_T, _io_r_req_ready_T_1) @[SRAMTemplate.scala 101:33]
    io.r.req.ready <= _io_r_req_ready_T_2 @[SRAMTemplate.scala 101:18]
    io.w.req.ready <= UInt<1>("h1") @[SRAMTemplate.scala 102:18]

  module Arbiter_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 135:13]
    io.out.bits <= io.in[1].bits @[Arbiter.scala 136:15]
    when io.in[0].valid : @[Arbiter.scala 138:26]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 139:17]
      io.out.bits <= io.in[0].bits @[Arbiter.scala 140:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 146:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 146:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 146:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 146:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 147:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 147:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 147:16]

  module SRAMTemplateWithArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>}}, flip resp : { data : { data : UInt<64>}[4]}}[2], flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}}}

    inst ram of SRAMTemplate_1 @[SRAMTemplate.scala 121:19]
    ram.clock <= clock
    ram.reset <= reset
    ram.io.w <= io.w @[SRAMTemplate.scala 122:12]
    inst readArb of Arbiter_3 @[SRAMTemplate.scala 124:23]
    readArb.clock <= clock
    readArb.reset <= reset
    readArb.io.in[0] <= io.r[0].req @[SRAMTemplate.scala 125:17]
    readArb.io.in[1] <= io.r[1].req @[SRAMTemplate.scala 125:17]
    ram.io.r.req <= readArb.io.out @[SRAMTemplate.scala 126:16]
    node _T = and(io.r[0].req.ready, io.r[0].req.valid) @[Decoupled.scala 51:35]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAMTemplate.scala 130:58]
    REG <= _T @[SRAMTemplate.scala 130:58]
    wire _WIRE : { data : UInt<64>}[4] @[Hold.scala 23:81]
    _WIRE[0].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[1].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[2].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE[3].data <= UInt<64>("h0") @[Hold.scala 23:81]
    reg r : { data : UInt<64>}[4], clock with :
      reset => (reset, _WIRE) @[Reg.scala 35:20]
    when REG : @[Reg.scala 36:18]
      r <= ram.io.r.resp.data @[Reg.scala 36:22]
    node _T_1 = mux(REG, ram.io.r.resp.data, r) @[Hold.scala 23:48]
    io.r[0].resp.data <= _T_1 @[SRAMTemplate.scala 130:17]
    node _T_2 = and(io.r[1].req.ready, io.r[1].req.valid) @[Decoupled.scala 51:35]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[SRAMTemplate.scala 130:58]
    REG_1 <= _T_2 @[SRAMTemplate.scala 130:58]
    wire _WIRE_1 : { data : UInt<64>}[4] @[Hold.scala 23:81]
    _WIRE_1[0].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[1].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[2].data <= UInt<64>("h0") @[Hold.scala 23:81]
    _WIRE_1[3].data <= UInt<64>("h0") @[Hold.scala 23:81]
    reg r_1 : { data : UInt<64>}[4], clock with :
      reset => (reset, _WIRE_1) @[Reg.scala 35:20]
    when REG_1 : @[Reg.scala 36:18]
      r_1 <= ram.io.r.resp.data @[Reg.scala 36:22]
    node _T_3 = mux(REG_1, ram.io.r.resp.data, r_1) @[Hold.scala 23:48]
    io.r[1].resp.data <= _T_3 @[SRAMTemplate.scala 130:17]

  module Arbiter_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}}, chosen : UInt<1>}

    io.chosen <= UInt<1>("h1") @[Arbiter.scala 135:13]
    io.out.bits <= io.in[1].bits @[Arbiter.scala 136:15]
    when io.in[0].valid : @[Arbiter.scala 138:26]
      io.chosen <= UInt<1>("h0") @[Arbiter.scala 139:17]
      io.out.bits <= io.in[0].bits @[Arbiter.scala 140:19]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _io_in_0_ready_T = and(UInt<1>("h1"), io.out.ready) @[Arbiter.scala 146:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 146:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 146:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 146:14]
    node _io_out_valid_T = eq(grant_1, UInt<1>("h0")) @[Arbiter.scala 147:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[1].valid) @[Arbiter.scala 147:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 147:16]

  module Cache :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>, user : UInt<16>}}}, flip flush : UInt<2>, out : { mem : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, flip coh : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}}, mmio : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>}}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { cmd : UInt<4>, rdata : UInt<64>}}}, empty : UInt<1>}

    inst s1 of CacheStage1 @[Cache.scala 804:18]
    s1.clock <= clock
    s1.reset <= reset
    inst s2 of CacheStage2 @[Cache.scala 805:18]
    s2.clock <= clock
    s2.reset <= reset
    inst s3 of CacheStage3 @[Cache.scala 806:18]
    s3.clock <= clock
    s3.reset <= reset
    inst metaArray of SRAMTemplateWithArbiter @[Cache.scala 807:25]
    metaArray.clock <= clock
    metaArray.reset <= reset
    inst dataArray of SRAMTemplateWithArbiter_1 @[Cache.scala 816:25]
    dataArray.clock <= clock
    dataArray.reset <= reset
    inst arb of Arbiter_4 @[Cache.scala 832:19]
    arb.clock <= clock
    arb.reset <= reset
    arb.io.in[1] <= io.in.req @[Cache.scala 838:28]
    s1.io.in <= arb.io.out @[Cache.scala 840:12]
    node _T = and(s2.io.out.ready, s2.io.out.valid) @[Decoupled.scala 51:35]
    node _T_1 = bits(io.flush, 0, 0) @[Cache.scala 846:64]
    reg valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when _T : @[Pipeline.scala 25:25]
      valid <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_2 = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 26:22]
    when _T_2 : @[Pipeline.scala 26:38]
      valid <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_1 : @[Pipeline.scala 27:20]
      valid <= UInt<1>("h0") @[Pipeline.scala 27:28]
    s1.io.out.ready <= s2.io.in.ready @[Pipeline.scala 29:16]
    node _s2_io_in_bits_T = and(s1.io.out.valid, s2.io.in.ready) @[Pipeline.scala 30:51]
    reg s2_io_in_bits_r : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}}, clock with :
      reset => (UInt<1>("h0"), s2_io_in_bits_r) @[Reg.scala 19:16]
    when _s2_io_in_bits_T : @[Reg.scala 20:18]
      s2_io_in_bits_r <= s1.io.out.bits @[Reg.scala 20:22]
    s2.io.in.bits.req.user <= s2_io_in_bits_r.req.user @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wdata <= s2_io_in_bits_r.req.wdata @[Pipeline.scala 30:16]
    s2.io.in.bits.req.wmask <= s2_io_in_bits_r.req.wmask @[Pipeline.scala 30:16]
    s2.io.in.bits.req.cmd <= s2_io_in_bits_r.req.cmd @[Pipeline.scala 30:16]
    s2.io.in.bits.req.size <= s2_io_in_bits_r.req.size @[Pipeline.scala 30:16]
    s2.io.in.bits.req.addr <= s2_io_in_bits_r.req.addr @[Pipeline.scala 30:16]
    s2.io.in.valid <= valid @[Pipeline.scala 31:17]
    node _T_3 = bits(io.flush, 1, 1) @[Cache.scala 847:64]
    reg valid_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pipeline.scala 24:24]
    when s3.io.isFinish : @[Pipeline.scala 25:25]
      valid_1 <= UInt<1>("h0") @[Pipeline.scala 25:33]
    node _T_4 = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 26:22]
    when _T_4 : @[Pipeline.scala 26:38]
      valid_1 <= UInt<1>("h1") @[Pipeline.scala 26:46]
    when _T_3 : @[Pipeline.scala 27:20]
      valid_1 <= UInt<1>("h0") @[Pipeline.scala 27:28]
    s2.io.out.ready <= s3.io.in.ready @[Pipeline.scala 29:16]
    node _s3_io_in_bits_T = and(s2.io.out.valid, s3.io.in.ready) @[Pipeline.scala 30:51]
    reg s3_io_in_bits_r : { req : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>}, metas : { tag : UInt<19>, valid : UInt<1>, dirty : UInt<1>}[4], datas : { data : UInt<64>}[4], hit : UInt<1>, waymask : UInt<4>, mmio : UInt<1>, isForwardData : UInt<1>, forwardData : { setIdx : UInt<10>, data : { data : UInt<64>}, waymask : UInt<4>}}, clock with :
      reset => (UInt<1>("h0"), s3_io_in_bits_r) @[Reg.scala 19:16]
    when _s3_io_in_bits_T : @[Reg.scala 20:18]
      s3_io_in_bits_r <= s2.io.out.bits @[Reg.scala 20:22]
    s3.io.in.bits.forwardData.waymask <= s3_io_in_bits_r.forwardData.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.data.data <= s3_io_in_bits_r.forwardData.data.data @[Pipeline.scala 30:16]
    s3.io.in.bits.forwardData.setIdx <= s3_io_in_bits_r.forwardData.setIdx @[Pipeline.scala 30:16]
    s3.io.in.bits.isForwardData <= s3_io_in_bits_r.isForwardData @[Pipeline.scala 30:16]
    s3.io.in.bits.mmio <= s3_io_in_bits_r.mmio @[Pipeline.scala 30:16]
    s3.io.in.bits.waymask <= s3_io_in_bits_r.waymask @[Pipeline.scala 30:16]
    s3.io.in.bits.hit <= s3_io_in_bits_r.hit @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[0].data <= s3_io_in_bits_r.datas[0].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[1].data <= s3_io_in_bits_r.datas[1].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[2].data <= s3_io_in_bits_r.datas[2].data @[Pipeline.scala 30:16]
    s3.io.in.bits.datas[3].data <= s3_io_in_bits_r.datas[3].data @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].dirty <= s3_io_in_bits_r.metas[0].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].valid <= s3_io_in_bits_r.metas[0].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[0].tag <= s3_io_in_bits_r.metas[0].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].dirty <= s3_io_in_bits_r.metas[1].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].valid <= s3_io_in_bits_r.metas[1].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[1].tag <= s3_io_in_bits_r.metas[1].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].dirty <= s3_io_in_bits_r.metas[2].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].valid <= s3_io_in_bits_r.metas[2].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[2].tag <= s3_io_in_bits_r.metas[2].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].dirty <= s3_io_in_bits_r.metas[3].dirty @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].valid <= s3_io_in_bits_r.metas[3].valid @[Pipeline.scala 30:16]
    s3.io.in.bits.metas[3].tag <= s3_io_in_bits_r.metas[3].tag @[Pipeline.scala 30:16]
    s3.io.in.bits.req.user <= s3_io_in_bits_r.req.user @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wdata <= s3_io_in_bits_r.req.wdata @[Pipeline.scala 30:16]
    s3.io.in.bits.req.wmask <= s3_io_in_bits_r.req.wmask @[Pipeline.scala 30:16]
    s3.io.in.bits.req.cmd <= s3_io_in_bits_r.req.cmd @[Pipeline.scala 30:16]
    s3.io.in.bits.req.size <= s3_io_in_bits_r.req.size @[Pipeline.scala 30:16]
    s3.io.in.bits.req.addr <= s3_io_in_bits_r.req.addr @[Pipeline.scala 30:16]
    s3.io.in.valid <= valid_1 @[Pipeline.scala 31:17]
    io.in.resp.bits <= s3.io.out.bits @[Cache.scala 848:14]
    io.in.resp.valid <= s3.io.out.valid @[Cache.scala 848:14]
    s3.io.out.ready <= io.in.resp.ready @[Cache.scala 848:14]
    node _s3_io_flush_T = bits(io.flush, 1, 1) @[Cache.scala 849:26]
    s3.io.flush <= _s3_io_flush_T @[Cache.scala 849:15]
    s3.io.mem.resp <= io.out.mem.resp @[Cache.scala 850:14]
    io.out.mem.req.bits <= s3.io.mem.req.bits @[Cache.scala 850:14]
    io.out.mem.req.valid <= s3.io.mem.req.valid @[Cache.scala 850:14]
    s3.io.mem.req.ready <= io.out.mem.req.ready @[Cache.scala 850:14]
    s3.io.mmio.resp <= io.mmio.resp @[Cache.scala 851:11]
    io.mmio.req.bits <= s3.io.mmio.req.bits @[Cache.scala 851:11]
    io.mmio.req.valid <= s3.io.mmio.req.valid @[Cache.scala 851:11]
    s3.io.mmio.req.ready <= io.mmio.req.ready @[Cache.scala 851:11]
    node _io_empty_T = eq(s2.io.in.valid, UInt<1>("h0")) @[Cache.scala 852:15]
    node _io_empty_T_1 = eq(s3.io.in.valid, UInt<1>("h0")) @[Cache.scala 852:34]
    node _io_empty_T_2 = and(_io_empty_T, _io_empty_T_1) @[Cache.scala 852:31]
    io.empty <= _io_empty_T_2 @[Cache.scala 852:12]
    node _io_in_resp_valid_T = eq(s3.io.out.bits.cmd, UInt<3>("h4")) @[SimpleBus.scala 95:24]
    node _io_in_resp_valid_T_1 = and(s3.io.out.valid, _io_in_resp_valid_T) @[Cache.scala 855:21]
    node _io_in_resp_valid_T_2 = or(s3.io.out.valid, s3.io.dataReadRespToL1) @[Cache.scala 857:21]
    node _io_in_resp_valid_T_3 = mux(_io_in_resp_valid_T_1, UInt<1>("h0"), _io_in_resp_valid_T_2) @[Cache.scala 854:26]
    io.in.resp.valid <= _io_in_resp_valid_T_3 @[Cache.scala 854:20]
    wire coh : { addr : UInt<32>, size : UInt<3>, cmd : UInt<4>, wmask : UInt<8>, wdata : UInt<64>, user : UInt<16>} @[Cache.scala 863:19]
    coh.addr <= io.out.coh.req.bits.addr @[SimpleBus.scala 64:15]
    coh.cmd <= io.out.coh.req.bits.cmd @[SimpleBus.scala 65:14]
    coh.size <= io.out.coh.req.bits.size @[SimpleBus.scala 66:15]
    coh.wdata <= io.out.coh.req.bits.wdata @[SimpleBus.scala 67:16]
    coh.wmask <= io.out.coh.req.bits.wmask @[SimpleBus.scala 68:16]
    coh.user <= UInt<1>("h0") @[SimpleBus.scala 69:21]
    arb.io.in[0].bits.user <= coh.user @[Cache.scala 871:23]
    arb.io.in[0].bits.wdata <= coh.wdata @[Cache.scala 871:23]
    arb.io.in[0].bits.wmask <= coh.wmask @[Cache.scala 871:23]
    arb.io.in[0].bits.cmd <= coh.cmd @[Cache.scala 871:23]
    arb.io.in[0].bits.size <= coh.size @[Cache.scala 871:23]
    arb.io.in[0].bits.addr <= coh.addr @[Cache.scala 871:23]
    arb.io.in[0].valid <= io.out.coh.req.valid @[Cache.scala 872:24]
    io.out.coh.req.ready <= arb.io.in[0].ready @[Cache.scala 873:26]
    io.out.coh.resp.bits <= s3.io.cohResp.bits @[Cache.scala 874:21]
    io.out.coh.resp.valid <= s3.io.cohResp.valid @[Cache.scala 874:21]
    s3.io.cohResp.ready <= io.out.coh.resp.ready @[Cache.scala 874:21]
    metaArray.io.r[0] <= s1.io.metaReadBus @[Cache.scala 882:21]
    dataArray.io.r[0] <= s1.io.dataReadBus @[Cache.scala 883:21]
    dataArray.io.r[1] <= s3.io.dataReadBus @[Cache.scala 884:21]
    metaArray.io.w <= s3.io.metaWriteBus @[Cache.scala 886:18]
    dataArray.io.w <= s3.io.dataWriteBus @[Cache.scala 887:18]
    s2.io.metaReadResp[0].dirty <= s1.io.metaReadBus.resp.data[0].dirty @[Cache.scala 889:22]
    s2.io.metaReadResp[0].valid <= s1.io.metaReadBus.resp.data[0].valid @[Cache.scala 889:22]
    s2.io.metaReadResp[0].tag <= s1.io.metaReadBus.resp.data[0].tag @[Cache.scala 889:22]
    s2.io.metaReadResp[1].dirty <= s1.io.metaReadBus.resp.data[1].dirty @[Cache.scala 889:22]
    s2.io.metaReadResp[1].valid <= s1.io.metaReadBus.resp.data[1].valid @[Cache.scala 889:22]
    s2.io.metaReadResp[1].tag <= s1.io.metaReadBus.resp.data[1].tag @[Cache.scala 889:22]
    s2.io.metaReadResp[2].dirty <= s1.io.metaReadBus.resp.data[2].dirty @[Cache.scala 889:22]
    s2.io.metaReadResp[2].valid <= s1.io.metaReadBus.resp.data[2].valid @[Cache.scala 889:22]
    s2.io.metaReadResp[2].tag <= s1.io.metaReadBus.resp.data[2].tag @[Cache.scala 889:22]
    s2.io.metaReadResp[3].dirty <= s1.io.metaReadBus.resp.data[3].dirty @[Cache.scala 889:22]
    s2.io.metaReadResp[3].valid <= s1.io.metaReadBus.resp.data[3].valid @[Cache.scala 889:22]
    s2.io.metaReadResp[3].tag <= s1.io.metaReadBus.resp.data[3].tag @[Cache.scala 889:22]
    s2.io.dataReadResp[0].data <= s1.io.dataReadBus.resp.data[0].data @[Cache.scala 890:22]
    s2.io.dataReadResp[1].data <= s1.io.dataReadBus.resp.data[1].data @[Cache.scala 890:22]
    s2.io.dataReadResp[2].data <= s1.io.dataReadBus.resp.data[2].data @[Cache.scala 890:22]
    s2.io.dataReadResp[3].data <= s1.io.dataReadBus.resp.data[3].data @[Cache.scala 890:22]
    s2.io.dataWriteBus.req.bits.waymask <= s3.io.dataWriteBus.req.bits.waymask @[Cache.scala 891:22]
    s2.io.dataWriteBus.req.bits.data.data <= s3.io.dataWriteBus.req.bits.data.data @[Cache.scala 891:22]
    s2.io.dataWriteBus.req.bits.setIdx <= s3.io.dataWriteBus.req.bits.setIdx @[Cache.scala 891:22]
    s2.io.dataWriteBus.req.valid <= s3.io.dataWriteBus.req.valid @[Cache.scala 891:22]
    s2.io.dataWriteBus.req.ready <= s3.io.dataWriteBus.req.ready @[Cache.scala 891:22]
    s2.io.metaWriteBus.req.bits.waymask <= s3.io.metaWriteBus.req.bits.waymask @[Cache.scala 892:22]
    s2.io.metaWriteBus.req.bits.data.dirty <= s3.io.metaWriteBus.req.bits.data.dirty @[Cache.scala 892:22]
    s2.io.metaWriteBus.req.bits.data.valid <= s3.io.metaWriteBus.req.bits.data.valid @[Cache.scala 892:22]
    s2.io.metaWriteBus.req.bits.data.tag <= s3.io.metaWriteBus.req.bits.data.tag @[Cache.scala 892:22]
    s2.io.metaWriteBus.req.bits.setIdx <= s3.io.metaWriteBus.req.bits.setIdx @[Cache.scala 892:22]
    s2.io.metaWriteBus.req.valid <= s3.io.metaWriteBus.req.valid @[Cache.scala 892:22]
    s2.io.metaWriteBus.req.ready <= s3.io.metaWriteBus.req.ready @[Cache.scala 892:22]
    reg c : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T = add(c, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_1 = tail(_c_T, 1) @[GTimer.scala 25:12]
    c <= _c_T_1 @[GTimer.scala 25:7]
    wire enableDisplay : UInt<1> @[Debug.scala 40:33]
    enableDisplay <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_5 = and(UInt<1>("h1"), enableDisplay) @[Debug.scala 55:16]
    when _T_5 : @[Debug.scala 55:31]
      node _T_6 = bits(reset, 0, 0) @[Debug.scala 56:24]
      node _T_7 = eq(_T_6, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_7 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Cache: ", c) : printf @[Debug.scala 56:24]
      node _T_8 = bits(reset, 0, 0) @[Debug.scala 57:13]
      node _T_9 = eq(_T_8, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_9 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "InReq(%d, %d) InResp(%d, %d) \n", io.in.req.valid, io.in.req.ready, io.in.resp.valid, io.in.resp.ready) : printf_1 @[Debug.scala 57:13]
    reg c_1 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
    node _c_T_2 = add(c_1, UInt<1>("h1")) @[GTimer.scala 25:12]
    node _c_T_3 = tail(_c_T_2, 1) @[GTimer.scala 25:12]
    c_1 <= _c_T_3 @[GTimer.scala 25:7]
    wire enableDisplay_1 : UInt<1> @[Debug.scala 40:33]
    enableDisplay_1 <= UInt<1>("h0") @[Debug.scala 40:33]
    node _T_10 = and(UInt<1>("h1"), enableDisplay_1) @[Debug.scala 55:16]
    when _T_10 : @[Debug.scala 55:31]
      node _T_11 = bits(reset, 0, 0) @[Debug.scala 56:24]
      node _T_12 = eq(_T_11, UInt<1>("h0")) @[Debug.scala 56:24]
      when _T_12 : @[Debug.scala 56:24]
        printf(clock, UInt<1>("h1"), "[%d] Cache: ", c_1) : printf_2 @[Debug.scala 56:24]
      node _T_13 = bits(reset, 0, 0) @[Debug.scala 57:13]
      node _T_14 = eq(_T_13, UInt<1>("h0")) @[Debug.scala 57:13]
      when _T_14 : @[Debug.scala 57:13]
        printf(clock, UInt<1>("h1"), "{IN s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)} {OUT s1:(%d,%d), s2:(%d,%d), s3:(%d,%d)}\n", s1.io.in.valid, s1.io.in.ready, s2.io.in.valid, s2.io.in.ready, s3.io.in.valid, s3.io.in.ready, s1.io.out.valid, s1.io.out.ready, s2.io.out.valid, s2.io.out.ready, s3.io.out.valid, s3.io.out.ready) : printf_3 @[Debug.scala 57:13]
    when s1.io.in.valid : @[Cache.scala 928:24]
      reg c_2 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_4 = add(c_2, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_5 = tail(_c_T_4, 1) @[GTimer.scala 25:12]
      c_2 <= _c_T_5 @[GTimer.scala 25:7]
      wire enableDisplay_2 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_2 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_15 = and(UInt<1>("h1"), enableDisplay_2) @[Debug.scala 55:16]
      when _T_15 : @[Debug.scala 55:31]
        node _T_16 = bits(reset, 0, 0) @[Debug.scala 56:24]
        node _T_17 = eq(_T_16, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_17 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache: ", c_2) : printf_4 @[Debug.scala 56:24]
        node _T_18 = bits(reset, 0, 0) @[Debug.scala 57:13]
        node _T_19 = eq(_T_18, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_19 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[tcache.S1]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s1.io.in.bits.addr, s1.io.in.bits.cmd, s1.io.in.bits.size, s1.io.in.bits.wmask, s1.io.in.bits.wdata) : printf_5 @[Debug.scala 57:13]
    when s2.io.in.valid : @[Cache.scala 929:24]
      reg c_3 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_6 = add(c_3, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_7 = tail(_c_T_6, 1) @[GTimer.scala 25:12]
      c_3 <= _c_T_7 @[GTimer.scala 25:7]
      wire enableDisplay_3 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_3 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_20 = and(UInt<1>("h1"), enableDisplay_3) @[Debug.scala 55:16]
      when _T_20 : @[Debug.scala 55:31]
        node _T_21 = bits(reset, 0, 0) @[Debug.scala 56:24]
        node _T_22 = eq(_T_21, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_22 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache: ", c_3) : printf_6 @[Debug.scala 56:24]
        node _T_23 = bits(reset, 0, 0) @[Debug.scala 57:13]
        node _T_24 = eq(_T_23, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_24 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[tcache.S2]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s2.io.in.bits.req.addr, s2.io.in.bits.req.cmd, s2.io.in.bits.req.size, s2.io.in.bits.req.wmask, s2.io.in.bits.req.wdata) : printf_7 @[Debug.scala 57:13]
    when s3.io.in.valid : @[Cache.scala 930:24]
      reg c_4 : UInt<64>, clock with :
        reset => (reset, UInt<64>("h0")) @[GTimer.scala 24:20]
      node _c_T_8 = add(c_4, UInt<1>("h1")) @[GTimer.scala 25:12]
      node _c_T_9 = tail(_c_T_8, 1) @[GTimer.scala 25:12]
      c_4 <= _c_T_9 @[GTimer.scala 25:7]
      wire enableDisplay_4 : UInt<1> @[Debug.scala 40:33]
      enableDisplay_4 <= UInt<1>("h0") @[Debug.scala 40:33]
      node _T_25 = and(UInt<1>("h1"), enableDisplay_4) @[Debug.scala 55:16]
      when _T_25 : @[Debug.scala 55:31]
        node _T_26 = bits(reset, 0, 0) @[Debug.scala 56:24]
        node _T_27 = eq(_T_26, UInt<1>("h0")) @[Debug.scala 56:24]
        when _T_27 : @[Debug.scala 56:24]
          printf(clock, UInt<1>("h1"), "[%d] Cache: ", c_4) : printf_8 @[Debug.scala 56:24]
        node _T_28 = bits(reset, 0, 0) @[Debug.scala 57:13]
        node _T_29 = eq(_T_28, UInt<1>("h0")) @[Debug.scala 57:13]
        when _T_29 : @[Debug.scala 57:13]
          printf(clock, UInt<1>("h1"), "[tcache.S3]: addr = 0x%x, cmd = %d, size = %d, wmask = 0x%x, wdata = 0x%x\n", s3.io.in.bits.req.addr, s3.io.in.bits.req.cmd, s3.io.in.bits.req.size, s3.io.in.bits.req.wmask, s3.io.in.bits.req.wdata) : printf_9 @[Debug.scala 57:13]


