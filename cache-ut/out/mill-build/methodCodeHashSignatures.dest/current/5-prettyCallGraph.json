{
    "call coursier.maven.MavenRepository$#apply(java.lang.String)coursier.maven.MavenRepository": [
        "external coursier.maven.MavenRepository$",
        "external java.lang.String"
    ],
    "call coursier.maven.MavenRepository$.<clinit>()void": [],
    "call java.lang.Object!<init>()void": [
        "external java.lang.Object"
    ],
    "call java.lang.Object.<clinit>()void": [],
    "call java.lang.String.<clinit>()void": [],
    "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig": [
        "external mainargs.arg",
        "external mainargs.TokensReader",
        "external scala.Option",
        "external mainargs.ArgSig$",
        "external java.lang.String"
    ],
    "call mainargs.ArgSig$.<clinit>()void": [],
    "call mainargs.Flag.<clinit>()void": [],
    "call mainargs.Leftover#value()scala.collection.immutable.Seq": [
        "external mainargs.Leftover"
    ],
    "call mainargs.Leftover.<clinit>()void": [],
    "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData": [
        "external mainargs.main",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external scala.Function2",
        "external mainargs.MainData$"
    ],
    "call mainargs.MainData$.<clinit>()void": [],
    "call mainargs.MainData.<clinit>()void": [],
    "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover": [
        "external mainargs.TokensReader$Simple",
        "external mainargs.TokensReader$"
    ],
    "call mainargs.TokensReader$.<clinit>()void": [],
    "call mainargs.TokensReader$BooleanRead$.<clinit>()void": [],
    "call mainargs.TokensReader$FlagRead$.<clinit>()void": [],
    "call mainargs.TokensReader$StringRead$.<clinit>()void": [],
    "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void": [
        "external mainargs.arg",
        "external java.lang.String"
    ],
    "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String": [
        "external mainargs.arg$"
    ],
    "call mainargs.arg$#$lessinit$greater$default$2()char": [
        "external mainargs.arg$"
    ],
    "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String": [
        "external mainargs.arg$"
    ],
    "call mainargs.arg$#$lessinit$greater$default$4()boolean": [
        "external mainargs.arg$"
    ],
    "call mainargs.arg$#$lessinit$greater$default$5()boolean": [
        "external mainargs.arg$"
    ],
    "call mainargs.arg$#$lessinit$greater$default$6()boolean": [
        "external mainargs.arg$"
    ],
    "call mainargs.arg$.<clinit>()void": [],
    "call mainargs.arg.<clinit>()void": [],
    "call mainargs.main!<init>(java.lang.String,java.lang.String)void": [
        "external mainargs.main",
        "external java.lang.String"
    ],
    "call mainargs.main$#$lessinit$greater$default$1()java.lang.String": [
        "external mainargs.main$"
    ],
    "call mainargs.main$#$lessinit$greater$default$2()java.lang.String": [
        "external mainargs.main$"
    ],
    "call mainargs.main$.<clinit>()void": [],
    "call mainargs.main.<clinit>()void": [],
    "call mill.api.AggWrapper$Agg$#apply(scala.collection.immutable.Seq)java.lang.Object": [
        "external mill.api.AggWrapper$Agg$",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.api.AggWrapper$Agg$#jsonFormat(upickle.core.Types$ReadWriter)upickle.core.Types$ReadWriter": [
        "external mill.api.AggWrapper$Agg$",
        "external upickle.core.Types$ReadWriter"
    ],
    "call mill.api.AggWrapper$Agg$.<clinit>()void": [],
    "call mill.api.AggWrapper$Agg.<clinit>()void": [],
    "call mill.api.Loose$#Agg()mill.api.AggWrapper$Agg$": [
        "external mill.api.AggWrapper"
    ],
    "call mill.api.Loose$.<clinit>()void": [],
    "call mill.api.Result$#create(scala.Function0)mill.api.Result": [
        "external mill.api.Result$",
        "external scala.Function0"
    ],
    "call mill.api.Result$.<clinit>()void": [],
    "call mill.define.Caller!<init>(java.lang.Object)void": [
        "external mill.define.Caller",
        "external java.lang.Object"
    ],
    "call mill.define.Caller.<clinit>()void": [],
    "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx": [
        "external sourcecode.Enclosing",
        "external mill.define.Ctx$BasePath",
        "external mill.define.Ctx$External",
        "external sourcecode.Line",
        "external mill.define.Caller",
        "external sourcecode.File",
        "external mill.define.Ctx$Foreign",
        "external mill.define.Segments",
        "external mill.define.Ctx$"
    ],
    "call mill.define.Ctx$.<clinit>()void": [],
    "call mill.define.Discover$#apply2(scala.collection.immutable.Map)mill.define.Discover": [
        "external scala.collection.immutable.Map",
        "external mill.define.Discover$"
    ],
    "call mill.define.Discover$.<clinit>()void": [],
    "call mill.define.Module$BaseClass!<init>(mill.define.Ctx)void": [
        "external mill.define.Ctx",
        "external mill.define.Module$BaseClass"
    ],
    "call mill.define.Module$BaseClass.<clinit>()void": [],
    "call mill.define.Module$millInternal$!<init>(mill.define.Module)void": [
        "external mill.define.Module",
        "external mill.define.Module$millInternal$"
    ],
    "call mill.define.Module$millInternal$.<clinit>()void": [],
    "call mill.define.Module.$init$(mill.define.Module)void": [
        "external mill.define.Module"
    ],
    "call mill.define.Module.<clinit>()void": [],
    "call mill.define.Module.mill$define$Module$$millModuleDirectChildrenImpl$(mill.define.Module)scala.collection.immutable.Seq": [
        "external mill.define.Module"
    ],
    "call mill.define.Module.millModuleBasePath$(mill.define.Module)mill.define.Ctx$BasePath": [
        "external mill.define.Module"
    ],
    "call mill.define.Module.millModuleDirectChildren$(mill.define.Module)scala.collection.immutable.Seq": [
        "external mill.define.Module"
    ],
    "call mill.define.Module.millModuleExternal$(mill.define.Module)mill.define.Ctx$External": [
        "external mill.define.Module"
    ],
    "call mill.define.Module.millModuleSegments$(mill.define.Module)mill.define.Segments": [
        "external mill.define.Module"
    ],
    "call mill.define.Module.millModuleShared$(mill.define.Module)mill.define.Ctx$Foreign": [
        "external mill.define.Module"
    ],
    "call mill.define.Module.toString$(mill.define.Module)java.lang.String": [
        "external mill.define.Module"
    ],
    "call mill.define.Segments$#labels(scala.collection.immutable.Seq)mill.define.Segments": [
        "external mill.define.Segments$",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.define.Segments$.<clinit>()void": [],
    "call mill.define.Target$#traverseCtx(scala.collection.immutable.Seq,scala.Function2)mill.define.Task": [
        "external scala.collection.immutable.Seq",
        "external mill.define.Target$",
        "external scala.Function2"
    ],
    "call mill.define.Target$.<clinit>()void": [],
    "call mill.define.Target.<clinit>()void": [],
    "call mill.define.TargetImpl!<init>(mill.define.Task,mill.define.Ctx,upickle.core.Types$ReadWriter,scala.Option)void": [
        "external scala.Option",
        "external upickle.core.Types$ReadWriter",
        "external mill.define.TargetImpl",
        "external mill.define.Ctx",
        "external mill.define.Task"
    ],
    "call mill.define.TargetImpl.<clinit>()void": [],
    "call mill.define.Task.<clinit>()void": [],
    "call mill.eval.Evaluator.<clinit>()void": [],
    "call mill.main.RootModule!<init>(mill.main.RootModule$Info,sourcecode.Enclosing,sourcecode.Line,sourcecode.File)void": [
        "external sourcecode.Enclosing",
        "external sourcecode.Line",
        "external sourcecode.File",
        "external mill.main.RootModule",
        "external mill.main.RootModule$Info"
    ],
    "call mill.main.RootModule$Foreign!<init>(scala.Option,mill.main.RootModule$Info,sourcecode.Enclosing,sourcecode.Line,sourcecode.File)void": [
        "external sourcecode.Enclosing",
        "external scala.Option",
        "external sourcecode.Line",
        "external mill.main.RootModule$Foreign",
        "external sourcecode.File",
        "external mill.main.RootModule$Info"
    ],
    "call mill.main.RootModule$Foreign.<clinit>()void": [],
    "call mill.main.RootModule$Info!<init>(os.Path,mill.define.Discover)void": [
        "external os.Path",
        "external mill.define.Discover",
        "external mill.main.RootModule$Info"
    ],
    "call mill.main.RootModule$Info.<clinit>()void": [],
    "call mill.main.RootModule.<clinit>()void": [],
    "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed": [
        "external mill.main.TokenReaders$"
    ],
    "call mill.main.TokenReaders$#millEvaluatorTokenReader()mainargs.TokensReader": [
        "external mill.main.TokenReaders$"
    ],
    "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader": [
        "external mainargs.TokensReader$ShortNamed",
        "external mill.main.TokenReaders$"
    ],
    "call mill.main.TokenReaders$.<clinit>()void": [],
    "call mill.moduledefs.Cacher#cachedTarget(scala.Function0,sourcecode.Enclosing)java.lang.Object": [
        "external sourcecode.Enclosing",
        "external mill.moduledefs.Cacher",
        "external mill.define.Module$BaseClass",
        "external scala.Function0"
    ],
    "call mill.moduledefs.Cacher.<clinit>()void": [],
    "call mill.package$#Agg()mill.api.AggWrapper$Agg$": [
        "external mill.package$"
    ],
    "call mill.package$#T()mill.define.Target$": [
        "external mill.package$"
    ],
    "call mill.package$.<clinit>()void": [],
    "call mill.runner.MillBuildRootModule$Info!<init>(scala.collection.immutable.Seq,os.Path,os.Path)void": [
        "external os.Path",
        "external scala.collection.immutable.Seq",
        "external mill.runner.MillBuildRootModule$Info"
    ],
    "call mill.runner.MillBuildRootModule$Info#projectRoot()os.Path": [
        "external mill.runner.MillBuildRootModule$Info"
    ],
    "call mill.runner.MillBuildRootModule$Info.<clinit>()void": [],
    "call mill.scalalib.CoursierModule.$init$(mill.scalalib.CoursierModule)void": [
        "external mill.scalalib.CoursierModule"
    ],
    "call mill.scalalib.CoursierModule.<clinit>()void": [],
    "call mill.scalalib.CoursierModule.bindDependency$(mill.scalalib.CoursierModule)mill.define.Task": [
        "external mill.scalalib.CoursierModule"
    ],
    "call mill.scalalib.CoursierModule.coursierCacheCustomizer$(mill.scalalib.CoursierModule)mill.define.Task": [
        "external mill.scalalib.CoursierModule"
    ],
    "call mill.scalalib.CoursierModule.defaultResolver$(mill.scalalib.CoursierModule)mill.define.Task": [
        "external mill.scalalib.CoursierModule"
    ],
    "call mill.scalalib.CoursierModule.mapDependencies$(mill.scalalib.CoursierModule)mill.define.Task": [
        "external mill.scalalib.CoursierModule"
    ],
    "call mill.scalalib.CoursierModule.repositoriesTask$(mill.scalalib.CoursierModule)mill.define.Task": [
        "external mill.scalalib.CoursierModule"
    ],
    "call mill.scalalib.CoursierModule.resolutionCustomizer$(mill.scalalib.CoursierModule)mill.define.Task": [
        "external mill.scalalib.CoursierModule"
    ],
    "call mill.scalalib.CoursierModule.resolveDeps$(mill.scalalib.CoursierModule,mill.define.Task,boolean)mill.define.Task": [
        "external mill.scalalib.CoursierModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.CoursierModule.resolveDeps$default$2$(mill.scalalib.CoursierModule)boolean": [
        "external mill.scalalib.CoursierModule"
    ],
    "call mill.scalalib.Dep$#rw()upickle.core.Types$ReadWriter": [
        "external mill.scalalib.Dep$"
    ],
    "call mill.scalalib.Dep$.<clinit>()void": [],
    "call mill.scalalib.Dep.<clinit>()void": [],
    "call mill.scalalib.GenIdeaModule.$init$(mill.scalalib.GenIdeaModule)void": [
        "external mill.scalalib.GenIdeaModule"
    ],
    "call mill.scalalib.GenIdeaModule.<clinit>()void": [],
    "call mill.scalalib.GenIdeaModule.ideaCompileOutput$(mill.scalalib.GenIdeaModule)mill.define.Target": [
        "external mill.scalalib.GenIdeaModule"
    ],
    "call mill.scalalib.GenIdeaModule.ideaConfigFiles$(mill.scalalib.GenIdeaModule,int)mill.define.Task": [
        "external mill.scalalib.GenIdeaModule"
    ],
    "call mill.scalalib.GenIdeaModule.ideaJavaModuleFacets$(mill.scalalib.GenIdeaModule,int)mill.define.Task": [
        "external mill.scalalib.GenIdeaModule"
    ],
    "call mill.scalalib.GenIdeaModule.intellijModulePath$(mill.scalalib.GenIdeaModule)os.Path": [
        "external mill.scalalib.GenIdeaModule"
    ],
    "call mill.scalalib.GenIdeaModule.skipIdea$(mill.scalalib.GenIdeaModule)boolean": [
        "external mill.scalalib.GenIdeaModule"
    ],
    "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass": [
        "external mill.scalalib.IvyDepsTreeArgs$"
    ],
    "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void": [],
    "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void": [],
    "call mill.scalalib.JavaModule$JavaModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command",
        "external mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#prepareOffline(mainargs.Flag)mill.define.Command",
        "external mill.scalalib.ScalaModule",
        "external mainargs.Flag",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#run$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#run(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run(mill.define.Task)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackground(scala.collection.immutable.Seq)mill.define.Command",
        "external scala.collection.immutable.Seq",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#runLocal$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal(mill.define.Task)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#showModuleDeps$default$1()boolean": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps(boolean)mill.define.Command",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#test(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#test(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#testLocal(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testLocal(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests#testOnly(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testOnly(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.$init$(mill.scalalib.JavaModule$JavaModuleTests)void": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void": [],
    "call mill.scalalib.JavaModule$JavaModuleTests.hierarchyChecks$(mill.scalalib.JavaModule$JavaModuleTests)void": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.javacOptions$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Target": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.moduleDeps$(mill.scalalib.JavaModule$JavaModuleTests)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.repositoriesTask$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.resolutionCustomizer$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.runUseArgsFile$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Target": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.skipIdea$(mill.scalalib.JavaModule$JavaModuleTests)boolean": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule$JavaModuleTests.zincWorker$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.ModuleRef": [
        "external mill.scalalib.JavaModule$JavaModuleTests"
    ],
    "call mill.scalalib.JavaModule.$init$(mill.scalalib.JavaModule)void": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.<clinit>()void": [],
    "call mill.scalalib.JavaModule.allIvyDeps$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.allSources$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.artifactName$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.artifactNameParts$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.assembly$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.assemblyRules$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.bspBuildTarget$(mill.scalalib.JavaModule)mill.scalalib.bsp.BspBuildTarget": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.bspCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.bspLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.bspLocalRunClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.bspTransitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.bspTransitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.compileClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.compileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.compileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.compileModuleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.compileResources$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.defaultCommandName$(mill.scalalib.JavaModule)java.lang.String": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.doRunBackground$(mill.scalalib.JavaModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "external scala.collection.immutable.Map",
        "external os.Path",
        "external scala.Option",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule",
        "external mill.api.AggWrapper$Agg"
    ],
    "call mill.scalalib.JavaModule.docJarUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.docResources$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.finalMainClass$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.finalMainClassOpt$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.forkArgs$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.forkEnv$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.forkWorkingDir$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.generatedSources$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.ivyDepsTree$(mill.scalalib.JavaModule,mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "external mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.ivyDepsTree$default$1$(mill.scalalib.JavaModule)mill.scalalib.IvyDepsTreeArgs": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.jar$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.javacOptions$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.javadocOptions$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.launcher$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.localClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.localCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.localRunClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.mainClass$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.mandatoryIvyDeps$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.manifest$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.moduleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.moduleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.platformSuffix$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.prepareOffline$(mill.scalalib.JavaModule,mainargs.Flag)mill.define.Command": [
        "external mainargs.Flag",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.prependShellScript$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.printDepsTree$(mill.scalalib.JavaModule,boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task": [
        "external scala.collection.immutable.List",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.JavaModule.recursiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.resolvedIvyDeps$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.resolvedRunIvyDeps$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.run$(mill.scalalib.JavaModule,mill.define.Task)mill.define.Command": [
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.JavaModule.run$default$1$(mill.scalalib.JavaModule)mill.define.Task": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runBackground$(mill.scalalib.JavaModule,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runBackgroundLogToConsole$(mill.scalalib.JavaModule)boolean": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runIvyDeps$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runLocal$(mill.scalalib.JavaModule,mill.define.Task)mill.define.Command": [
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.JavaModule.runLocal$default$1$(mill.scalalib.JavaModule)mill.define.Task": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runMain$(mill.scalalib.JavaModule,java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runMainBackground$(mill.scalalib.JavaModule,java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runMainLocal$(mill.scalalib.JavaModule,java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.runUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.showModuleDeps$(mill.scalalib.JavaModule,boolean)mill.define.Command": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.showModuleDeps$default$1$(mill.scalalib.JavaModule)boolean": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.sourceJar$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.transitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.transitiveCompileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.transitiveIvyDeps$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.transitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.transitiveModuleCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.transitiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.unmanagedClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.upstreamAssembly$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.upstreamAssembly2$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.upstreamAssemblyClasspath$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.upstreamCompileOutput$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.zincIncrementalCompilation$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.zincReportCachedProblems$(mill.scalalib.JavaModule)mill.define.Target": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.JavaModule.zincWorker$(mill.scalalib.JavaModule)mill.define.ModuleRef": [
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command",
        "external mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#prepareOffline(mainargs.Flag)mill.define.Command",
        "external mill.scalalib.ScalaModule",
        "external mainargs.Flag",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#run$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#run(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run(mill.define.Task)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackground(scala.collection.immutable.Seq)mill.define.Command",
        "external scala.collection.immutable.Seq",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#runLocal$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal(mill.define.Task)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#showModuleDeps$default$1()boolean": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps(boolean)mill.define.Command",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#test(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#test(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#testLocal(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testLocal(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests#testOnly(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testOnly(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests.$init$(mill.scalalib.MavenModule$MavenModuleTests)void": [
        "external mill.scalalib.MavenModule$MavenModuleTests"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void": [],
    "call mill.scalalib.MavenModule$MavenModuleTests.intellijModulePath$(mill.scalalib.MavenModule$MavenModuleTests)os.Path": [
        "external mill.scalalib.MavenModule$MavenModuleTests"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests.millSourcePath$(mill.scalalib.MavenModule$MavenModuleTests)os.Path": [
        "external mill.scalalib.MavenModule$MavenModuleTests"
    ],
    "call mill.scalalib.MavenModule$MavenModuleTests.resources$(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Target": [
        "external mill.scalalib.MavenModule$MavenModuleTests"
    ],
    "call mill.scalalib.MavenModule.$init$(mill.scalalib.MavenModule)void": [
        "external mill.scalalib.MavenModule"
    ],
    "call mill.scalalib.MavenModule.<clinit>()void": [],
    "call mill.scalalib.MavenModule.resources$(mill.scalalib.MavenModule)mill.define.Target": [
        "external mill.scalalib.MavenModule"
    ],
    "call mill.scalalib.OfflineSupportModule.$init$(mill.scalalib.OfflineSupportModule)void": [
        "external mill.scalalib.OfflineSupportModule"
    ],
    "call mill.scalalib.OfflineSupportModule.<clinit>()void": [],
    "call mill.scalalib.OfflineSupportModule.prepareOffline$(mill.scalalib.OfflineSupportModule,mainargs.Flag)mill.define.Command": [
        "external mainargs.Flag",
        "external mill.scalalib.OfflineSupportModule"
    ],
    "call mill.scalalib.RunModule.$init$(mill.scalalib.RunModule)void": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.<clinit>()void": [],
    "call mill.scalalib.RunModule.allLocalMainClasses$(mill.scalalib.RunModule)mill.define.Target": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.doRunBackground$(mill.scalalib.RunModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "external scala.collection.immutable.Map",
        "external os.Path",
        "external scala.Option",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.api.AggWrapper$Agg"
    ],
    "call mill.scalalib.RunModule.forkArgs$(mill.scalalib.RunModule)mill.define.Target": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.forkEnv$(mill.scalalib.RunModule)mill.define.Target": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.forkWorkingDir$(mill.scalalib.RunModule)mill.define.Target": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.localRunClasspath$(mill.scalalib.RunModule)mill.define.Target": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.run$(mill.scalalib.RunModule,mill.define.Task)mill.define.Command": [
        "external mill.scalalib.RunModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.RunModule.runBackgroundLogToConsole$(mill.scalalib.RunModule)boolean": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.runBackgroundTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task": [
        "external mill.scalalib.RunModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.RunModule.runBackgroundTask$default$2$(mill.scalalib.RunModule)mill.define.Task": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.runClasspath$(mill.scalalib.RunModule)mill.define.Target": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.runForkedTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task": [
        "external mill.scalalib.RunModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.RunModule.runForkedTask$default$2$(mill.scalalib.RunModule)mill.define.Task": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.runLocal$(mill.scalalib.RunModule,mill.define.Task)mill.define.Command": [
        "external mill.scalalib.RunModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.RunModule.runLocalTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task": [
        "external mill.scalalib.RunModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.RunModule.runLocalTask$default$2$(mill.scalalib.RunModule)mill.define.Task": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.RunModule.runMain$(mill.scalalib.RunModule,java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String"
    ],
    "call mill.scalalib.RunModule.runMainBackground$(mill.scalalib.RunModule,java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String"
    ],
    "call mill.scalalib.RunModule.runMainLocal$(mill.scalalib.RunModule,java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String"
    ],
    "call mill.scalalib.RunModule.runUseArgsFile$(mill.scalalib.RunModule)mill.define.Target": [
        "external mill.scalalib.RunModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#console()mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#console()mill.define.Command",
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command",
        "external mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#prepareOffline(mainargs.Flag)mill.define.Command",
        "external mill.scalalib.ScalaModule",
        "external mainargs.Flag",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#repl(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.ScalaModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#run$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#run(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run(mill.define.Task)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackground(scala.collection.immutable.Seq)mill.define.Command",
        "external scala.collection.immutable.Seq",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#runLocal$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal(mill.define.Task)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.ScalaModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#showModuleDeps$default$1()boolean": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps(boolean)mill.define.Command",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#test(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#test(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#testLocal(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testLocal(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests#testOnly(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testOnly(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests.$init$(mill.scalalib.SbtModule$SbtModuleTests)void": [
        "external mill.scalalib.SbtModule$SbtModuleTests"
    ],
    "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void": [],
    "call mill.scalalib.SbtModule$SbtModuleTests.sources$(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Target": [
        "external mill.scalalib.SbtModule$SbtModuleTests"
    ],
    "call mill.scalalib.SbtModule.$init$(mill.scalalib.SbtModule)void": [
        "external mill.scalalib.SbtModule"
    ],
    "call mill.scalalib.SbtModule.<clinit>()void": [],
    "call mill.scalalib.SbtModule.sources$(mill.scalalib.SbtModule)mill.define.Target": [
        "external mill.scalalib.SbtModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#console()mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#console()mill.define.Command",
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command",
        "external mill.scalalib.IvyDepsTreeArgs",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#prepareOffline(mainargs.Flag)mill.define.Command",
        "external mill.scalalib.ScalaModule",
        "external mainargs.Flag",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#repl(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.ScalaModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#run$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#run(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run(mill.define.Task)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackground(scala.collection.immutable.Seq)mill.define.Command",
        "external scala.collection.immutable.Seq",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#runLocal$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal(mill.define.Task)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external mill.scalalib.JavaModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.RunModule",
        "external scala.collection.immutable.Seq",
        "external java.lang.String",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.ScalaModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#showModuleDeps$default$1()boolean": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps(boolean)mill.define.Command",
        "external mill.scalalib.JavaModule"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#test(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#test(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#testLocal(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testLocal(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests#testOnly(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testOnly(scala.collection.immutable.Seq)mill.define.Command",
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests.$init$(mill.scalalib.ScalaModule$ScalaTests)void": [
        "external mill.scalalib.ScalaModule$ScalaTests"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void": [],
    "call mill.scalalib.ScalaModule$ScalaTests.mandatoryScalacOptions$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target": [
        "external mill.scalalib.ScalaModule$ScalaTests"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests.scalaOrganization$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target": [
        "external mill.scalalib.ScalaModule$ScalaTests"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests.scalaVersion$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target": [
        "external mill.scalalib.ScalaModule$ScalaTests"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests.scalacOptions$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target": [
        "external mill.scalalib.ScalaModule$ScalaTests"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests.scalacPluginClasspath$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target": [
        "external mill.scalalib.ScalaModule$ScalaTests"
    ],
    "call mill.scalalib.ScalaModule$ScalaTests.scalacPluginIvyDeps$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target": [
        "external mill.scalalib.ScalaModule$ScalaTests"
    ],
    "call mill.scalalib.ScalaModule.$init$(mill.scalalib.ScalaModule)void": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.<clinit>()void": [],
    "call mill.scalalib.ScalaModule.allScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.allSourceFiles$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.ammoniteMainClass$(mill.scalalib.ScalaModule)mill.define.Task": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.ammoniteReplClasspath$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.ammoniteVersion$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.artifactId$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.artifactScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.artifactSuffix$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.bspBuildTarget$(mill.scalalib.ScalaModule)mill.scalalib.bsp.BspBuildTarget": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.bspBuildTargetData$(mill.scalalib.ScalaModule)mill.define.Task": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.bspCompileClassesPath$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.compile$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.console$(mill.scalalib.ScalaModule)mill.define.Command": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.consoleScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.crossFullScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.docJar$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.docSources$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.mandatoryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.mandatoryScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.manifest$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.mapDependencies$(mill.scalalib.ScalaModule)mill.define.Task": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.prepareOffline$(mill.scalalib.ScalaModule,mainargs.Flag)mill.define.Command": [
        "external mill.scalalib.ScalaModule",
        "external mainargs.Flag"
    ],
    "call mill.scalalib.ScalaModule.repl$(mill.scalalib.ScalaModule,scala.collection.immutable.Seq)mill.define.Command": [
        "external mill.scalalib.ScalaModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.ScalaModule.resolveCoursierDependency$(mill.scalalib.ScalaModule)mill.define.Task": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.resolvePublishDependency$(mill.scalalib.ScalaModule)mill.define.Task": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.resolvedAmmoniteReplIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.scalaCompilerClasspath$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.scalaDocClasspath$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.scalaDocOptions$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.scalaDocPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.scalaDocPluginIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.scalaLibraryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.scalaOrganization$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.scalacHelp$(mill.scalalib.ScalaModule,scala.collection.immutable.Seq)mill.define.Command": [
        "external mill.scalalib.ScalaModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.ScalaModule.scalacPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.semanticDbData$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.semanticDbPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.semanticDbScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.ScalaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.ScalaModule)mill.define.Target": [
        "external mill.scalalib.ScalaModule"
    ],
    "call mill.scalalib.SemanticDbJavaModule.$init$(mill.scalalib.SemanticDbJavaModule)void": [
        "external mill.scalalib.SemanticDbJavaModule"
    ],
    "call mill.scalalib.SemanticDbJavaModule.<clinit>()void": [],
    "call mill.scalalib.SemanticDbJavaModule.bspCompiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target": [
        "external mill.scalalib.SemanticDbJavaModule"
    ],
    "call mill.scalalib.SemanticDbJavaModule.compiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target": [
        "external mill.scalalib.SemanticDbJavaModule"
    ],
    "call mill.scalalib.SemanticDbJavaModule.resolvedSemanticDbJavaPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target": [
        "external mill.scalalib.SemanticDbJavaModule"
    ],
    "call mill.scalalib.SemanticDbJavaModule.semanticDbEnablePluginScalacOptions$(mill.scalalib.SemanticDbJavaModule)mill.define.Target": [
        "external mill.scalalib.SemanticDbJavaModule"
    ],
    "call mill.scalalib.SemanticDbJavaModule.semanticDbJavaVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target": [
        "external mill.scalalib.SemanticDbJavaModule"
    ],
    "call mill.scalalib.SemanticDbJavaModule.semanticDbPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target": [
        "external mill.scalalib.SemanticDbJavaModule"
    ],
    "call mill.scalalib.SemanticDbJavaModule.semanticDbVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target": [
        "external mill.scalalib.SemanticDbJavaModule"
    ],
    "call mill.scalalib.TestModule$JavaModuleBase.$init$(mill.scalalib.TestModule$JavaModuleBase)void": [
        "external mill.scalalib.TestModule$JavaModuleBase"
    ],
    "call mill.scalalib.TestModule$JavaModuleBase.<clinit>()void": [],
    "call mill.scalalib.TestModule$ScalaModuleBase.$init$(mill.scalalib.TestModule$ScalaModuleBase)void": [
        "external mill.scalalib.TestModule$ScalaModuleBase"
    ],
    "call mill.scalalib.TestModule$ScalaModuleBase.<clinit>()void": [],
    "call mill.scalalib.TestModule$ScalaTest.$init$(mill.scalalib.TestModule$ScalaTest)void": [
        "external mill.scalalib.TestModule$ScalaTest"
    ],
    "call mill.scalalib.TestModule$ScalaTest.<clinit>()void": [],
    "call mill.scalalib.TestModule$ScalaTest.testFramework$(mill.scalalib.TestModule$ScalaTest)mill.define.Target": [
        "external mill.scalalib.TestModule$ScalaTest"
    ],
    "call mill.scalalib.TestModule.$init$(mill.scalalib.TestModule)void": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.TestModule.<clinit>()void": [],
    "call mill.scalalib.TestModule.bspBuildTarget$(mill.scalalib.TestModule)mill.scalalib.bsp.BspBuildTarget": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.TestModule.defaultCommandName$(mill.scalalib.TestModule)java.lang.String": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.TestModule.discoveredTestClasses$(mill.scalalib.TestModule)mill.define.Target": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.TestModule.test$(mill.scalalib.TestModule,scala.collection.immutable.Seq)mill.define.Command": [
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.TestModule.testCached$(mill.scalalib.TestModule)mill.define.Target": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.TestModule.testCachedArgs$(mill.scalalib.TestModule)mill.define.Target": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.TestModule.testClasspath$(mill.scalalib.TestModule)mill.define.Target": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.TestModule.testLocal$(mill.scalalib.TestModule,scala.collection.immutable.Seq)mill.define.Command": [
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.TestModule.testOnly$(mill.scalalib.TestModule,scala.collection.immutable.Seq)mill.define.Command": [
        "external mill.scalalib.TestModule",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.TestModule.testReportXml$(mill.scalalib.TestModule)mill.define.Target": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.TestModule.testTask$(mill.scalalib.TestModule,mill.define.Task,mill.define.Task)mill.define.Task": [
        "external mill.scalalib.TestModule",
        "external mill.define.Task"
    ],
    "call mill.scalalib.TestModule.testUseArgsFile$(mill.scalalib.TestModule)mill.define.Target": [
        "external mill.scalalib.TestModule"
    ],
    "call mill.scalalib.WithZincWorker.$init$(mill.scalalib.WithZincWorker)void": [
        "external mill.scalalib.WithZincWorker"
    ],
    "call mill.scalalib.WithZincWorker.<clinit>()void": [],
    "call mill.scalalib.WithZincWorker.zincWorker$(mill.scalalib.WithZincWorker)mill.define.ModuleRef": [
        "external mill.scalalib.WithZincWorker"
    ],
    "call mill.scalalib.bsp.BspModule.$init$(mill.scalalib.bsp.BspModule)void": [
        "external mill.scalalib.bsp.BspModule"
    ],
    "call mill.scalalib.bsp.BspModule.<clinit>()void": [],
    "call mill.scalalib.bsp.BspModule.bspBuildTarget$(mill.scalalib.bsp.BspModule)mill.scalalib.bsp.BspBuildTarget": [
        "external mill.scalalib.bsp.BspModule"
    ],
    "call mill.scalalib.bsp.BspModule.bspDisplayName$(mill.scalalib.bsp.BspModule)java.lang.String": [
        "external mill.scalalib.bsp.BspModule"
    ],
    "call mill.scalalib.bsp.BspModule.bspDisplayName0$(mill.scalalib.bsp.BspModule)java.lang.String": [
        "external mill.scalalib.bsp.BspModule"
    ],
    "call mill.scalalib.package$#DepSyntax(scala.StringContext)mill.scalalib.package$DepSyntax": [
        "external mill.scalalib.package$",
        "external scala.StringContext"
    ],
    "call mill.scalalib.package$.<clinit>()void": [],
    "call mill.scalalib.package$DepSyntax#ivy(scala.collection.immutable.Seq)mill.scalalib.Dep": [
        "external mill.scalalib.package$DepSyntax",
        "external scala.collection.immutable.Seq"
    ],
    "call mill.scalalib.package$DepSyntax.<clinit>()void": [],
    "call millbuild.MiscInfo_build$!<init>()void": [
        "def millbuild.MiscInfo_build$#<init>()void"
    ],
    "call millbuild.MiscInfo_build$!millBaseModuleInfo$lzycompute()mill.main.RootModule$Info": [
        "def millbuild.MiscInfo_build$#millBaseModuleInfo$lzycompute()mill.main.RootModule$Info"
    ],
    "call millbuild.MiscInfo_build$!millBuildRootModuleInfo$lzycompute()mill.runner.MillBuildRootModule$Info": [
        "def millbuild.MiscInfo_build$#millBuildRootModuleInfo$lzycompute()mill.runner.MillBuildRootModule$Info"
    ],
    "call millbuild.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info": [
        "def millbuild.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info"
    ],
    "call millbuild.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info": [
        "def millbuild.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$10(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$10(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$100(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$100(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$101(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$101(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$102(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$102(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$103(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$103(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$104(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$104(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$105(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$105(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$106(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$106(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$107(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$107(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.build$NtShell$)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.build$NtShell$)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$11(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$11(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$110(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$110(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.build$NtShell$)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.build$NtShell$)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$112(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$112(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$113(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$113(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.build$NtShell$)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.build$NtShell$)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$115(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$115(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$116(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$116(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$117(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$117(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$118(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$118(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.build$NtShell$)java.lang.Object": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.build$NtShell$)java.lang.Object"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119(millbuild.build$NtShell$)boolean": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119(millbuild.build$NtShell$)boolean"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$12(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$12(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$120(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$120(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$121(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$121(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$122(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$122(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$123(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$123(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$124(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$124(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.build$difftest$)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.build$difftest$)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$127(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$127(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.build$difftest$)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.build$difftest$)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$129(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$129(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13(mill.scalalib.JavaModule$JavaModuleTests)boolean": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13(mill.scalalib.JavaModule$JavaModuleTests)boolean"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$130(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$130(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.build$difftest$)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.build$difftest$)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$132(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$132(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$133(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$133(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$134(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$134(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$135(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$135(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.build$difftest$)java.lang.Object": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.build$difftest$)java.lang.Object"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136(millbuild.build$difftest$)boolean": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136(millbuild.build$difftest$)boolean"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$137(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$137(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$138(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$138(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$139(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$139(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$14(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$14(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$140(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$140(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$141(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$141(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$142()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$142()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$143(millbuild.build$ut$)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$143(millbuild.build$ut$)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$144(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$144(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$145(millbuild.build$ut$)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$145(millbuild.build$ut$)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$146(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$146(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$147(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$147(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$148(millbuild.build$ut$)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$148(millbuild.build$ut$)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$149(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$149(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$15(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$15(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$150(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$150(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$151(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$151(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$152(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$152(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153$adapted(millbuild.build$ut$)java.lang.Object": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153$adapted(millbuild.build$ut$)java.lang.Object"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153(millbuild.build$ut$)boolean": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153(millbuild.build$ut$)boolean"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$154(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$154(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$155(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$155(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$156(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$156(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$157(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$157(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$158(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$158(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$159(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$159(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$16(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$16(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$160(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$160(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$161(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$161(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$17(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$17(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$20(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$20(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$21(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$21(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$23(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$23(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$24(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$24(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$26(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$26(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$27(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$27(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$28(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$28(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$29(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$29(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$3(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$3(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30(mill.scalalib.MavenModule$MavenModuleTests)boolean": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30(mill.scalalib.MavenModule$MavenModuleTests)boolean"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$31(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$31(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$32(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$32(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$33(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$33(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$34(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$34(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$37(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$37(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$39(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$39(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$4(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$4(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$40(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$40(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$42(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$42(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$43(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$43(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$44(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$44(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$45(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$45(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46(mill.scalalib.SbtModule$SbtModuleTests)boolean": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46(mill.scalalib.SbtModule$SbtModuleTests)boolean"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$47(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$47(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$48(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$48(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$49(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$49(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$50(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$50(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$51(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$51(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$52(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$52(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$53(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$53(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$54(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$54(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$57(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$57(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$59(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$59(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$6(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$6(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$60(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$60(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$62(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$62(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$63(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$63(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$64(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$64(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$65(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$65(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66(mill.scalalib.ScalaModule$ScalaTests)boolean": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66(mill.scalalib.ScalaModule$ScalaTests)boolean"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$67(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$67(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$68(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$68(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$69(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$69(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$7(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$7(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$70(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$70(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$71(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$71(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$72(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$72(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$73(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$73(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$74(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$74(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$76(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$76(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$77(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$77(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$78(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$78(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$79(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$79(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$80(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$80(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$81(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$81(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$82(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$82(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$83(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$83(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$84(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$84(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$85(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$85(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86(millbuild.NutShell.build$HasChiselTests$test$)boolean": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86(millbuild.NutShell.build$HasChiselTests$test$)boolean"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$87(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$87(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$88(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$88(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$89(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$89(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$9(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$9(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$90(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$90(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$91(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$91(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$92(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$92(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$93(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$93(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$94(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$94(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$95()scala.Tuple2": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$95()scala.Tuple2"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$96(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$96(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$97(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$97(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$98(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$98(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$99(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$99(millbuild.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path": [
        "def millbuild.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path"
    ],
    "call millbuild.MiscInfo_build$.<clinit>()void": [
        "def millbuild.MiscInfo_build$.<clinit>()void"
    ],
    "call millbuild.NutShell.MiscInfo_build$!<init>()void": [
        "def millbuild.NutShell.MiscInfo_build$#<init>()void"
    ],
    "call millbuild.NutShell.MiscInfo_build$!millBaseModuleInfo$lzycompute()mill.main.RootModule$Info": [
        "def millbuild.NutShell.MiscInfo_build$#millBaseModuleInfo$lzycompute()mill.main.RootModule$Info"
    ],
    "call millbuild.NutShell.MiscInfo_build$!millBuildRootModuleInfo$lzycompute()mill.runner.MillBuildRootModule$Info": [
        "def millbuild.NutShell.MiscInfo_build$#millBuildRootModuleInfo$lzycompute()mill.runner.MillBuildRootModule$Info"
    ],
    "call millbuild.NutShell.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info": [
        "def millbuild.NutShell.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info"
    ],
    "call millbuild.NutShell.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info": [
        "def millbuild.NutShell.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$10(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$10(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$100(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$100(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$101(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$101(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$102(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$102(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$103(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$103(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$104(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$104(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$105(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$105(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$106(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$106(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$107(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$107(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.NutShell.build$chiselModule$)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.NutShell.build$chiselModule$)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$11(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$11(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$110(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$110(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.NutShell.build$chiselModule$)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.NutShell.build$chiselModule$)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$112(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$112(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$113(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$113(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.NutShell.build$chiselModule$)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.NutShell.build$chiselModule$)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$115(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$115(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$116(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$116(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$117(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$117(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$118(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$118(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.NutShell.build$chiselModule$)java.lang.Object": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.NutShell.build$chiselModule$)java.lang.Object"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119(millbuild.NutShell.build$chiselModule$)boolean": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119(millbuild.NutShell.build$chiselModule$)boolean"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$12(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$12(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$120(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$120(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$121(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$121(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$122(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$122(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$123(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$123(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$124(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$124(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.NutShell.build$difftest$)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.NutShell.build$difftest$)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$127(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$127(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.NutShell.build$difftest$)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.NutShell.build$difftest$)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$129(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$129(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13(mill.scalalib.JavaModule$JavaModuleTests)boolean": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13(mill.scalalib.JavaModule$JavaModuleTests)boolean"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$130(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$130(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.NutShell.build$difftest$)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.NutShell.build$difftest$)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$132(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$132(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$133(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$133(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$134(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$134(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$135(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$135(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.NutShell.build$difftest$)java.lang.Object": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.NutShell.build$difftest$)java.lang.Object"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136(millbuild.NutShell.build$difftest$)boolean": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136(millbuild.NutShell.build$difftest$)boolean"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$137(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$137(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$138(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$138(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$139(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$139(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$14(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$14(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$140(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$140(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$141(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$141(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$15(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$15(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$16(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$16(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$17(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$17(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$20(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$20(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$21(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$21(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$23(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$23(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$24(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$24(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$26(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$26(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$27(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$27(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$28(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$28(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$29(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$29(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$3(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$3(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30(mill.scalalib.MavenModule$MavenModuleTests)boolean": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30(mill.scalalib.MavenModule$MavenModuleTests)boolean"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$31(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$31(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$32(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$32(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$33(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$33(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$34(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$34(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$37(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$37(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$39(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$39(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$4(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$4(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$40(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$40(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$42(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$42(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$43(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$43(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$44(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$44(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$45(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$45(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46(mill.scalalib.SbtModule$SbtModuleTests)boolean": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46(mill.scalalib.SbtModule$SbtModuleTests)boolean"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$47(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$47(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$48(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$48(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$49(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$49(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$50(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$50(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$51(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$51(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$52(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$52(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$53(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$53(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$54(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$54(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$57(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$57(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$59(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$59(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$6(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$6(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$60(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$60(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$62(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$62(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$63(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$63(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$64(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$64(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$65(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$65(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66(mill.scalalib.ScalaModule$ScalaTests)boolean": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66(mill.scalalib.ScalaModule$ScalaTests)boolean"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$67(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$67(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$68(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$68(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$69(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$69(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$7(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$7(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$70(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$70(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$71(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$71(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$72(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$72(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$73(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$73(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$74(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$74(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$76(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$76(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$77(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$77(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$78(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$78(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$79(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$79(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$80(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$80(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$81(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$81(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$82(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$82(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$83(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$83(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$84(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$84(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$85(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$85(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$86(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$86(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$87(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$87(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$88()scala.Tuple2": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$88()scala.Tuple2"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$89(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$89(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$9(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$9(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$90(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$90(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$91(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$91(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$92(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$92(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$93(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$93(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$94(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$94(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$95(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$95(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$96(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$96(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$97(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$97(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$98(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$98(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99(millbuild.NutShell.build$HasChiselTests$test$)boolean": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99(millbuild.NutShell.build$HasChiselTests$test$)boolean"
    ],
    "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path": [
        "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path"
    ],
    "call millbuild.NutShell.MiscInfo_build$.<clinit>()void": [
        "def millbuild.NutShell.MiscInfo_build$.<clinit>()void"
    ],
    "call millbuild.NutShell.build!<init>()void": [
        "def millbuild.NutShell.build#<init>()void"
    ],
    "call millbuild.NutShell.build!chiselModule$lzycompute$1()void": [
        "def millbuild.NutShell.build#chiselModule$lzycompute$1()void"
    ],
    "call millbuild.NutShell.build!difftest$lzycompute$1()void": [
        "def millbuild.NutShell.build#difftest$lzycompute$1()void"
    ],
    "call millbuild.NutShell.build!ivys$lzycompute$1()void": [
        "def millbuild.NutShell.build#ivys$lzycompute$1()void"
    ],
    "call millbuild.NutShell.build#clean(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#difftest()millbuild.NutShell.build$difftest$": [
        "def millbuild.NutShell.build#difftest()millbuild.NutShell.build$difftest$"
    ],
    "call millbuild.NutShell.build#init(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#inspect(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#ivys()millbuild.NutShell.build$ivys$": [
        "def millbuild.NutShell.build#ivys()millbuild.NutShell.build$ivys$"
    ],
    "call millbuild.NutShell.build#millModuleBasePath()mill.define.Ctx$BasePath": [
        "external mill.define.Module",
        "external mill.define.BaseModule"
    ],
    "call millbuild.NutShell.build#millModuleExternal()mill.define.Ctx$External": [
        "external mill.define.Module",
        "external mill.define.BaseModule"
    ],
    "call millbuild.NutShell.build#millModuleSegments()mill.define.Segments": [
        "external mill.define.Module",
        "external mill.define.BaseModule"
    ],
    "call millbuild.NutShell.build#millModuleShared()mill.define.Ctx$Foreign": [
        "external mill.define.Module",
        "external mill.define.BaseModule"
    ],
    "call millbuild.NutShell.build#path(mill.eval.Evaluator,java.lang.String,java.lang.String)mill.define.Command": [
        "external mill.main.RootModule$Foreign",
        "external java.lang.String",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#plan(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#resolve(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#show(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#showNamed(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#shutdown()mill.define.Command": [
        "external mill.main.RootModule$Foreign"
    ],
    "call millbuild.NutShell.build#version()mill.define.Command": [
        "external mill.main.RootModule$Foreign"
    ],
    "call millbuild.NutShell.build#visualize(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build#visualizePlan(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule$Foreign",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.NutShell.build$!<init>()void": [
        "def millbuild.NutShell.build$#<init>()void"
    ],
    "call millbuild.NutShell.build$.<clinit>()void": [
        "def millbuild.NutShell.build$.<clinit>()void"
    ],
    "call millbuild.NutShell.build$CommonModule!scalaVersion()mill.define.Target": [
        "def millbuild.NutShell.build$CommonModule#scalaVersion()mill.define.Target"
    ],
    "call millbuild.NutShell.build$CommonModule!scalacOptions()mill.define.Target": [
        "def millbuild.NutShell.build$CommonModule#scalacOptions()mill.define.Target"
    ],
    "call millbuild.NutShell.build$CommonModule#millModuleBasePath()mill.define.Ctx$BasePath": [
        "def millbuild.build$NtShell$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.NutShell.build$difftest$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.NutShell.build$chiselModule$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.build$difftest$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.build$ut$#millModuleBasePath()mill.define.Ctx$BasePath",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$CommonModule#millModuleExternal()mill.define.Ctx$External": [
        "def millbuild.NutShell.build$chiselModule$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$ut$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$NtShell$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$difftest$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.NutShell.build$difftest$#millModuleExternal()mill.define.Ctx$External",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$CommonModule#millModuleSegments()mill.define.Segments": [
        "def millbuild.build$ut$#millModuleSegments()mill.define.Segments",
        "def millbuild.build$NtShell$#millModuleSegments()mill.define.Segments",
        "def millbuild.build$difftest$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$difftest$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$chiselModule$#millModuleSegments()mill.define.Segments",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$CommonModule#millModuleShared()mill.define.Ctx$Foreign": [
        "def millbuild.build$difftest$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.NutShell.build$difftest$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.build$NtShell$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.build$ut$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.NutShell.build$chiselModule$#millModuleShared()mill.define.Ctx$Foreign",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$CommonModule#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build": [],
    "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl": [
        "def millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl"
    ],
    "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$2(millbuild.NutShell.build$CommonModule,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "def millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$2(millbuild.NutShell.build$CommonModule,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result"
    ],
    "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$3(millbuild.NutShell.build$CommonModule)java.lang.String": [
        "def millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$3(millbuild.NutShell.build$CommonModule)java.lang.String"
    ],
    "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl": [
        "def millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl"
    ],
    "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$2(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "def millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$2(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result"
    ],
    "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$3()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$3()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$CommonModule.$init$(millbuild.NutShell.build$CommonModule)void": [
        "def millbuild.NutShell.build$CommonModule.$init$(millbuild.NutShell.build$CommonModule)void"
    ],
    "call millbuild.NutShell.build$CommonModule.<clinit>()void": [],
    "call millbuild.NutShell.build$CommonModule.scalaVersion$(millbuild.NutShell.build$CommonModule)mill.define.Target": [
        "def millbuild.NutShell.build$CommonModule.scalaVersion$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "call millbuild.NutShell.build$CommonModule.scalacOptions$(millbuild.NutShell.build$CommonModule)mill.define.Target": [
        "def millbuild.NutShell.build$CommonModule.scalacOptions$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "call millbuild.NutShell.build$HasChisel3!ivyDeps()mill.define.Target": [
        "def millbuild.NutShell.build$HasChisel3#ivyDeps()mill.define.Target"
    ],
    "call millbuild.NutShell.build$HasChisel3!repositoriesTask()mill.define.Task": [
        "def millbuild.NutShell.build$HasChisel3#repositoriesTask()mill.define.Task"
    ],
    "call millbuild.NutShell.build$HasChisel3!scalacPluginIvyDeps()mill.define.Target": [
        "def millbuild.NutShell.build$HasChisel3#scalacPluginIvyDeps()mill.define.Target"
    ],
    "call millbuild.NutShell.build$HasChisel3#millModuleBasePath()mill.define.Ctx$BasePath": [
        "def millbuild.build$NtShell$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.NutShell.build$difftest$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.NutShell.build$chiselModule$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.build$difftest$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.build$ut$#millModuleBasePath()mill.define.Ctx$BasePath",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$HasChisel3#millModuleExternal()mill.define.Ctx$External": [
        "def millbuild.NutShell.build$chiselModule$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$ut$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$NtShell$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$difftest$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.NutShell.build$difftest$#millModuleExternal()mill.define.Ctx$External",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$HasChisel3#millModuleSegments()mill.define.Segments": [
        "def millbuild.build$ut$#millModuleSegments()mill.define.Segments",
        "def millbuild.build$NtShell$#millModuleSegments()mill.define.Segments",
        "def millbuild.build$difftest$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$difftest$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$chiselModule$#millModuleSegments()mill.define.Segments",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$HasChisel3#millModuleShared()mill.define.Ctx$Foreign": [
        "def millbuild.build$difftest$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.NutShell.build$difftest$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.build$NtShell$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.build$ut$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.NutShell.build$chiselModule$#millModuleShared()mill.define.Ctx$Foreign",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build": [
        "def millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build",
        "def millbuild.NutShell.build$difftest$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build",
        "def millbuild.build$ut$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build",
        "def millbuild.build$NtShell$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build",
        "def millbuild.NutShell.build$chiselModule$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build",
        "def millbuild.build$difftest$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build"
    ],
    "call millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task": [
        "def millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task",
        "def millbuild.build$NtShell$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task",
        "def millbuild.build$difftest$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task",
        "def millbuild.build$ut$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task"
    ],
    "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl": [
        "def millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl"
    ],
    "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "def millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result"
    ],
    "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg": [
        "def millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg"
    ],
    "call millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$1(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "def millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$1(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result"
    ],
    "call millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$2(scala.collection.immutable.Seq)scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$2(scala.collection.immutable.Seq)scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl": [
        "def millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl"
    ],
    "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "def millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result"
    ],
    "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg": [
        "def millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg"
    ],
    "call millbuild.NutShell.build$HasChisel3.$init$(millbuild.NutShell.build$HasChisel3)void": [
        "def millbuild.NutShell.build$HasChisel3.$init$(millbuild.NutShell.build$HasChisel3)void"
    ],
    "call millbuild.NutShell.build$HasChisel3.<clinit>()void": [],
    "call millbuild.NutShell.build$HasChisel3.ivyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target": [
        "def millbuild.NutShell.build$HasChisel3.ivyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "call millbuild.NutShell.build$HasChisel3.repositoriesTask$(millbuild.NutShell.build$HasChisel3)mill.define.Task": [
        "def millbuild.NutShell.build$HasChisel3.repositoriesTask$(millbuild.NutShell.build$HasChisel3)mill.define.Task"
    ],
    "call millbuild.NutShell.build$HasChisel3.scalacPluginIvyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target": [
        "def millbuild.NutShell.build$HasChisel3.scalacPluginIvyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "call millbuild.NutShell.build$HasChiselTests#millModuleBasePath()mill.define.Ctx$BasePath": [
        "def millbuild.build$NtShell$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.NutShell.build$chiselModule$#millModuleBasePath()mill.define.Ctx$BasePath",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$HasChiselTests#millModuleExternal()mill.define.Ctx$External": [
        "def millbuild.NutShell.build$chiselModule$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$NtShell$#millModuleExternal()mill.define.Ctx$External",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$HasChiselTests#millModuleSegments()mill.define.Segments": [
        "def millbuild.build$NtShell$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$chiselModule$#millModuleSegments()mill.define.Segments",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$HasChiselTests#millModuleShared()mill.define.Ctx$Foreign": [
        "def millbuild.build$NtShell$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.NutShell.build$chiselModule$#millModuleShared()mill.define.Ctx$Foreign",
        "external mill.define.Module"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$!<init>(millbuild.NutShell.build$HasChiselTests)void": [
        "def millbuild.NutShell.build$HasChiselTests$test$#<init>(millbuild.NutShell.build$HasChiselTests)void"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$!millInternal$lzycompute$1()void": [
        "def millbuild.NutShell.build$HasChiselTests$test$#millInternal$lzycompute$1()void"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#cachedTarget(scala.Function0,sourcecode.Enclosing)java.lang.Object": [
        "external sourcecode.Enclosing",
        "external mill.define.Module$BaseClass",
        "external scala.Function0"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#console()mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#console()mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#millModuleBasePath()mill.define.Ctx$BasePath": [
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleBasePath()mill.define.Ctx$BasePath"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#millModuleExternal()mill.define.Ctx$External": [
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleExternal()mill.define.Ctx$External"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#millModuleSegments()mill.define.Segments": [
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleSegments()mill.define.Segments"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#millModuleShared()mill.define.Ctx$Foreign": [
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleShared()mill.define.Ctx$Foreign"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#prepareOffline(mainargs.Flag)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#repl(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#run(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackground(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps(boolean)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#test(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#test(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#testLocal(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testLocal(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$#testOnly(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testOnly(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$4(millbuild.NutShell.build$HasChiselTests$test$)mill.define.TargetImpl": [
        "def millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$4(millbuild.NutShell.build$HasChiselTests$test$)mill.define.TargetImpl"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$5(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "def millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$5(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$6()mill.api.AggWrapper$Agg": [
        "def millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$6()mill.api.AggWrapper$Agg"
    ],
    "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void": [],
    "call millbuild.NutShell.build$HasChiselTests.$init$(millbuild.NutShell.build$HasChiselTests)void": [
        "def millbuild.NutShell.build$HasChiselTests.$init$(millbuild.NutShell.build$HasChiselTests)void"
    ],
    "call millbuild.NutShell.build$HasChiselTests.<clinit>()void": [],
    "call millbuild.NutShell.build$chiselModule$!<init>(millbuild.NutShell.build)void": [
        "def millbuild.NutShell.build$chiselModule$#<init>(millbuild.NutShell.build)void"
    ],
    "call millbuild.NutShell.build$chiselModule$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$chiselModule$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$chiselModule$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$chiselModule$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$chiselModule$!millInternal$lzycompute$3()void": [
        "def millbuild.NutShell.build$chiselModule$#millInternal$lzycompute$3()void"
    ],
    "call millbuild.NutShell.build$chiselModule$!test$lzycompute$1()void": [
        "def millbuild.NutShell.build$chiselModule$#test$lzycompute$1()void"
    ],
    "call millbuild.NutShell.build$chiselModule$#console()mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#console()mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.build$chiselModule$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.build$chiselModule$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#prepareOffline(mainargs.Flag)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#repl(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#run$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$chiselModule$#run$default$1()mill.define.Task"
    ],
    "call millbuild.NutShell.build$chiselModule$#run(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#run(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#runBackground(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#runLocal$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$chiselModule$#runLocal$default$1()mill.define.Task"
    ],
    "call millbuild.NutShell.build$chiselModule$#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#runLocal(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$#showModuleDeps$default$1()boolean": [
        "def millbuild.NutShell.build$chiselModule$#showModuleDeps$default$1()boolean"
    ],
    "call millbuild.NutShell.build$chiselModule$#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.NutShell.build$chiselModule$#showModuleDeps(boolean)mill.define.Command"
    ],
    "call millbuild.NutShell.build$chiselModule$.<clinit>()void": [],
    "call millbuild.NutShell.build$difftest$!<init>(millbuild.NutShell.build)void": [
        "def millbuild.NutShell.build$difftest$#<init>(millbuild.NutShell.build)void"
    ],
    "call millbuild.NutShell.build$difftest$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$difftest$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$difftest$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$difftest$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.NutShell.build$difftest$!millInternal$lzycompute$2()void": [
        "def millbuild.NutShell.build$difftest$#millInternal$lzycompute$2()void"
    ],
    "call millbuild.NutShell.build$difftest$#console()mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#console()mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.NutShell.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.NutShell.build$difftest$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#prepareOffline(mainargs.Flag)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#repl(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#run$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$difftest$#run$default$1()mill.define.Task"
    ],
    "call millbuild.NutShell.build$difftest$#run(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#run(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#runBackground(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#runLocal$default$1()mill.define.Task": [
        "def millbuild.NutShell.build$difftest$#runLocal$default$1()mill.define.Task"
    ],
    "call millbuild.NutShell.build$difftest$#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#runLocal(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$#showModuleDeps$default$1()boolean": [
        "def millbuild.NutShell.build$difftest$#showModuleDeps$default$1()boolean"
    ],
    "call millbuild.NutShell.build$difftest$#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.NutShell.build$difftest$#showModuleDeps(boolean)mill.define.Command"
    ],
    "call millbuild.NutShell.build$difftest$.<clinit>()void": [],
    "call millbuild.NutShell.build$ivys$!<init>(millbuild.NutShell.build)void": [
        "def millbuild.NutShell.build$ivys$#<init>(millbuild.NutShell.build)void"
    ],
    "call millbuild.NutShell.build$ivys$#chisel3()mill.scalalib.Dep": [
        "def millbuild.NutShell.build$ivys$#chisel3()mill.scalalib.Dep"
    ],
    "call millbuild.NutShell.build$ivys$#chisel3Plugin()mill.scalalib.Dep": [
        "def millbuild.NutShell.build$ivys$#chisel3Plugin()mill.scalalib.Dep"
    ],
    "call millbuild.NutShell.build$ivys$#scala()java.lang.String": [
        "def millbuild.NutShell.build$ivys$#scala()java.lang.String"
    ],
    "call millbuild.NutShell.build$ivys$.<clinit>()void": [],
    "call millbuild.NutShell.build.<clinit>()void": [],
    "call millbuild.build!<init>()void": [
        "def millbuild.build#<init>()void"
    ],
    "call millbuild.build!NtShell$lzycompute$1()void": [
        "def millbuild.build#NtShell$lzycompute$1()void"
    ],
    "call millbuild.build!difftest$lzycompute$1()void": [
        "def millbuild.build#difftest$lzycompute$1()void"
    ],
    "call millbuild.build!ut$lzycompute$1()void": [
        "def millbuild.build#ut$lzycompute$1()void"
    ],
    "call millbuild.build#NtShell()millbuild.build$NtShell$": [
        "def millbuild.build#NtShell()millbuild.build$NtShell$"
    ],
    "call millbuild.build#clean(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#difftest()millbuild.build$difftest$": [
        "def millbuild.build#difftest()millbuild.build$difftest$"
    ],
    "call millbuild.build#init(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#inspect(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#millModuleBasePath()mill.define.Ctx$BasePath": [
        "external mill.define.Module",
        "external mill.define.BaseModule"
    ],
    "call millbuild.build#millModuleExternal()mill.define.Ctx$External": [
        "external mill.define.Module",
        "external mill.define.BaseModule"
    ],
    "call millbuild.build#millModuleSegments()mill.define.Segments": [
        "external mill.define.Module",
        "external mill.define.BaseModule"
    ],
    "call millbuild.build#millModuleShared()mill.define.Ctx$Foreign": [
        "external mill.define.Module",
        "external mill.define.BaseModule"
    ],
    "call millbuild.build#path(mill.eval.Evaluator,java.lang.String,java.lang.String)mill.define.Command": [
        "external java.lang.String",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#plan(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#resolve(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#show(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#showNamed(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#shutdown()mill.define.Command": [
        "external mill.main.RootModule"
    ],
    "call millbuild.build#version()mill.define.Command": [
        "external mill.main.RootModule"
    ],
    "call millbuild.build#visualize(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build#visualizePlan(mill.eval.Evaluator,scala.collection.immutable.Seq)mill.define.Command": [
        "external scala.collection.immutable.Seq",
        "external mill.main.RootModule",
        "external mill.eval.Evaluator"
    ],
    "call millbuild.build$!<init>()void": [
        "def millbuild.build$#<init>()void"
    ],
    "call millbuild.build$NtShell$!<init>(millbuild.build)void": [
        "def millbuild.build$NtShell$#<init>(millbuild.build)void"
    ],
    "call millbuild.build$NtShell$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$NtShell$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$NtShell$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$NtShell$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$NtShell$!millInternal$lzycompute$2()void": [
        "def millbuild.build$NtShell$#millInternal$lzycompute$2()void"
    ],
    "call millbuild.build$NtShell$!test$lzycompute$1()void": [
        "def millbuild.build$NtShell$#test$lzycompute$1()void"
    ],
    "call millbuild.build$NtShell$#console()mill.define.Command": [
        "def millbuild.build$NtShell$#console()mill.define.Command"
    ],
    "call millbuild.build$NtShell$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.build$NtShell$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.build$NtShell$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.build$NtShell$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.build$NtShell$#prepareOffline(mainargs.Flag)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$NtShell$#repl(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#run$default$1()mill.define.Task": [
        "def millbuild.build$NtShell$#run$default$1()mill.define.Task"
    ],
    "call millbuild.build$NtShell$#run(mill.define.Task)mill.define.Command": [
        "def millbuild.build$NtShell$#run(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$NtShell$#runBackground(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#runLocal$default$1()mill.define.Task": [
        "def millbuild.build$NtShell$#runLocal$default$1()mill.define.Task"
    ],
    "call millbuild.build$NtShell$#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.build$NtShell$#runLocal(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$NtShell$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$NtShell$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$NtShell$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$NtShell$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$NtShell$#showModuleDeps$default$1()boolean": [
        "def millbuild.build$NtShell$#showModuleDeps$default$1()boolean"
    ],
    "call millbuild.build$NtShell$#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.build$NtShell$#showModuleDeps(boolean)mill.define.Command"
    ],
    "call millbuild.build$NtShell$.<clinit>()void": [],
    "call millbuild.build$difftest$!<init>(millbuild.build)void": [
        "def millbuild.build$difftest$#<init>(millbuild.build)void"
    ],
    "call millbuild.build$difftest$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$difftest$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$difftest$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$difftest$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$difftest$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$difftest$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$difftest$!millInternal$lzycompute$1()void": [
        "def millbuild.build$difftest$#millInternal$lzycompute$1()void"
    ],
    "call millbuild.build$difftest$#console()mill.define.Command": [
        "def millbuild.build$difftest$#console()mill.define.Command"
    ],
    "call millbuild.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.build$difftest$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.build$difftest$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command"
    ],
    "call millbuild.build$difftest$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.build$difftest$#prepareOffline(mainargs.Flag)mill.define.Command"
    ],
    "call millbuild.build$difftest$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$difftest$#repl(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$difftest$#run$default$1()mill.define.Task": [
        "def millbuild.build$difftest$#run$default$1()mill.define.Task"
    ],
    "call millbuild.build$difftest$#run(mill.define.Task)mill.define.Command": [
        "def millbuild.build$difftest$#run(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.build$difftest$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$difftest$#runBackground(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$difftest$#runLocal$default$1()mill.define.Task": [
        "def millbuild.build$difftest$#runLocal$default$1()mill.define.Task"
    ],
    "call millbuild.build$difftest$#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.build$difftest$#runLocal(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.build$difftest$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$difftest$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$difftest$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$difftest$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$difftest$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$difftest$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$difftest$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$difftest$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$difftest$#showModuleDeps$default$1()boolean": [
        "def millbuild.build$difftest$#showModuleDeps$default$1()boolean"
    ],
    "call millbuild.build$difftest$#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.build$difftest$#showModuleDeps(boolean)mill.define.Command"
    ],
    "call millbuild.build$difftest$.<clinit>()void": [],
    "call millbuild.build$ut$!<init>(millbuild.build)void": [
        "def millbuild.build$ut$#<init>(millbuild.build)void"
    ],
    "call millbuild.build$ut$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$ut$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$ut$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$ut$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$ut$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "def millbuild.build$ut$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "call millbuild.build$ut$!millInternal$lzycompute$3()void": [
        "def millbuild.build$ut$#millInternal$lzycompute$3()void"
    ],
    "call millbuild.build$ut$#console()mill.define.Command": [
        "def millbuild.build$ut$#console()mill.define.Command"
    ],
    "call millbuild.build$ut$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "def millbuild.build$ut$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "call millbuild.build$ut$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "def millbuild.build$ut$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command"
    ],
    "call millbuild.build$ut$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "def millbuild.build$ut$#prepareOffline(mainargs.Flag)mill.define.Command"
    ],
    "call millbuild.build$ut$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#repl(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$#run$default$1()mill.define.Task": [
        "def millbuild.build$ut$#run$default$1()mill.define.Task"
    ],
    "call millbuild.build$ut$#run(mill.define.Task)mill.define.Command": [
        "def millbuild.build$ut$#run(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.build$ut$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#runBackground(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$#runLocal$default$1()mill.define.Task": [
        "def millbuild.build$ut$#runLocal$default$1()mill.define.Task"
    ],
    "call millbuild.build$ut$#runLocal(mill.define.Task)mill.define.Command": [
        "def millbuild.build$ut$#runLocal(mill.define.Task)mill.define.Command"
    ],
    "call millbuild.build$ut$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$#showModuleDeps$default$1()boolean": [
        "def millbuild.build$ut$#showModuleDeps$default$1()boolean"
    ],
    "call millbuild.build$ut$#showModuleDeps(boolean)mill.define.Command": [
        "def millbuild.build$ut$#showModuleDeps(boolean)mill.define.Command"
    ],
    "call millbuild.build$ut$#test(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#test(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$#testLocal(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#testLocal(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$#testOnly(scala.collection.immutable.Seq)mill.define.Command": [
        "def millbuild.build$ut$#testOnly(scala.collection.immutable.Seq)mill.define.Command"
    ],
    "call millbuild.build$ut$.<clinit>()void": [],
    "call millbuild.build.<clinit>()void": [],
    "call os.Path#$div(os.PathChunk)os.Path": [
        "external os.Path",
        "external os.PathChunk"
    ],
    "call os.Path$#apply(java.lang.Object,os.PathConvertible)os.Path": [
        "external os.Path$",
        "external java.lang.Object",
        "external os.PathConvertible"
    ],
    "call os.Path$.<clinit>()void": [],
    "call os.Path.<clinit>()void": [],
    "call os.PathChunk$#StringPathChunk(java.lang.String)os.PathChunk$StringPathChunk": [
        "external os.PathChunk$",
        "external java.lang.String"
    ],
    "call os.PathChunk$.<clinit>()void": [],
    "call os.PathConvertible$StringConvertible$.<clinit>()void": [],
    "call os.package$#pwd()os.Path": [
        "external os.package$"
    ],
    "call os.package$.<clinit>()void": [],
    "call scala.Function0#apply()java.lang.Object": [
        "external scala.Function0"
    ],
    "call scala.Function0.<clinit>()void": [],
    "call scala.None$.<clinit>()void": [],
    "call scala.Predef$#ArrowAssoc(java.lang.Object)java.lang.Object": [
        "external scala.Predef$",
        "external java.lang.Object"
    ],
    "call scala.Predef$.<clinit>()void": [],
    "call scala.Predef$ArrowAssoc$#$minus$greater$extension(java.lang.Object,java.lang.Object)scala.Tuple2": [
        "external java.lang.Object",
        "external scala.Predef$ArrowAssoc$"
    ],
    "call scala.Predef$ArrowAssoc$.<clinit>()void": [],
    "call scala.Some!<init>(java.lang.Object)void": [
        "external scala.Some",
        "external java.lang.Object"
    ],
    "call scala.Some.<clinit>()void": [],
    "call scala.StringContext!<init>(scala.collection.immutable.Seq)void": [
        "external scala.collection.immutable.Seq",
        "external scala.StringContext"
    ],
    "call scala.StringContext.<clinit>()void": [],
    "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void": [
        "external scala.Tuple2",
        "external java.lang.Object"
    ],
    "call scala.Tuple2.<clinit>()void": [],
    "call scala.collection.StrictOptimizedIterableOps#map(scala.Function1)java.lang.Object": [
        "external scala.collection.immutable.List",
        "external scala.collection.IterableOps",
        "external scala.collection.StrictOptimizedIterableOps",
        "external scala.Function1"
    ],
    "call scala.collection.StrictOptimizedIterableOps.<clinit>()void": [],
    "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void": [
        "external scala.collection.immutable.$colon$colon",
        "external scala.collection.immutable.List",
        "external java.lang.Object"
    ],
    "call scala.collection.immutable.$colon$colon#$plus$plus(scala.collection.IterableOnce)java.lang.Object": [
        "external scala.collection.IterableOps",
        "external scala.collection.IterableOnce",
        "external scala.collection.AbstractIterable"
    ],
    "call scala.collection.immutable.$colon$colon.<clinit>()void": [],
    "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object": [
        "external scala.collection.immutable.Seq",
        "external scala.collection.immutable.List$"
    ],
    "call scala.collection.immutable.List$.<clinit>()void": [],
    "call scala.collection.immutable.Map$#apply(scala.collection.immutable.Seq)java.lang.Object": [
        "external scala.collection.immutable.Map$",
        "external scala.collection.immutable.Seq"
    ],
    "call scala.collection.immutable.Map$.<clinit>()void": [],
    "call scala.collection.immutable.Map.<clinit>()void": [],
    "call scala.collection.immutable.Nil$.<clinit>()void": [],
    "call scala.collection.immutable.Seq#$plus$plus(scala.collection.IterableOnce)java.lang.Object": [
        "external scala.collection.IterableOps",
        "external scala.collection.IterableOnce",
        "external scala.collection.AbstractIterable"
    ],
    "call scala.collection.immutable.Seq#apply(int)java.lang.Object": [
        "external scala.collection.immutable.List",
        "external scala.collection.SeqOps",
        "external scala.collection.LinearSeqOps"
    ],
    "call scala.collection.immutable.Seq$#iterableFactory()scala.collection.Factory": [
        "external scala.collection.SeqFactory$Delegate"
    ],
    "call scala.collection.immutable.Seq$.<clinit>()void": [],
    "call scala.collection.immutable.Seq.<clinit>()void": [],
    "call scala.collection.immutable.Vector$#apply(scala.collection.immutable.Seq)java.lang.Object": [
        "external scala.collection.immutable.Vector$",
        "external scala.collection.immutable.Seq"
    ],
    "call scala.collection.immutable.Vector$.<clinit>()void": [],
    "call scala.package$#Vector()scala.collection.immutable.Vector$": [
        "external scala.package$"
    ],
    "call scala.package$.<clinit>()void": [],
    "call scala.runtime.BoxesRunTime.<clinit>()void": [],
    "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean": [],
    "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean": [
        "external java.lang.Object"
    ],
    "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq": [
        "external scala.runtime.ScalaRunTime$"
    ],
    "call scala.runtime.ScalaRunTime$.<clinit>()void": [],
    "call sourcecode.Enclosing!<init>(java.lang.String)void": [
        "external sourcecode.Enclosing",
        "external java.lang.String"
    ],
    "call sourcecode.Enclosing.<clinit>()void": [],
    "call sourcecode.File!<init>(java.lang.String)void": [
        "external java.lang.String",
        "external sourcecode.File"
    ],
    "call sourcecode.File.<clinit>()void": [],
    "call sourcecode.Line!<init>(int)void": [
        "external sourcecode.Line"
    ],
    "call sourcecode.Line.<clinit>()void": [],
    "call upickle.core.Types$ReadWriter$#join(upickle.core.Types$Reader,upickle.core.Types$Writer)upickle.core.Types$ReadWriter": [
        "external upickle.core.Types$Writer",
        "external upickle.core.Types$ReadWriter$",
        "external upickle.core.Types$Reader"
    ],
    "call upickle.core.Types$ReadWriter$.<clinit>()void": [],
    "call upickle.default$#ReadWriter()upickle.core.Types$ReadWriter$": [
        "external upickle.default$"
    ],
    "call upickle.default$#SeqLikeReader(upickle.core.Types$Reader,scala.collection.Factory)upickle.core.Types$Reader": [
        "external upickle.core.Types$Reader",
        "external scala.collection.Factory",
        "external upickle.default$"
    ],
    "call upickle.default$#SeqLikeWriter(upickle.core.Types$Writer)upickle.core.Types$Writer": [
        "external upickle.core.Types$Writer",
        "external upickle.default$"
    ],
    "call upickle.default$#StringReader()upickle.core.Types$Reader": [
        "external upickle.default$"
    ],
    "call upickle.default$#StringWriter()upickle.core.Types$Writer": [
        "external upickle.default$"
    ],
    "call upickle.default$.<clinit>()void": [],
    "def millbuild.MiscInfo_build$#<init>()void": [
        "call java.lang.Object!<init>()void",
        "call java.lang.Object.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$#millBaseModuleInfo$lzycompute()mill.main.RootModule$Info": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2",
        "call scala.Predef$ArrowAssoc$#$minus$greater$extension(java.lang.Object,java.lang.Object)scala.Tuple2",
        "call mill.main.RootModule$Info.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2",
        "call scala.Predef$.<clinit>()void",
        "call scala.Predef$ArrowAssoc$.<clinit>()void",
        "call scala.collection.immutable.Map$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2",
        "call mill.define.Discover$.<clinit>()void",
        "call mill.runner.MillBuildRootModule$Info#projectRoot()os.Path",
        "call scala.Predef$#ArrowAssoc(java.lang.Object)java.lang.Object",
        "call scala.Tuple2.<clinit>()void",
        "call scala.collection.immutable.Map.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$142()scala.Tuple2",
        "call scala.collection.immutable.Map$.<clinit>()void",
        "call millbuild.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info",
        "call scala.Function0.<clinit>()void",
        "call mill.runner.MillBuildRootModule$Info.<clinit>()void",
        "call mill.define.Discover$#apply2(scala.collection.immutable.Map)mill.define.Discover",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$95()scala.Tuple2",
        "call mill.main.RootModule$Info!<init>(os.Path,mill.define.Discover)void",
        "call scala.Function0#apply()java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2"
    ],
    "def millbuild.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info": [
        "call millbuild.MiscInfo_build$!millBaseModuleInfo$lzycompute()mill.main.RootModule$Info"
    ],
    "def millbuild.MiscInfo_build$#millBuildRootModuleInfo$lzycompute()mill.runner.MillBuildRootModule$Info": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.package$.<clinit>()void",
        "call scala.collection.StrictOptimizedIterableOps#map(scala.Function1)java.lang.Object",
        "call scala.collection.immutable.Vector$.<clinit>()void",
        "call mill.runner.MillBuildRootModule$Info!<init>(scala.collection.immutable.Seq,os.Path,os.Path)void",
        "call os.Path$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call scala.package$#Vector()scala.collection.immutable.Vector$",
        "call mill.runner.MillBuildRootModule$Info.<clinit>()void",
        "call scala.collection.immutable.Vector$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call java.lang.String.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path",
        "call os.Path$#apply(java.lang.Object,os.PathConvertible)os.Path",
        "call os.PathConvertible$StringConvertible$.<clinit>()void",
        "call scala.collection.StrictOptimizedIterableOps.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info": [
        "call millbuild.MiscInfo_build$!millBuildRootModuleInfo$lzycompute()mill.runner.MillBuildRootModule$Info"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$10(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$100(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$101(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$102(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$103(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$104(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$105(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$106(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$107(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.build$NtShell$)java.lang.Object",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.build$NtShell$)mill.define.Task",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.build$NtShell$)mill.define.Task",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.build$NtShell$)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.build$NtShell$)mill.scalalib.IvyDepsTreeArgs": [
        "call millbuild.build$NtShell$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.build$NtShell$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$11(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$110(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.build$NtShell$)mill.define.Task": [
        "call millbuild.build$NtShell$.<clinit>()void",
        "call millbuild.build$NtShell$#run$default$1()mill.define.Task"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$112(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$113(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.build$NtShell$)mill.define.Task": [
        "call millbuild.build$NtShell$.<clinit>()void",
        "call millbuild.build$NtShell$#runLocal$default$1()mill.define.Task"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$115(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$116(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$117(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$118(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.build$NtShell$)java.lang.Object": [
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119(millbuild.build$NtShell$)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119(millbuild.build$NtShell$)boolean": [
        "call millbuild.build$NtShell$.<clinit>()void",
        "call millbuild.build$NtShell$#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$12(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$120(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$121(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build$NtShell$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$122(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$123(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$124(millbuild.build$NtShell$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call millbuild.build$NtShell$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.build$difftest$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.build$difftest$)mill.define.Task",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.build$difftest$)mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.build$difftest$)java.lang.Object",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.build$difftest$)mill.scalalib.IvyDepsTreeArgs": [
        "call millbuild.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.build$difftest$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$127(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.build$difftest$)mill.define.Task": [
        "call millbuild.build$difftest$#run$default$1()mill.define.Task",
        "call millbuild.build$difftest$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$129(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object": [
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13(mill.scalalib.JavaModule$JavaModuleTests)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13(mill.scalalib.JavaModule$JavaModuleTests)boolean": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$130(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.build$difftest$)mill.define.Task": [
        "call millbuild.build$difftest$#runLocal$default$1()mill.define.Task",
        "call millbuild.build$difftest$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$132(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$133(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$134(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$135(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.build$difftest$)java.lang.Object": [
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136(millbuild.build$difftest$)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136(millbuild.build$difftest$)boolean": [
        "call millbuild.build$difftest$.<clinit>()void",
        "call millbuild.build$difftest$#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$137(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$138(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build$difftest$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$139(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$14(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$140(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$141(millbuild.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$difftest$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$142()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$148(millbuild.build$ut$)mill.define.Task",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153$adapted(millbuild.build$ut$)java.lang.Object",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$145(millbuild.build$ut$)mill.define.Task",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$143(millbuild.build$ut$)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$143(millbuild.build$ut$)mill.scalalib.IvyDepsTreeArgs": [
        "call millbuild.build$ut$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.build$ut$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$144(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$145(millbuild.build$ut$)mill.define.Task": [
        "call millbuild.build$ut$#run$default$1()mill.define.Task",
        "call millbuild.build$ut$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$146(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$147(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$148(millbuild.build$ut$)mill.define.Task": [
        "call millbuild.build$ut$#runLocal$default$1()mill.define.Task",
        "call millbuild.build$ut$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$149(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$15(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$150(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$151(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$152(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153$adapted(millbuild.build$ut$)java.lang.Object": [
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153(millbuild.build$ut$)boolean",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153(millbuild.build$ut$)boolean": [
        "call millbuild.build$ut$.<clinit>()void",
        "call millbuild.build$ut$#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$154(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$155(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.build$ut$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$156(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$157(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$158(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$159(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$16(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$160(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$161(millbuild.build$ut$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build$ut$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$17(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.MavenModule$MavenModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.JavaModule$JavaModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$20(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$21(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task": [
        "call mill.scalalib.MavenModule$MavenModuleTests#run$default$1()mill.define.Task",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$23(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$24(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task": [
        "call mill.scalalib.MavenModule$MavenModuleTests#runLocal$default$1()mill.define.Task",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$26(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$27(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$28(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$29(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$3(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object": [
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30(mill.scalalib.MavenModule$MavenModuleTests)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30(mill.scalalib.MavenModule$MavenModuleTests)boolean": [
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$31(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$32(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$33(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$34(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.SbtModule$SbtModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$37(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task": [
        "call mill.scalalib.SbtModule$SbtModuleTests#run$default$1()mill.define.Task",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$39(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$4(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$40(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task": [
        "call mill.scalalib.SbtModule$SbtModuleTests#runLocal$default$1()mill.define.Task",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$42(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$43(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$44(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$45(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object": [
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46(mill.scalalib.SbtModule$SbtModuleTests)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46(mill.scalalib.SbtModule$SbtModuleTests)boolean": [
        "call mill.scalalib.SbtModule$SbtModuleTests#showModuleDeps$default$1()boolean",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$47(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$48(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$49(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "call mill.scalalib.JavaModule$JavaModuleTests#run$default$1()mill.define.Task",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$50(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$51(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$52(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$53(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$54(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.ScalaModule$ScalaTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$57(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task": [
        "call mill.scalalib.ScalaModule$ScalaTests#run$default$1()mill.define.Task",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$59(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$6(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$60(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task": [
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests#runLocal$default$1()mill.define.Task"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$62(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$63(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$64(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$65(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object": [
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66(mill.scalalib.ScalaModule$ScalaTests)boolean",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66(mill.scalalib.ScalaModule$ScalaTests)boolean": [
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$67(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$68(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$69(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$7(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$70(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$71(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$72(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$73(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$74(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$78(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$81(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$76(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$76(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$77(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$78(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$79(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "call mill.scalalib.JavaModule$JavaModuleTests#runLocal$default$1()mill.define.Task",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$80(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$81(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$82(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$83(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$84(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$85(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object": [
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86(millbuild.NutShell.build$HasChiselTests$test$)boolean",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86(millbuild.NutShell.build$HasChiselTests$test$)boolean": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$87(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$88(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$89(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$9(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$90(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$91(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$92(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$93(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$94(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$95()scala.Tuple2": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call mill.main.TokenReaders$#millEvaluatorTokenReader()mainargs.TokensReader",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$96(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$97(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$98(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$99(millbuild.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.build.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path": [
        "call os.Path$.<clinit>()void",
        "call os.Path$#apply(java.lang.Object,os.PathConvertible)os.Path",
        "call os.PathConvertible$StringConvertible$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build$.$deserializeLambda$(java.lang.invoke.SerializedLambda)java.lang.Object": [
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.build$difftest$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.build$difftest$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$148(millbuild.build$ut$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.build$NtShell$)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$78(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$86$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$81(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$142()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$153$adapted(millbuild.build$ut$)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.build$difftest$)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.build$NtShell$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.build$NtShell$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.build$difftest$)java.lang.Object",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$76(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.build$NtShell$)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$95()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$145(millbuild.build$ut$)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$143(millbuild.build$ut$)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task",
        "call millbuild.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task"
    ],
    "def millbuild.MiscInfo_build$.<clinit>()void": [
        "call millbuild.MiscInfo_build$!<init>()void"
    ],
    "def millbuild.MiscInfo_build.millBaseModuleInfo()mill.main.RootModule$Info": [
        "call millbuild.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info",
        "call millbuild.MiscInfo_build$.<clinit>()void"
    ],
    "def millbuild.MiscInfo_build.millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info": [
        "call millbuild.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info",
        "call millbuild.MiscInfo_build$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$#<init>()void": [
        "call java.lang.Object!<init>()void",
        "call java.lang.Object.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$#millBaseModuleInfo$lzycompute()mill.main.RootModule$Info": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.Predef$ArrowAssoc$#$minus$greater$extension(java.lang.Object,java.lang.Object)scala.Tuple2",
        "call mill.main.RootModule$Info.<clinit>()void",
        "call scala.Predef$.<clinit>()void",
        "call scala.Predef$ArrowAssoc$.<clinit>()void",
        "call scala.collection.immutable.Map$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call mill.define.Discover$.<clinit>()void",
        "call mill.runner.MillBuildRootModule$Info#projectRoot()os.Path",
        "call scala.Predef$#ArrowAssoc(java.lang.Object)java.lang.Object",
        "call scala.Tuple2.<clinit>()void",
        "call scala.collection.immutable.Map.<clinit>()void",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2",
        "call scala.collection.immutable.Map$.<clinit>()void",
        "call scala.Function0.<clinit>()void",
        "call mill.runner.MillBuildRootModule$Info.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$88()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2",
        "call mill.define.Discover$#apply2(scala.collection.immutable.Map)mill.define.Discover",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2",
        "call mill.main.RootModule$Info!<init>(os.Path,mill.define.Discover)void",
        "call millbuild.NutShell.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2",
        "call scala.Function0#apply()java.lang.Object",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2"
    ],
    "def millbuild.NutShell.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info": [
        "call millbuild.NutShell.MiscInfo_build$!millBaseModuleInfo$lzycompute()mill.main.RootModule$Info"
    ],
    "def millbuild.NutShell.MiscInfo_build$#millBuildRootModuleInfo$lzycompute()mill.runner.MillBuildRootModule$Info": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.package$.<clinit>()void",
        "call scala.collection.StrictOptimizedIterableOps#map(scala.Function1)java.lang.Object",
        "call scala.collection.immutable.Vector$.<clinit>()void",
        "call mill.runner.MillBuildRootModule$Info!<init>(scala.collection.immutable.Seq,os.Path,os.Path)void",
        "call os.Path$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call scala.package$#Vector()scala.collection.immutable.Vector$",
        "call mill.runner.MillBuildRootModule$Info.<clinit>()void",
        "call scala.collection.immutable.Vector$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call java.lang.String.<clinit>()void",
        "call os.Path$#apply(java.lang.Object,os.PathConvertible)os.Path",
        "call os.PathConvertible$StringConvertible$.<clinit>()void",
        "call scala.collection.StrictOptimizedIterableOps.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path"
    ],
    "def millbuild.NutShell.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info": [
        "call millbuild.NutShell.MiscInfo_build$!millBuildRootModuleInfo$lzycompute()mill.runner.MillBuildRootModule$Info"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$10(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$100(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$101(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$102(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$103(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$104(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$105(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$106(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$107(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.NutShell.build$chiselModule$)java.lang.Object",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.NutShell.build$chiselModule$)mill.define.Task",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.NutShell.build$chiselModule$)mill.define.Task",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.NutShell.build$chiselModule$)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.NutShell.build$chiselModule$)mill.scalalib.IvyDepsTreeArgs": [
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$11(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$110(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.NutShell.build$chiselModule$)mill.define.Task": [
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$#run$default$1()mill.define.Task"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$112(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$113(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.NutShell.build$chiselModule$)mill.define.Task": [
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$#runLocal$default$1()mill.define.Task"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$115(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$116(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$117(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$118(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.NutShell.build$chiselModule$)java.lang.Object": [
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119(millbuild.NutShell.build$chiselModule$)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119(millbuild.NutShell.build$chiselModule$)boolean": [
        "call millbuild.NutShell.build$chiselModule$#showModuleDeps$default$1()boolean",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$12(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$120(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$121(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$122(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$123(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$124(millbuild.NutShell.build$chiselModule$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.NutShell.build$difftest$)mill.define.Task",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.NutShell.build$difftest$)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.NutShell.build$difftest$)mill.define.Task",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.NutShell.build$difftest$)java.lang.Object",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.NutShell.build$difftest$)mill.scalalib.IvyDepsTreeArgs": [
        "call millbuild.NutShell.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$127(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.NutShell.build$difftest$)mill.define.Task": [
        "call millbuild.NutShell.build$difftest$#run$default$1()mill.define.Task",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$129(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object": [
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13(mill.scalalib.JavaModule$JavaModuleTests)boolean",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13(mill.scalalib.JavaModule$JavaModuleTests)boolean": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$130(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.NutShell.build$difftest$)mill.define.Task": [
        "call millbuild.NutShell.build$difftest$#runLocal$default$1()mill.define.Task",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$132(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$133(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$134(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$135(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.NutShell.build$difftest$)java.lang.Object": [
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136(millbuild.NutShell.build$difftest$)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136(millbuild.NutShell.build$difftest$)boolean": [
        "call millbuild.NutShell.build$difftest$#showModuleDeps$default$1()boolean",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$137(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$138(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$139(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$14(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$140(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$141(millbuild.NutShell.build$difftest$,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$15(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$16(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$17(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.MavenModule$MavenModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.JavaModule$JavaModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$20(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$21(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task": [
        "call mill.scalalib.MavenModule$MavenModuleTests#run$default$1()mill.define.Task",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$23(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$24(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task": [
        "call mill.scalalib.MavenModule$MavenModuleTests#runLocal$default$1()mill.define.Task",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$26(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$27(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$28(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$29(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$3(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object": [
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30(mill.scalalib.MavenModule$MavenModuleTests)boolean",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30(mill.scalalib.MavenModule$MavenModuleTests)boolean": [
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$31(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$32(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$33(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$34(mill.scalalib.MavenModule$MavenModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.SbtModule$SbtModuleTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$37(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task": [
        "call mill.scalalib.SbtModule$SbtModuleTests#run$default$1()mill.define.Task",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$39(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$4(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$40(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task": [
        "call mill.scalalib.SbtModule$SbtModuleTests#runLocal$default$1()mill.define.Task",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$42(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$43(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$44(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$45(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object": [
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46(mill.scalalib.SbtModule$SbtModuleTests)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46(mill.scalalib.SbtModule$SbtModuleTests)boolean": [
        "call mill.scalalib.SbtModule$SbtModuleTests#showModuleDeps$default$1()boolean",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$47(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$48(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$49(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "call mill.scalalib.JavaModule$JavaModuleTests#run$default$1()mill.define.Task",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$50(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$51(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$52(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$53(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$54(mill.scalalib.SbtModule$SbtModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.ScalaModule$ScalaTests#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$57(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task": [
        "call mill.scalalib.ScalaModule$ScalaTests#run$default$1()mill.define.Task",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$59(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$6(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$60(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task": [
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests#runLocal$default$1()mill.define.Task"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$62(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$63(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$64(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$65(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object": [
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66(mill.scalalib.ScalaModule$ScalaTests)boolean",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66(mill.scalalib.ScalaModule$ScalaTests)boolean": [
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$67(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.runtime.BoxesRunTime.unboxToBoolean(java.lang.Object)boolean",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$68(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$69(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call mainargs.Flag.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$7(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$70(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$71(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$72(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$73(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$74(mill.scalalib.ScalaModule$ScalaTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call mainargs.arg.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call mill.main.TokenReaders$#millEvaluatorTokenReader()mainargs.TokensReader",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$76(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$77(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$78(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$79(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task": [
        "call mill.scalalib.JavaModule$JavaModuleTests#runLocal$default$1()mill.define.Task",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$80(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$81(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$82(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$83(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$84(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$85(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$86(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$87(millbuild.NutShell.build,scala.collection.immutable.Seq)mill.define.Command": [
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void",
        "call mill.eval.Evaluator.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$88()scala.Tuple2": [
        "call mill.main.TokenReaders$#millArgsTokenReader()mainargs.TokensReader$ShortNamed",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object",
        "call scala.collection.immutable.List$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$6()boolean",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$91(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task",
        "call mainargs.arg.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$89(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs",
        "call mainargs.TokensReader$BooleanRead$.<clinit>()void",
        "call mainargs.main$.<clinit>()void",
        "call mainargs.ArgSig$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mainargs.arg!<init>(java.lang.String,char,java.lang.String,boolean,boolean,boolean)void",
        "call mainargs.arg$#$lessinit$greater$default$2()char",
        "call mainargs.TokensReader$StringRead$.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.Tuple2.<clinit>()void",
        "call scala.None$.<clinit>()void",
        "call scala.collection.immutable.List$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mainargs.main$#$lessinit$greater$default$2()java.lang.String",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$4()boolean",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mainargs.TokensReader$.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs$#argsReader()mainargs.ParserForClass",
        "call mainargs.TokensReader$#LeftoverRead(mainargs.TokensReader$Simple)mainargs.TokensReader$Leftover",
        "call mainargs.arg$#$lessinit$greater$default$1()java.lang.String",
        "call mill.scalalib.IvyDepsTreeArgs$.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.main!<init>(java.lang.String,java.lang.String)void",
        "call mainargs.arg$.<clinit>()void",
        "call mainargs.ArgSig$#create(java.lang.String,mainargs.arg,scala.Option,mainargs.TokensReader)mainargs.ArgSig",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$94(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task",
        "call mainargs.main$#$lessinit$greater$default$1()java.lang.String",
        "call mill.main.TokenReaders$#millTaskTokenReader(mainargs.TokensReader$ShortNamed)mainargs.TokensReader",
        "call mainargs.MainData$#create(java.lang.String,mainargs.main,scala.collection.immutable.Seq,scala.Function2)mainargs.MainData",
        "call mainargs.arg$#$lessinit$greater$default$3()java.lang.String",
        "call mainargs.MainData.<clinit>()void",
        "call mill.main.TokenReaders$.<clinit>()void",
        "call mainargs.main.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void",
        "call scala.Tuple2!<init>(java.lang.Object,java.lang.Object)void",
        "call mainargs.MainData$.<clinit>()void",
        "call mainargs.TokensReader$FlagRead$.<clinit>()void",
        "call mainargs.arg$#$lessinit$greater$default$5()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$89(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$9(mill.scalalib.JavaModule$JavaModuleTests,scala.collection.immutable.Seq)mill.define.Command": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$90(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.scalalib.IvyDepsTreeArgs.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$91(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$92(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$93(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$94(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$95(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call mill.define.Task.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$96(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$97(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$98(millbuild.NutShell.build$HasChiselTests$test$,scala.collection.immutable.Seq)mill.define.Command": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call mainargs.Leftover#value()scala.collection.immutable.Seq",
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call java.lang.String.<clinit>()void",
        "call mainargs.Leftover.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object": [
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99(millbuild.NutShell.build$HasChiselTests$test$)boolean",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99(millbuild.NutShell.build$HasChiselTests$test$)boolean": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path": [
        "call os.Path$.<clinit>()void",
        "call os.Path$#apply(java.lang.Object,os.PathConvertible)os.Path",
        "call os.PathConvertible$StringConvertible$.<clinit>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build$.$deserializeLambda$(java.lang.invoke.SerializedLambda)java.lang.Object": [
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$99$adapted(millbuild.NutShell.build$HasChiselTests$test$)java.lang.Object",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$91(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$89(millbuild.NutShell.build$HasChiselTests$test$)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$36(mill.scalalib.SbtModule$SbtModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$30$adapted(mill.scalalib.MavenModule$MavenModuleTests)java.lang.Object",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$38(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$131(millbuild.NutShell.build$difftest$)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$46$adapted(mill.scalalib.SbtModule$SbtModuleTests)java.lang.Object",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$119$adapted(millbuild.NutShell.build$chiselModule$)java.lang.Object",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$55()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$8(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$19(mill.scalalib.MavenModule$MavenModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$5(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$18()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$58(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$13$adapted(mill.scalalib.JavaModule$JavaModuleTests)java.lang.Object",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$88()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$35()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$1()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$22(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$114(millbuild.NutShell.build$chiselModule$)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$56(mill.scalalib.ScalaModule$ScalaTests)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$111(millbuild.NutShell.build$chiselModule$)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$41(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$75()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$94(millbuild.NutShell.build$HasChiselTests$test$)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$2(mill.scalalib.JavaModule$JavaModuleTests)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$66$adapted(mill.scalalib.ScalaModule$ScalaTests)java.lang.Object",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$109(millbuild.NutShell.build$chiselModule$)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$108()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$126(millbuild.NutShell.build$difftest$)mill.scalalib.IvyDepsTreeArgs",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$128(millbuild.NutShell.build$difftest$)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$61(mill.scalalib.ScalaModule$ScalaTests)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBuildRootModuleInfo$1(java.lang.String)os.Path",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$125()scala.Tuple2",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$25(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Task",
        "call millbuild.NutShell.MiscInfo_build$.$anonfun$millBaseModuleInfo$136$adapted(millbuild.NutShell.build$difftest$)java.lang.Object"
    ],
    "def millbuild.NutShell.MiscInfo_build$.<clinit>()void": [
        "call millbuild.NutShell.MiscInfo_build$!<init>()void"
    ],
    "def millbuild.NutShell.MiscInfo_build.millBaseModuleInfo()mill.main.RootModule$Info": [
        "call millbuild.NutShell.MiscInfo_build$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info"
    ],
    "def millbuild.NutShell.MiscInfo_build.millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info": [
        "call millbuild.NutShell.MiscInfo_build$.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$#millBuildRootModuleInfo()mill.runner.MillBuildRootModule$Info"
    ],
    "def millbuild.NutShell.build#<init>()void": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call mill.define.Segments$#labels(scala.collection.immutable.Seq)mill.define.Segments",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.define.Segments$.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call sourcecode.Line!<init>(int)void",
        "call sourcecode.File.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$.<clinit>()void",
        "call sourcecode.Line.<clinit>()void",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call mill.main.RootModule$Foreign!<init>(scala.Option,mill.main.RootModule$Info,sourcecode.Enclosing,sourcecode.Line,sourcecode.File)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call java.lang.String.<clinit>()void",
        "call mill.main.RootModule$Foreign.<clinit>()void",
        "call millbuild.NutShell.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info",
        "call scala.Some!<init>(java.lang.Object)void"
    ],
    "def millbuild.NutShell.build#chiselModule$lzycompute$1()void": [
        "call millbuild.NutShell.build$chiselModule$!<init>(millbuild.NutShell.build)void",
        "call millbuild.NutShell.build$chiselModule$.<clinit>()void"
    ],
    "def millbuild.NutShell.build#chiselModule()millbuild.NutShell.build$chiselModule$": [
        "call millbuild.NutShell.build!chiselModule$lzycompute$1()void"
    ],
    "def millbuild.NutShell.build#difftest$lzycompute$1()void": [
        "call millbuild.NutShell.build$difftest$!<init>(millbuild.NutShell.build)void",
        "call millbuild.NutShell.build$difftest$.<clinit>()void"
    ],
    "def millbuild.NutShell.build#difftest()millbuild.NutShell.build$difftest$": [
        "call millbuild.NutShell.build!difftest$lzycompute$1()void"
    ],
    "def millbuild.NutShell.build#ivys$lzycompute$1()void": [
        "call millbuild.NutShell.build$ivys$.<clinit>()void",
        "call millbuild.NutShell.build$ivys$!<init>(millbuild.NutShell.build)void"
    ],
    "def millbuild.NutShell.build#ivys()millbuild.NutShell.build$ivys$": [
        "call millbuild.NutShell.build!ivys$lzycompute$1()void"
    ],
    "def millbuild.NutShell.build$#<init>()void": [
        "call millbuild.NutShell.build!<init>()void",
        "call millbuild.NutShell.build.<clinit>()void"
    ],
    "def millbuild.NutShell.build$.<clinit>()void": [
        "call millbuild.NutShell.build$!<init>()void"
    ],
    "def millbuild.NutShell.build$CommonModule#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build": [],
    "def millbuild.NutShell.build$CommonModule#scalaVersion()mill.define.Target": [
        "call mill.moduledefs.Cacher.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.moduledefs.Cacher#cachedTarget(scala.Function0,sourcecode.Enclosing)java.lang.Object",
        "call mill.define.Target.<clinit>()void"
    ],
    "def millbuild.NutShell.build$CommonModule#scalacOptions()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl",
        "call mill.moduledefs.Cacher.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.moduledefs.Cacher#cachedTarget(scala.Function0,sourcecode.Enclosing)java.lang.Object",
        "call mill.define.Target.<clinit>()void"
    ],
    "def millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl": [
        "call upickle.default$#ReadWriter()upickle.core.Types$ReadWriter$",
        "call upickle.default$.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule#millModuleExternal()mill.define.Ctx$External",
        "call millbuild.NutShell.build$CommonModule#millModuleShared()mill.define.Ctx$Foreign",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.define.TargetImpl!<init>(mill.define.Task,mill.define.Ctx,upickle.core.Types$ReadWriter,scala.Option)void",
        "call mill.define.Caller.<clinit>()void",
        "call upickle.core.Types$ReadWriter$#join(upickle.core.Types$Reader,upickle.core.Types$Writer)upickle.core.Types$ReadWriter",
        "call scala.Some.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.define.TargetImpl.<clinit>()void",
        "call sourcecode.File.<clinit>()void",
        "call upickle.default$#StringWriter()upickle.core.Types$Writer",
        "call sourcecode.Line.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call upickle.default$#StringReader()upickle.core.Types$Reader",
        "call mill.define.Target$#traverseCtx(scala.collection.immutable.Seq,scala.Function2)mill.define.Task",
        "call mill.define.Target$.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$2(millbuild.NutShell.build$CommonModule,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call millbuild.NutShell.build$CommonModule#millModuleBasePath()mill.define.Ctx$BasePath",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call upickle.core.Types$ReadWriter$.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean",
        "call scala.Some!<init>(java.lang.Object)void",
        "call millbuild.NutShell.build$CommonModule#millModuleSegments()mill.define.Segments"
    ],
    "def millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$2(millbuild.NutShell.build$CommonModule,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$3(millbuild.NutShell.build$CommonModule)java.lang.String",
        "call mill.api.Result$.<clinit>()void",
        "call mill.api.Result$#create(scala.Function0)mill.api.Result"
    ],
    "def millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$3(millbuild.NutShell.build$CommonModule)java.lang.String": [
        "call millbuild.NutShell.build$CommonModule#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build",
        "call millbuild.NutShell.build$ivys$.<clinit>()void",
        "call millbuild.NutShell.build.<clinit>()void",
        "call millbuild.NutShell.build#ivys()millbuild.NutShell.build$ivys$",
        "call millbuild.NutShell.build$ivys$#scala()java.lang.String"
    ],
    "def millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl": [
        "call upickle.default$#ReadWriter()upickle.core.Types$ReadWriter$",
        "call upickle.default$.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule#millModuleExternal()mill.define.Ctx$External",
        "call scala.collection.immutable.Seq$.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule#millModuleShared()mill.define.Ctx$Foreign",
        "call upickle.default$#SeqLikeWriter(upickle.core.Types$Writer)upickle.core.Types$Writer",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.define.TargetImpl!<init>(mill.define.Task,mill.define.Ctx,upickle.core.Types$ReadWriter,scala.Option)void",
        "call mill.define.Caller.<clinit>()void",
        "call scala.collection.immutable.Seq$#iterableFactory()scala.collection.Factory",
        "call upickle.core.Types$ReadWriter$#join(upickle.core.Types$Reader,upickle.core.Types$Writer)upickle.core.Types$ReadWriter",
        "call scala.Some.<clinit>()void",
        "call upickle.default$#SeqLikeReader(upickle.core.Types$Reader,scala.collection.Factory)upickle.core.Types$Reader",
        "call mill.define.Ctx$.<clinit>()void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.define.TargetImpl.<clinit>()void",
        "call sourcecode.File.<clinit>()void",
        "call upickle.default$#StringWriter()upickle.core.Types$Writer",
        "call sourcecode.Line.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call upickle.default$#StringReader()upickle.core.Types$Reader",
        "call mill.define.Target$#traverseCtx(scala.collection.immutable.Seq,scala.Function2)mill.define.Task",
        "call mill.define.Target$.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule#millModuleBasePath()mill.define.Ctx$BasePath",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call upickle.core.Types$ReadWriter$.<clinit>()void",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean",
        "call scala.Some!<init>(java.lang.Object)void",
        "call millbuild.NutShell.build$CommonModule#millModuleSegments()mill.define.Segments",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$2(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result"
    ],
    "def millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$2(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "call mill.api.Result$.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$3()scala.collection.immutable.Seq",
        "call mill.api.Result$#create(scala.Function0)mill.api.Result"
    ],
    "def millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$3()scala.collection.immutable.Seq": [
        "call scala.collection.immutable.$colon$colon#$plus$plus(scala.collection.IterableOnce)java.lang.Object",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void"
    ],
    "def millbuild.NutShell.build$CommonModule.$deserializeLambda$(java.lang.invoke.SerializedLambda)java.lang.Object": [
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$3(millbuild.NutShell.build$CommonModule)java.lang.String",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$1(millbuild.NutShell.build$CommonModule)mill.define.TargetImpl",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalaVersion$2(millbuild.NutShell.build$CommonModule,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$3()scala.collection.immutable.Seq",
        "call millbuild.NutShell.build$CommonModule.$anonfun$scalacOptions$2(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result"
    ],
    "def millbuild.NutShell.build$CommonModule.$init$(millbuild.NutShell.build$CommonModule)void": [],
    "def millbuild.NutShell.build$CommonModule.scalaVersion$(millbuild.NutShell.build$CommonModule)mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule!scalaVersion()mill.define.Target"
    ],
    "def millbuild.NutShell.build$CommonModule.scalacOptions$(millbuild.NutShell.build$CommonModule)mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule!scalacOptions()mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChisel3#ivyDeps()mill.define.Target": [
        "call mill.moduledefs.Cacher.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl",
        "call mill.moduledefs.Cacher#cachedTarget(scala.Function0,sourcecode.Enclosing)java.lang.Object",
        "call mill.define.Target.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build": [],
    "def millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task": [],
    "def millbuild.NutShell.build$HasChisel3#repositoriesTask()mill.define.Task": [
        "call millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$1(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call mill.package$#T()mill.define.Target$",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task",
        "call mill.define.Target$#traverseCtx(scala.collection.immutable.Seq,scala.Function2)mill.define.Task",
        "call mill.define.Target$.<clinit>()void",
        "call mill.package$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChisel3#scalacPluginIvyDeps()mill.define.Target": [
        "call mill.moduledefs.Cacher.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.moduledefs.Cacher#cachedTarget(scala.Function0,sourcecode.Enclosing)java.lang.Object",
        "call mill.define.Target.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl"
    ],
    "def millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl": [
        "call millbuild.NutShell.build$HasChisel3#millModuleSegments()mill.define.Segments",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.define.TargetImpl!<init>(mill.define.Task,mill.define.Ctx,upickle.core.Types$ReadWriter,scala.Option)void",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call mill.api.AggWrapper$Agg$#jsonFormat(upickle.core.Types$ReadWriter)upickle.core.Types$ReadWriter",
        "call mill.define.Caller.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.define.TargetImpl.<clinit>()void",
        "call sourcecode.File.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3#millModuleShared()mill.define.Ctx$Foreign",
        "call millbuild.NutShell.build$HasChisel3#millModuleBasePath()mill.define.Ctx$BasePath",
        "call sourcecode.Line.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.api.Loose$.<clinit>()void",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call mill.api.AggWrapper$Agg$.<clinit>()void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call millbuild.NutShell.build$HasChisel3#millModuleExternal()mill.define.Ctx$External",
        "call mill.define.Target$#traverseCtx(scala.collection.immutable.Seq,scala.Function2)mill.define.Task",
        "call mill.api.Loose$#Agg()mill.api.AggWrapper$Agg$",
        "call mill.scalalib.Dep$#rw()upickle.core.Types$ReadWriter",
        "call mill.define.Target$.<clinit>()void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean",
        "call mill.scalalib.Dep$.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void"
    ],
    "def millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "call mill.api.Result$.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg",
        "call mill.api.Result$#create(scala.Function0)mill.api.Result"
    ],
    "def millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call millbuild.NutShell.build$ivys$.<clinit>()void",
        "call millbuild.NutShell.build.<clinit>()void",
        "call mill.scalalib.Dep.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build",
        "call millbuild.NutShell.build#ivys()millbuild.NutShell.build$ivys$",
        "call mill.package$#Agg()mill.api.AggWrapper$Agg$",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call millbuild.NutShell.build$ivys$#chisel3()mill.scalalib.Dep",
        "call mill.api.AggWrapper$Agg$.<clinit>()void",
        "call mill.api.AggWrapper$Agg$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call mill.api.AggWrapper$Agg.<clinit>()void",
        "call mill.package$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$1(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "call millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$2(scala.collection.immutable.Seq)scala.collection.immutable.Seq",
        "call mill.api.Result$.<clinit>()void",
        "call mill.api.Result$#create(scala.Function0)mill.api.Result"
    ],
    "def millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$2(scala.collection.immutable.Seq)scala.collection.immutable.Seq": [
        "call scala.collection.immutable.Seq#apply(int)java.lang.Object",
        "call scala.collection.immutable.Seq#$plus$plus(scala.collection.IterableOnce)java.lang.Object",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call coursier.maven.MavenRepository$#apply(java.lang.String)coursier.maven.MavenRepository",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call coursier.maven.MavenRepository$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl": [
        "call millbuild.NutShell.build$HasChisel3#millModuleSegments()mill.define.Segments",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.define.TargetImpl!<init>(mill.define.Task,mill.define.Ctx,upickle.core.Types$ReadWriter,scala.Option)void",
        "call mill.api.AggWrapper$Agg$#jsonFormat(upickle.core.Types$ReadWriter)upickle.core.Types$ReadWriter",
        "call mill.define.Caller.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.define.TargetImpl.<clinit>()void",
        "call sourcecode.File.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3#millModuleShared()mill.define.Ctx$Foreign",
        "call millbuild.NutShell.build$HasChisel3#millModuleBasePath()mill.define.Ctx$BasePath",
        "call sourcecode.Line.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.api.Loose$.<clinit>()void",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call mill.api.AggWrapper$Agg$.<clinit>()void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call millbuild.NutShell.build$HasChisel3#millModuleExternal()mill.define.Ctx$External",
        "call mill.define.Target$#traverseCtx(scala.collection.immutable.Seq,scala.Function2)mill.define.Task",
        "call mill.api.Loose$#Agg()mill.api.AggWrapper$Agg$",
        "call mill.scalalib.Dep$#rw()upickle.core.Types$ReadWriter",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call mill.define.Target$.<clinit>()void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean",
        "call mill.scalalib.Dep$.<clinit>()void",
        "call scala.Some!<init>(java.lang.Object)void"
    ],
    "def millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg",
        "call mill.api.Result$.<clinit>()void",
        "call mill.api.Result$#create(scala.Function0)mill.api.Result"
    ],
    "def millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg": [
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call millbuild.NutShell.build$ivys$.<clinit>()void",
        "call millbuild.NutShell.build.<clinit>()void",
        "call mill.scalalib.Dep.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build",
        "call millbuild.NutShell.build$ivys$#chisel3Plugin()mill.scalalib.Dep",
        "call millbuild.NutShell.build#ivys()millbuild.NutShell.build$ivys$",
        "call mill.package$#Agg()mill.api.AggWrapper$Agg$",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call mill.api.AggWrapper$Agg$.<clinit>()void",
        "call mill.api.AggWrapper$Agg$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call mill.api.AggWrapper$Agg.<clinit>()void",
        "call mill.package$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChisel3.$deserializeLambda$(java.lang.invoke.SerializedLambda)java.lang.Object": [
        "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$1(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$repositoriesTask$2(scala.collection.immutable.Seq)scala.collection.immutable.Seq",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$2(millbuild.NutShell.build$HasChisel3,scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$ivyDeps$3(millbuild.NutShell.build$HasChisel3)mill.api.AggWrapper$Agg",
        "call millbuild.NutShell.build$HasChisel3.$anonfun$scalacPluginIvyDeps$1(millbuild.NutShell.build$HasChisel3)mill.define.TargetImpl"
    ],
    "def millbuild.NutShell.build$HasChisel3.$init$(millbuild.NutShell.build$HasChisel3)void": [],
    "def millbuild.NutShell.build$HasChisel3.ivyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3!ivyDeps()mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChisel3.repositoriesTask$(millbuild.NutShell.build$HasChisel3)mill.define.Task": [
        "call millbuild.NutShell.build$HasChisel3!repositoriesTask()mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChisel3.scalacPluginIvyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3!scalacPluginIvyDeps()mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests#millbuild$NutShell$build$HasChiselTests$$$outer()millbuild.NutShell.build": [],
    "def millbuild.NutShell.build$HasChiselTests#test()millbuild.NutShell.build$HasChiselTests$test$": [],
    "def millbuild.NutShell.build$HasChiselTests$test$#<init>(millbuild.NutShell.build$HasChiselTests)void": [
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$JavaModuleTests$$$outer()mill.scalalib.JavaModule",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$MavenModule$MavenModuleTests$$$outer()mill.scalalib.MavenModule",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$SbtModule$SbtModuleTests$$$outer()mill.scalalib.SbtModule",
        "def millbuild.NutShell.build$HasChiselTests$test$#defaultCommandName()java.lang.String",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$ScalaTests$$$outer()mill.scalalib.ScalaModule",
        "call millbuild.NutShell.build$HasChiselTests#millModuleBasePath()mill.define.Ctx$BasePath",
        "call mill.scalalib.SbtModule$SbtModuleTests.$init$(mill.scalalib.SbtModule$SbtModuleTests)void",
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.TestModule$JavaModuleBase.<clinit>()void",
        "call mill.scalalib.WithZincWorker.$init$(mill.scalalib.WithZincWorker)void",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.$init$(mill.scalalib.MavenModule$MavenModuleTests)void",
        "call mill.scalalib.TestModule.$init$(mill.scalalib.TestModule)void",
        "call mill.define.Caller.<clinit>()void",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call mill.define.Module.$init$(mill.define.Module)void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.scalalib.GenIdeaModule.$init$(mill.scalalib.GenIdeaModule)void",
        "call sourcecode.File.<clinit>()void",
        "call mill.scalalib.WithZincWorker.<clinit>()void",
        "call mill.scalalib.TestModule$ScalaTest.$init$(mill.scalalib.TestModule$ScalaTest)void",
        "call mill.scalalib.CoursierModule.$init$(mill.scalalib.CoursierModule)void",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call sourcecode.Line.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.$init$(mill.scalalib.bsp.BspModule)void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests#millModuleSegments()mill.define.Segments",
        "call mill.scalalib.ScalaModule$ScalaTests.$init$(mill.scalalib.ScalaModule$ScalaTests)void",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.define.Module$BaseClass!<init>(mill.define.Ctx)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mill.define.Module.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.$init$(mill.scalalib.ScalaModule)void",
        "call mill.scalalib.TestModule$ScalaTest.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests.<clinit>()void",
        "call mill.scalalib.OfflineSupportModule.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests#millModuleShared()mill.define.Ctx$Foreign",
        "call mill.define.Module$BaseClass.<clinit>()void",
        "call mill.scalalib.TestModule$JavaModuleBase.$init$(mill.scalalib.TestModule$JavaModuleBase)void",
        "call mill.scalalib.TestModule.<clinit>()void",
        "call mill.scalalib.TestModule$ScalaModuleBase.<clinit>()void",
        "call mill.scalalib.OfflineSupportModule.$init$(mill.scalalib.OfflineSupportModule)void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call mill.scalalib.TestModule$ScalaModuleBase.$init$(mill.scalalib.TestModule$ScalaModuleBase)void",
        "call mill.scalalib.JavaModule.$init$(mill.scalalib.JavaModule)void",
        "call mill.scalalib.SemanticDbJavaModule.$init$(mill.scalalib.SemanticDbJavaModule)void",
        "call mill.scalalib.RunModule.$init$(mill.scalalib.RunModule)void",
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests#millModuleExternal()mill.define.Ctx$External",
        "call mill.scalalib.JavaModule$JavaModuleTests.$init$(mill.scalalib.JavaModule$JavaModuleTests)void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#allIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.allIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#allLocalMainClasses()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.allLocalMainClasses$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#allScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#allSourceFiles()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allSourceFiles$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#allSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.allSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ammoniteMainClass()mill.define.Task": [
        "call mill.scalalib.ScalaModule.ammoniteMainClass$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ammoniteReplClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteReplClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ammoniteVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#artifactId()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactId$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#artifactName()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactName$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#artifactNameParts()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactNameParts$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#artifactScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#artifactSuffix()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactSuffix$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#assembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#assemblyRules()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assemblyRules$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bindDependency()mill.define.Task": [
        "call mill.scalalib.CoursierModule.bindDependency$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.ScalaModule.bspBuildTarget$(mill.scalalib.ScalaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTargetData()mill.define.Task": [
        "call mill.scalalib.ScalaModule.bspBuildTargetData$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspCompileClassesPath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.bspCompileClassesPath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspCompiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.bspCompiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspDisplayName()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspDisplayName0()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName0$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspLocalRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspTransitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.bspTransitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#bspTransitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspTransitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#compile()mill.define.Target": [
        "call mill.scalalib.ScalaModule.compile$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#compileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#compileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#compileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#compileModuleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#compileResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#compiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.compiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#console()mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#consoleScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.consoleScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#coursierCacheCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.coursierCacheCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#crossFullScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.crossFullScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#defaultCommandName()java.lang.String": [
        "call mill.scalalib.TestModule.defaultCommandName$(mill.scalalib.TestModule)java.lang.String",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#defaultResolver()mill.define.Task": [
        "call mill.scalalib.CoursierModule.defaultResolver$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#discoveredTestClasses()mill.define.Target": [
        "call mill.scalalib.TestModule.discoveredTestClasses$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.doRunBackground$(mill.scalalib.JavaModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#docJar()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docJar$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#docJarUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docJarUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#docResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#docSources()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docSources$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#finalMainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#finalMainClassOpt()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClassOpt$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#forkArgs()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkArgs$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#forkEnv()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkEnv$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkWorkingDir$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#generatedSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.generatedSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#hierarchyChecks()void": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.hierarchyChecks$(mill.scalalib.JavaModule$JavaModuleTests)void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ideaCompileOutput()mill.define.Target": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaCompileOutput$(mill.scalalib.GenIdeaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ideaConfigFiles(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaConfigFiles$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ideaJavaModuleFacets(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaJavaModuleFacets$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#intellijModulePath()os.Path": [
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void",
        "call mill.scalalib.MavenModule$MavenModuleTests.intellijModulePath$(mill.scalalib.MavenModule$MavenModuleTests)os.Path"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ivyDeps()mill.define.Target": [
        "call sourcecode.Enclosing.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$4(millbuild.NutShell.build$HasChiselTests$test$)mill.define.TargetImpl",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.define.Target.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#cachedTarget(scala.Function0,sourcecode.Enclosing)java.lang.Object"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.ivyDepsTree$default$1$(mill.scalalib.JavaModule)mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#jar()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.jar$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#javacOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.javacOptions$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#javadocOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.javadocOptions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#launcher()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.launcher$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#localClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#localCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.localCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#localRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.mandatoryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mandatoryScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule$ScalaTests.mandatoryScalacOptions$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#manifest()mill.define.Target": [
        "call mill.scalalib.ScalaModule.manifest$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mapDependencies()mill.define.Task": [
        "call mill.scalalib.ScalaModule.mapDependencies$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "call mill.define.Module.mill$define$Module$$millModuleDirectChildrenImpl$(mill.define.Module)scala.collection.immutable.Seq",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$HasChiselTests$test$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$HasChiselTests$test$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$HasChiselTests$test$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.bsp.BspModule.bspBuildTarget$(mill.scalalib.bsp.BspModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.doRunBackground$(mill.scalalib.RunModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$forkArgs()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkArgs$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$forkEnv()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkEnv$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkWorkingDir$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$localRunClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.localRunClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.OfflineSupportModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundLogToConsole$(mill.scalalib.RunModule)boolean"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$runClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.RunModule.runUseArgsFile$(mill.scalalib.RunModule)mill.define.Target",
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.WithZincWorker.zincWorker$(mill.scalalib.WithZincWorker)mill.define.ModuleRef",
        "call mill.scalalib.WithZincWorker.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$JavaModuleTests$$$outer()mill.scalalib.JavaModule": [],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$MavenModule$MavenModuleTests$$$outer()mill.scalalib.MavenModule": [],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$SbtModule$SbtModuleTests$$$outer()mill.scalalib.SbtModule": [],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.TestModule.<clinit>()void",
        "call mill.scalalib.TestModule.bspBuildTarget$(mill.scalalib.TestModule)mill.scalalib.bsp.BspBuildTarget"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$$super$mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mandatoryIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$$super$manifest()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.manifest$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task": [
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.mapDependencies$(mill.scalalib.CoursierModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$$super$zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$ScalaTests$$$outer()mill.scalalib.ScalaModule": [],
    "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$TestModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.JavaModule.bspBuildTarget$(mill.scalalib.JavaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#millInternal$lzycompute$1()void": [
        "call mill.define.Module$millInternal$!<init>(mill.define.Module)void",
        "call mill.define.Module$millInternal$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#millInternal()mill.define.Module$millInternal$": [
        "call millbuild.NutShell.build$HasChiselTests$test$!millInternal$lzycompute$1()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#millModuleBasePath()mill.define.Ctx$BasePath": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleBasePath$(mill.define.Module)mill.define.Ctx$BasePath"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#millModuleDirectChildren()scala.collection.immutable.Seq": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleDirectChildren$(mill.define.Module)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#millModuleExternal()mill.define.Ctx$External": [
        "call mill.define.Module.millModuleExternal$(mill.define.Module)mill.define.Ctx$External",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#millModuleSegments()mill.define.Segments": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleSegments$(mill.define.Module)mill.define.Segments"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#millModuleShared()mill.define.Ctx$Foreign": [
        "call mill.define.Module.millModuleShared$(mill.define.Module)mill.define.Ctx$Foreign",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#millSourcePath()os.Path": [
        "call mill.scalalib.MavenModule$MavenModuleTests.millSourcePath$(mill.scalalib.MavenModule$MavenModuleTests)os.Path",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#moduleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.moduleDeps$(mill.scalalib.JavaModule$JavaModuleTests)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#moduleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#platformSuffix()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.platformSuffix$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#prependShellScript()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.prependShellScript$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.printDepsTree$(mill.scalalib.JavaModule,boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#recursiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.recursiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#repositoriesTask()mill.define.Task": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.repositoriesTask$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolutionCustomizer()mill.define.Task": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.resolutionCustomizer$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolveCoursierDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolveCoursierDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolveDeps$default$2()boolean": [
        "call mill.scalalib.CoursierModule.resolveDeps$default$2$(mill.scalalib.CoursierModule)boolean",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolveDeps(mill.define.Task,boolean)mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolveDeps$(mill.scalalib.CoursierModule,mill.define.Task,boolean)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolvePublishDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolvePublishDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolvedAmmoniteReplIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.resolvedAmmoniteReplIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolvedIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolvedRunIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedRunIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resolvedSemanticDbJavaPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.resolvedSemanticDbJavaPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#resources()mill.define.Target": [
        "call mill.scalalib.MavenModule$MavenModuleTests.resources$(mill.scalalib.MavenModule$MavenModuleTests)mill.define.Target",
        "call mill.scalalib.MavenModule$MavenModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.run$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runBackgroundLogToConsole$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runBackgroundTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runForkedTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runLocal$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runLocalTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.runUseArgsFile$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalaCompilerClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaCompilerClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalaDocClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalaDocOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalaDocPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalaDocPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalaLibraryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaLibraryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalaOrganization()mill.define.Target": [
        "call mill.scalalib.ScalaModule$ScalaTests.scalaOrganization$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void",
        "call mill.scalalib.ScalaModule$ScalaTests.scalaVersion$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule$ScalaTests.scalacOptions$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalacPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule$ScalaTests.scalacPluginClasspath$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#scalacPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule$ScalaTests.scalacPluginIvyDeps$(mill.scalalib.ScalaModule$ScalaTests)mill.define.Target",
        "call mill.scalalib.ScalaModule$ScalaTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#semanticDbData()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbData$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#semanticDbEnablePluginScalacOptions()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbEnablePluginScalacOptions$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#semanticDbJavaVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbJavaVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#semanticDbPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#semanticDbPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#semanticDbScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#semanticDbVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.showModuleDeps$default$1$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps(boolean)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#skipIdea()boolean": [
        "call mill.scalalib.JavaModule$JavaModuleTests.skipIdea$(mill.scalalib.JavaModule$JavaModuleTests)boolean",
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#sourceJar()mill.define.Target": [
        "call mill.scalalib.JavaModule.sourceJar$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#sources()mill.define.Target": [
        "call mill.scalalib.SbtModule$SbtModuleTests.sources$(mill.scalalib.SbtModule$SbtModuleTests)mill.define.Target",
        "call mill.scalalib.SbtModule$SbtModuleTests.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#test(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testCached()mill.define.Target": [
        "call mill.scalalib.TestModule.testCached$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testCachedArgs()mill.define.Target": [
        "call mill.scalalib.TestModule.testCachedArgs$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testClasspath()mill.define.Target": [
        "call mill.scalalib.TestModule.testClasspath$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testFramework()mill.define.Target": [
        "call mill.scalalib.TestModule$ScalaTest.testFramework$(mill.scalalib.TestModule$ScalaTest)mill.define.Target",
        "call mill.scalalib.TestModule$ScalaTest.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testLocal(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testOnly(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testReportXml()mill.define.Target": [
        "call mill.scalalib.TestModule.testReportXml$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.TestModule.testTask$(mill.scalalib.TestModule,mill.define.Task,mill.define.Task)mill.define.Task",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#testUseArgsFile()mill.define.Target": [
        "call mill.scalalib.TestModule.<clinit>()void",
        "call mill.scalalib.TestModule.testUseArgsFile$(mill.scalalib.TestModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#toString()java.lang.String": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.toString$(mill.define.Module)java.lang.String"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#transitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#transitiveCompileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.transitiveCompileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#transitiveIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#transitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveModuleCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#transitiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.transitiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#unmanagedClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.unmanagedClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#upstreamAssembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#upstreamAssembly2()mill.define.Target": [
        "call mill.scalalib.JavaModule.upstreamAssembly2$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#upstreamAssemblyClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssemblyClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#upstreamCompileOutput()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamCompileOutput$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#zincIncrementalCompilation()mill.define.Target": [
        "call mill.scalalib.JavaModule.zincIncrementalCompilation$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#zincReportCachedProblems()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincReportCachedProblems$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$#zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.JavaModule$JavaModuleTests.<clinit>()void",
        "call mill.scalalib.JavaModule$JavaModuleTests.zincWorker$(mill.scalalib.JavaModule$JavaModuleTests)mill.define.ModuleRef"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$4(millbuild.NutShell.build$HasChiselTests$test$)mill.define.TargetImpl": [
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.define.TargetImpl!<init>(mill.define.Task,mill.define.Ctx,upickle.core.Types$ReadWriter,scala.Option)void",
        "call millbuild.NutShell.build$HasChiselTests$test$#millModuleShared()mill.define.Ctx$Foreign",
        "call mill.api.AggWrapper$Agg$#jsonFormat(upickle.core.Types$ReadWriter)upickle.core.Types$ReadWriter",
        "call mill.define.Caller.<clinit>()void",
        "call scala.Some.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#millModuleSegments()mill.define.Segments",
        "call mill.define.Ctx$.<clinit>()void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.define.TargetImpl.<clinit>()void",
        "call sourcecode.File.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#millModuleBasePath()mill.define.Ctx$BasePath",
        "call sourcecode.Line.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$5(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call scala.runtime.BoxesRunTime.<clinit>()void",
        "call mill.api.Loose$.<clinit>()void",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call mill.api.AggWrapper$Agg$.<clinit>()void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.define.Target$#traverseCtx(scala.collection.immutable.Seq,scala.Function2)mill.define.Task",
        "call mill.api.Loose$#Agg()mill.api.AggWrapper$Agg$",
        "call mill.scalalib.Dep$#rw()upickle.core.Types$ReadWriter",
        "call mill.define.Target$.<clinit>()void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call scala.runtime.BoxesRunTime.boxToBoolean(boolean)java.lang.Boolean",
        "call mill.scalalib.Dep$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$#millModuleExternal()mill.define.Ctx$External",
        "call scala.Some!<init>(java.lang.Object)void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$5(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result": [
        "call mill.api.Result$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$6()mill.api.AggWrapper$Agg",
        "call mill.api.Result$#create(scala.Function0)mill.api.Result"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$6()mill.api.AggWrapper$Agg": [
        "call mill.scalalib.package$DepSyntax.<clinit>()void",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call mill.scalalib.package$DepSyntax#ivy(scala.collection.immutable.Seq)mill.scalalib.Dep",
        "call mill.scalalib.Dep.<clinit>()void",
        "call mill.package$#Agg()mill.api.AggWrapper$Agg$",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mill.api.AggWrapper$Agg$.<clinit>()void",
        "call mill.scalalib.package$#DepSyntax(scala.StringContext)mill.scalalib.package$DepSyntax",
        "call java.lang.String.<clinit>()void",
        "call scala.StringContext.<clinit>()void",
        "call mill.api.AggWrapper$Agg$#apply(scala.collection.immutable.Seq)java.lang.Object",
        "call mill.api.AggWrapper$Agg.<clinit>()void",
        "call mill.package$.<clinit>()void",
        "call scala.StringContext!<init>(scala.collection.immutable.Seq)void",
        "call mill.scalalib.package$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$HasChiselTests$test$.$deserializeLambda$(java.lang.invoke.SerializedLambda)java.lang.Object": [
        "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$5(scala.collection.immutable.Seq,mill.api.Ctx)mill.api.Result",
        "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$4(millbuild.NutShell.build$HasChiselTests$test$)mill.define.TargetImpl",
        "call millbuild.NutShell.build$HasChiselTests$test$.$anonfun$ivyDeps$6()mill.api.AggWrapper$Agg"
    ],
    "def millbuild.NutShell.build$HasChiselTests.$init$(millbuild.NutShell.build$HasChiselTests)void": [],
    "def millbuild.NutShell.build$chiselModule$#<init>(millbuild.NutShell.build)void": [
        "def millbuild.NutShell.build$chiselModule$#defaultCommandName()java.lang.String",
        "def millbuild.NutShell.build$chiselModule$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build",
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call mill.scalalib.RunModule.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests.$init$(millbuild.NutShell.build$HasChiselTests)void",
        "call mill.scalalib.TestModule$JavaModuleBase.<clinit>()void",
        "call mill.scalalib.WithZincWorker.$init$(mill.scalalib.WithZincWorker)void",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call millbuild.NutShell.build.<clinit>()void",
        "call mill.define.Caller.<clinit>()void",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.MavenModule.$init$(mill.scalalib.MavenModule)void",
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call millbuild.NutShell.build#millModuleExternal()mill.define.Ctx$External",
        "call mill.define.Module.$init$(mill.define.Module)void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.scalalib.GenIdeaModule.$init$(mill.scalalib.GenIdeaModule)void",
        "call sourcecode.File.<clinit>()void",
        "call mill.scalalib.WithZincWorker.<clinit>()void",
        "call mill.scalalib.CoursierModule.$init$(mill.scalalib.CoursierModule)void",
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call sourcecode.Line.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.$init$(mill.scalalib.bsp.BspModule)void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call millbuild.NutShell.build#millModuleBasePath()mill.define.Ctx$BasePath",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call mill.define.Module$BaseClass!<init>(mill.define.Ctx)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.define.Module.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.$init$(mill.scalalib.ScalaModule)void",
        "call millbuild.NutShell.build$HasChiselTests.<clinit>()void",
        "call mill.scalalib.OfflineSupportModule.<clinit>()void",
        "call mill.define.Module$BaseClass.<clinit>()void",
        "call millbuild.NutShell.build#millModuleShared()mill.define.Ctx$Foreign",
        "call mill.scalalib.SbtModule.$init$(mill.scalalib.SbtModule)void",
        "call mill.scalalib.TestModule$JavaModuleBase.$init$(mill.scalalib.TestModule$JavaModuleBase)void",
        "call millbuild.NutShell.build#millModuleSegments()mill.define.Segments",
        "call mill.scalalib.TestModule$ScalaModuleBase.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.$init$(millbuild.NutShell.build$CommonModule)void",
        "call mill.scalalib.OfflineSupportModule.$init$(mill.scalalib.OfflineSupportModule)void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call mill.scalalib.TestModule$ScalaModuleBase.$init$(mill.scalalib.TestModule$ScalaModuleBase)void",
        "call mill.scalalib.SbtModule.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.$init$(millbuild.NutShell.build$HasChisel3)void",
        "call mill.scalalib.JavaModule.$init$(mill.scalalib.JavaModule)void",
        "call mill.scalalib.SemanticDbJavaModule.$init$(mill.scalalib.SemanticDbJavaModule)void",
        "call mill.scalalib.RunModule.$init$(mill.scalalib.RunModule)void",
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#allIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.allIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#allLocalMainClasses()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.allLocalMainClasses$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#allScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#allSourceFiles()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allSourceFiles$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#allSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.allSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#ammoniteMainClass()mill.define.Task": [
        "call mill.scalalib.ScalaModule.ammoniteMainClass$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#ammoniteReplClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteReplClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#ammoniteVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#artifactId()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactId$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#artifactName()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactName$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#artifactNameParts()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactNameParts$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#artifactScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#artifactSuffix()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactSuffix$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#assembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#assemblyRules()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assemblyRules$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#bindDependency()mill.define.Task": [
        "call mill.scalalib.CoursierModule.bindDependency$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.ScalaModule.bspBuildTarget$(mill.scalalib.ScalaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspBuildTargetData()mill.define.Task": [
        "call mill.scalalib.ScalaModule.bspBuildTargetData$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspCompileClassesPath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.bspCompileClassesPath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspCompiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.bspCompiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspDisplayName()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspDisplayName0()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName0$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspLocalRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspTransitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.bspTransitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#bspTransitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspTransitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#compile()mill.define.Target": [
        "call mill.scalalib.ScalaModule.compile$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#compileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#compileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#compileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#compileModuleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#compileResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#compiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.compiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#console()mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#consoleScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.consoleScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#coursierCacheCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.coursierCacheCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#crossFullScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.crossFullScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#defaultCommandName()java.lang.String": [
        "call mill.scalalib.JavaModule.defaultCommandName$(mill.scalalib.JavaModule)java.lang.String",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#defaultResolver()mill.define.Task": [
        "call mill.scalalib.CoursierModule.defaultResolver$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.doRunBackground$(mill.scalalib.JavaModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.NutShell.build$chiselModule$#docJar()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docJar$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#docJarUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docJarUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#docResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#docSources()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docSources$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#finalMainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#finalMainClassOpt()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClassOpt$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#forkArgs()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkArgs$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#forkEnv()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkEnv$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkWorkingDir$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#generatedSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.generatedSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#ideaCompileOutput()mill.define.Target": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaCompileOutput$(mill.scalalib.GenIdeaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#ideaConfigFiles(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaConfigFiles$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#ideaJavaModuleFacets(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaJavaModuleFacets$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#intellijModulePath()os.Path": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.intellijModulePath$(mill.scalalib.GenIdeaModule)os.Path"
    ],
    "def millbuild.NutShell.build$chiselModule$#ivyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.ivyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.ivyDepsTree$default$1$(mill.scalalib.JavaModule)mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.NutShell.build$chiselModule$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#jar()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.jar$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#javacOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.javacOptions$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#javadocOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.javadocOptions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#launcher()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.launcher$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#localClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#localCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.localCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#localRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.mandatoryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mandatoryScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.mandatoryScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#manifest()mill.define.Target": [
        "call mill.scalalib.ScalaModule.manifest$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mapDependencies()mill.define.Task": [
        "call mill.scalalib.ScalaModule.mapDependencies$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "call mill.define.Module.mill$define$Module$$millModuleDirectChildrenImpl$(mill.define.Module)scala.collection.immutable.Seq",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$chiselModule$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$chiselModule$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$chiselModule$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.bsp.BspModule.bspBuildTarget$(mill.scalalib.bsp.BspModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.doRunBackground$(mill.scalalib.RunModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$forkArgs()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkArgs$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$forkEnv()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkEnv$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkWorkingDir$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$localRunClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.localRunClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.OfflineSupportModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundLogToConsole$(mill.scalalib.RunModule)boolean"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$runClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.RunModule.runUseArgsFile$(mill.scalalib.RunModule)mill.define.Target",
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.WithZincWorker.zincWorker$(mill.scalalib.WithZincWorker)mill.define.ModuleRef",
        "call mill.scalalib.WithZincWorker.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.JavaModule.bspBuildTarget$(mill.scalalib.JavaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$ScalaModule$$super$mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mandatoryIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$ScalaModule$$super$manifest()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.manifest$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task": [
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.mapDependencies$(mill.scalalib.CoursierModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$ScalaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#mill$scalalib$ScalaModule$$super$zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#millInternal$lzycompute$3()void": [
        "call mill.define.Module$millInternal$!<init>(mill.define.Module)void",
        "call mill.define.Module$millInternal$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#millInternal()mill.define.Module$millInternal$": [
        "call millbuild.NutShell.build$chiselModule$!millInternal$lzycompute$3()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#millModuleBasePath()mill.define.Ctx$BasePath": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleBasePath$(mill.define.Module)mill.define.Ctx$BasePath"
    ],
    "def millbuild.NutShell.build$chiselModule$#millModuleDirectChildren()scala.collection.immutable.Seq": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleDirectChildren$(mill.define.Module)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#millModuleExternal()mill.define.Ctx$External": [
        "call mill.define.Module.millModuleExternal$(mill.define.Module)mill.define.Ctx$External",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#millModuleSegments()mill.define.Segments": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleSegments$(mill.define.Module)mill.define.Segments"
    ],
    "def millbuild.NutShell.build$chiselModule$#millModuleShared()mill.define.Ctx$Foreign": [
        "call mill.define.Module.millModuleShared$(mill.define.Module)mill.define.Ctx$Foreign",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#millSourcePath()os.Path": [
        "call os.package$.<clinit>()void",
        "call os.package$#pwd()os.Path"
    ],
    "def millbuild.NutShell.build$chiselModule$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build": [],
    "def millbuild.NutShell.build$chiselModule$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build": [],
    "def millbuild.NutShell.build$chiselModule$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task": [
        "call mill.scalalib.CoursierModule.repositoriesTask$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#millbuild$NutShell$build$HasChiselTests$$$outer()millbuild.NutShell.build": [],
    "def millbuild.NutShell.build$chiselModule$#moduleDeps()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build.<clinit>()void",
        "call scala.collection.immutable.Seq#$plus$plus(scala.collection.IterableOnce)java.lang.Object",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call mill.scalalib.JavaModule.moduleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call millbuild.NutShell.build#difftest()millbuild.NutShell.build$difftest$"
    ],
    "def millbuild.NutShell.build$chiselModule$#moduleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#platformSuffix()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.platformSuffix$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#prependShellScript()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.prependShellScript$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.printDepsTree$(mill.scalalib.JavaModule,boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#recursiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.recursiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#repositoriesTask()mill.define.Task": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.repositoriesTask$(millbuild.NutShell.build$HasChisel3)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolutionCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolutionCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolveCoursierDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolveCoursierDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolveDeps$default$2()boolean": [
        "call mill.scalalib.CoursierModule.resolveDeps$default$2$(mill.scalalib.CoursierModule)boolean",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolveDeps(mill.define.Task,boolean)mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolveDeps$(mill.scalalib.CoursierModule,mill.define.Task,boolean)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolvePublishDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolvePublishDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolvedAmmoniteReplIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.resolvedAmmoniteReplIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolvedIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolvedRunIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedRunIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#resolvedSemanticDbJavaPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.resolvedSemanticDbJavaPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#resources()mill.define.Target": [
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call mill.scalalib.MavenModule.resources$(mill.scalalib.MavenModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#run$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.run$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runBackgroundLogToConsole$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.NutShell.build$chiselModule$#runBackgroundTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#runClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#runForkedTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#runIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#runLocal$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runLocal$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#runLocalTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$chiselModule$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalaCompilerClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaCompilerClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalaDocClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalaDocOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalaDocPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalaDocPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalaLibraryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaLibraryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalaOrganization()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaOrganization$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalaVersion()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalaVersion$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalacOptions()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalacOptions$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalacPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalacPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#scalacPluginIvyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.scalacPluginIvyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#semanticDbData()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbData$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#semanticDbEnablePluginScalacOptions()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbEnablePluginScalacOptions$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#semanticDbJavaVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbJavaVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#semanticDbPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#semanticDbPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#semanticDbScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#semanticDbVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#showModuleDeps$default$1()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.showModuleDeps$default$1$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.NutShell.build$chiselModule$#showModuleDeps(boolean)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#skipIdea()boolean": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.skipIdea$(mill.scalalib.GenIdeaModule)boolean"
    ],
    "def millbuild.NutShell.build$chiselModule$#sourceJar()mill.define.Target": [
        "call mill.scalalib.JavaModule.sourceJar$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#sources()mill.define.Target": [
        "call mill.scalalib.SbtModule.sources$(mill.scalalib.SbtModule)mill.define.Target",
        "call mill.scalalib.SbtModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#test$lzycompute$1()void": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$!<init>(millbuild.NutShell.build$HasChiselTests)void"
    ],
    "def millbuild.NutShell.build$chiselModule$#test()millbuild.NutShell.build$HasChiselTests$test$": [
        "call millbuild.NutShell.build$chiselModule$!test$lzycompute$1()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#toString()java.lang.String": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.toString$(mill.define.Module)java.lang.String"
    ],
    "def millbuild.NutShell.build$chiselModule$#transitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#transitiveCompileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.transitiveCompileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#transitiveIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#transitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveModuleCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$chiselModule$#transitiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.transitiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#unmanagedClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.unmanagedClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#upstreamAssembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#upstreamAssembly2()mill.define.Target": [
        "call mill.scalalib.JavaModule.upstreamAssembly2$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#upstreamAssemblyClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssemblyClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#upstreamCompileOutput()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamCompileOutput$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#zincIncrementalCompilation()mill.define.Target": [
        "call mill.scalalib.JavaModule.zincIncrementalCompilation$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$chiselModule$#zincReportCachedProblems()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincReportCachedProblems$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$chiselModule$#zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.JavaModule.zincWorker$(mill.scalalib.JavaModule)mill.define.ModuleRef",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#<init>(millbuild.NutShell.build)void": [
        "def millbuild.NutShell.build$difftest$#defaultCommandName()java.lang.String",
        "def millbuild.NutShell.build$difftest$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build",
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.TestModule$JavaModuleBase.<clinit>()void",
        "call mill.scalalib.WithZincWorker.$init$(mill.scalalib.WithZincWorker)void",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call millbuild.NutShell.build.<clinit>()void",
        "call mill.define.Caller.<clinit>()void",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.MavenModule.$init$(mill.scalalib.MavenModule)void",
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call millbuild.NutShell.build#millModuleExternal()mill.define.Ctx$External",
        "call mill.define.Module.$init$(mill.define.Module)void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.scalalib.GenIdeaModule.$init$(mill.scalalib.GenIdeaModule)void",
        "call sourcecode.File.<clinit>()void",
        "call mill.scalalib.WithZincWorker.<clinit>()void",
        "call mill.scalalib.CoursierModule.$init$(mill.scalalib.CoursierModule)void",
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call sourcecode.Line.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.$init$(mill.scalalib.bsp.BspModule)void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call millbuild.NutShell.build#millModuleBasePath()mill.define.Ctx$BasePath",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call mill.define.Module$BaseClass!<init>(mill.define.Ctx)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.define.Module.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.$init$(mill.scalalib.ScalaModule)void",
        "call mill.scalalib.OfflineSupportModule.<clinit>()void",
        "call mill.define.Module$BaseClass.<clinit>()void",
        "call millbuild.NutShell.build#millModuleShared()mill.define.Ctx$Foreign",
        "call mill.scalalib.SbtModule.$init$(mill.scalalib.SbtModule)void",
        "call mill.scalalib.TestModule$JavaModuleBase.$init$(mill.scalalib.TestModule$JavaModuleBase)void",
        "call millbuild.NutShell.build#millModuleSegments()mill.define.Segments",
        "call mill.scalalib.TestModule$ScalaModuleBase.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.$init$(millbuild.NutShell.build$CommonModule)void",
        "call mill.scalalib.OfflineSupportModule.$init$(mill.scalalib.OfflineSupportModule)void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call mill.scalalib.TestModule$ScalaModuleBase.$init$(mill.scalalib.TestModule$ScalaModuleBase)void",
        "call mill.scalalib.SbtModule.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.$init$(millbuild.NutShell.build$HasChisel3)void",
        "call mill.scalalib.JavaModule.$init$(mill.scalalib.JavaModule)void",
        "call mill.scalalib.SemanticDbJavaModule.$init$(mill.scalalib.SemanticDbJavaModule)void",
        "call mill.scalalib.RunModule.$init$(mill.scalalib.RunModule)void",
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#allIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.allIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#allLocalMainClasses()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.allLocalMainClasses$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#allScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#allSourceFiles()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allSourceFiles$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#allSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.allSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#ammoniteMainClass()mill.define.Task": [
        "call mill.scalalib.ScalaModule.ammoniteMainClass$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#ammoniteReplClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteReplClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#ammoniteVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#artifactId()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactId$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#artifactName()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactName$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#artifactNameParts()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactNameParts$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#artifactScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#artifactSuffix()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactSuffix$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#assembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#assemblyRules()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assemblyRules$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#bindDependency()mill.define.Task": [
        "call mill.scalalib.CoursierModule.bindDependency$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.ScalaModule.bspBuildTarget$(mill.scalalib.ScalaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#bspBuildTargetData()mill.define.Task": [
        "call mill.scalalib.ScalaModule.bspBuildTargetData$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#bspCompileClassesPath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.bspCompileClassesPath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#bspCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#bspCompiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.bspCompiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#bspDisplayName()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#bspDisplayName0()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName0$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#bspLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#bspLocalRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#bspTransitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.bspTransitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#bspTransitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspTransitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#compile()mill.define.Target": [
        "call mill.scalalib.ScalaModule.compile$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#compileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#compileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#compileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#compileModuleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#compileResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#compiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.compiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#console()mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#consoleScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.consoleScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#coursierCacheCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.coursierCacheCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#crossFullScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.crossFullScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#defaultCommandName()java.lang.String": [
        "call mill.scalalib.JavaModule.defaultCommandName$(mill.scalalib.JavaModule)java.lang.String",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#defaultResolver()mill.define.Task": [
        "call mill.scalalib.CoursierModule.defaultResolver$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.doRunBackground$(mill.scalalib.JavaModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.NutShell.build$difftest$#docJar()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docJar$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#docJarUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docJarUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#docResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#docSources()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docSources$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#finalMainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#finalMainClassOpt()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClassOpt$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#forkArgs()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkArgs$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#forkEnv()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkEnv$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkWorkingDir$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#generatedSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.generatedSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#ideaCompileOutput()mill.define.Target": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaCompileOutput$(mill.scalalib.GenIdeaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#ideaConfigFiles(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaConfigFiles$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#ideaJavaModuleFacets(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaJavaModuleFacets$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#intellijModulePath()os.Path": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.intellijModulePath$(mill.scalalib.GenIdeaModule)os.Path"
    ],
    "def millbuild.NutShell.build$difftest$#ivyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.ivyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.ivyDepsTree$default$1$(mill.scalalib.JavaModule)mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.NutShell.build$difftest$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#jar()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.jar$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#javacOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.javacOptions$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#javadocOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.javadocOptions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#launcher()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.launcher$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#localClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#localCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.localCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#localRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.mandatoryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mandatoryScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.mandatoryScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#manifest()mill.define.Target": [
        "call mill.scalalib.ScalaModule.manifest$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mapDependencies()mill.define.Task": [
        "call mill.scalalib.ScalaModule.mapDependencies$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "call mill.define.Module.mill$define$Module$$millModuleDirectChildrenImpl$(mill.define.Module)scala.collection.immutable.Seq",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$difftest$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$difftest$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.NutShell.build$difftest$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.bsp.BspModule.bspBuildTarget$(mill.scalalib.bsp.BspModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.doRunBackground$(mill.scalalib.RunModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$forkArgs()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkArgs$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$forkEnv()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkEnv$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkWorkingDir$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$localRunClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.localRunClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.OfflineSupportModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundLogToConsole$(mill.scalalib.RunModule)boolean"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$runClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.RunModule.runUseArgsFile$(mill.scalalib.RunModule)mill.define.Target",
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.WithZincWorker.zincWorker$(mill.scalalib.WithZincWorker)mill.define.ModuleRef",
        "call mill.scalalib.WithZincWorker.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.JavaModule.bspBuildTarget$(mill.scalalib.JavaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$ScalaModule$$super$mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mandatoryIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$ScalaModule$$super$manifest()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.manifest$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task": [
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.mapDependencies$(mill.scalalib.CoursierModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$ScalaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#mill$scalalib$ScalaModule$$super$zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#millInternal$lzycompute$2()void": [
        "call mill.define.Module$millInternal$!<init>(mill.define.Module)void",
        "call mill.define.Module$millInternal$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#millInternal()mill.define.Module$millInternal$": [
        "call millbuild.NutShell.build$difftest$!millInternal$lzycompute$2()void"
    ],
    "def millbuild.NutShell.build$difftest$#millModuleBasePath()mill.define.Ctx$BasePath": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleBasePath$(mill.define.Module)mill.define.Ctx$BasePath"
    ],
    "def millbuild.NutShell.build$difftest$#millModuleDirectChildren()scala.collection.immutable.Seq": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleDirectChildren$(mill.define.Module)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#millModuleExternal()mill.define.Ctx$External": [
        "call mill.define.Module.millModuleExternal$(mill.define.Module)mill.define.Ctx$External",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#millModuleSegments()mill.define.Segments": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleSegments$(mill.define.Module)mill.define.Segments"
    ],
    "def millbuild.NutShell.build$difftest$#millModuleShared()mill.define.Ctx$Foreign": [
        "call mill.define.Module.millModuleShared$(mill.define.Module)mill.define.Ctx$Foreign",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#millSourcePath()os.Path": [
        "call os.package$.<clinit>()void",
        "call os.package$#pwd()os.Path",
        "call os.PathChunk$.<clinit>()void",
        "call os.Path.<clinit>()void",
        "call os.PathChunk$#StringPathChunk(java.lang.String)os.PathChunk$StringPathChunk",
        "call os.Path#$div(os.PathChunk)os.Path"
    ],
    "def millbuild.NutShell.build$difftest$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build": [],
    "def millbuild.NutShell.build$difftest$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build": [],
    "def millbuild.NutShell.build$difftest$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task": [
        "call mill.scalalib.CoursierModule.repositoriesTask$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#moduleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#moduleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#platformSuffix()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.platformSuffix$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#prependShellScript()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.prependShellScript$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.printDepsTree$(mill.scalalib.JavaModule,boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#recursiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.recursiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#repositoriesTask()mill.define.Task": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.repositoriesTask$(millbuild.NutShell.build$HasChisel3)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#resolutionCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolutionCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#resolveCoursierDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolveCoursierDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#resolveDeps$default$2()boolean": [
        "call mill.scalalib.CoursierModule.resolveDeps$default$2$(mill.scalalib.CoursierModule)boolean",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#resolveDeps(mill.define.Task,boolean)mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolveDeps$(mill.scalalib.CoursierModule,mill.define.Task,boolean)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#resolvePublishDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolvePublishDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#resolvedAmmoniteReplIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.resolvedAmmoniteReplIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#resolvedIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#resolvedRunIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedRunIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#resolvedSemanticDbJavaPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.resolvedSemanticDbJavaPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#resources()mill.define.Target": [
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call mill.scalalib.MavenModule.resources$(mill.scalalib.MavenModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#run$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.run$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runBackgroundLogToConsole$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.NutShell.build$difftest$#runBackgroundTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#runClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#runForkedTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#runIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#runLocal$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runLocal$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#runLocalTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.NutShell.build$difftest$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#scalaCompilerClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaCompilerClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalaDocClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalaDocOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalaDocPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalaDocPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalaLibraryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaLibraryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalaOrganization()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaOrganization$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalaVersion()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalaVersion$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalacOptions()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalacOptions$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#scalacPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalacPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#scalacPluginIvyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.scalacPluginIvyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#semanticDbData()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbData$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#semanticDbEnablePluginScalacOptions()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbEnablePluginScalacOptions$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#semanticDbJavaVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbJavaVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#semanticDbPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#semanticDbPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#semanticDbScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#semanticDbVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#showModuleDeps$default$1()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.showModuleDeps$default$1$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.NutShell.build$difftest$#showModuleDeps(boolean)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#skipIdea()boolean": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.skipIdea$(mill.scalalib.GenIdeaModule)boolean"
    ],
    "def millbuild.NutShell.build$difftest$#sourceJar()mill.define.Target": [
        "call mill.scalalib.JavaModule.sourceJar$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#sources()mill.define.Target": [
        "call mill.scalalib.SbtModule.sources$(mill.scalalib.SbtModule)mill.define.Target",
        "call mill.scalalib.SbtModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#toString()java.lang.String": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.toString$(mill.define.Module)java.lang.String"
    ],
    "def millbuild.NutShell.build$difftest$#transitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#transitiveCompileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.transitiveCompileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#transitiveIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#transitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveModuleCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.NutShell.build$difftest$#transitiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.transitiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#unmanagedClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.unmanagedClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#upstreamAssembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#upstreamAssembly2()mill.define.Target": [
        "call mill.scalalib.JavaModule.upstreamAssembly2$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#upstreamAssemblyClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssemblyClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#upstreamCompileOutput()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamCompileOutput$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#zincIncrementalCompilation()mill.define.Target": [
        "call mill.scalalib.JavaModule.zincIncrementalCompilation$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$difftest$#zincReportCachedProblems()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincReportCachedProblems$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.NutShell.build$difftest$#zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.JavaModule.zincWorker$(mill.scalalib.JavaModule)mill.define.ModuleRef",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.NutShell.build$ivys$#<init>(millbuild.NutShell.build)void": [
        "call mill.scalalib.package$DepSyntax.<clinit>()void",
        "call scala.runtime.ScalaRunTime$#wrapRefArray(java.lang.Object[])scala.collection.immutable.ArraySeq",
        "call mill.scalalib.package$DepSyntax#ivy(scala.collection.immutable.Seq)mill.scalalib.Dep",
        "call java.lang.Object!<init>()void",
        "call scala.runtime.ScalaRunTime$.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call mill.scalalib.package$#DepSyntax(scala.StringContext)mill.scalalib.package$DepSyntax",
        "call java.lang.String.<clinit>()void",
        "call scala.StringContext.<clinit>()void",
        "call java.lang.Object.<clinit>()void",
        "call scala.StringContext!<init>(scala.collection.immutable.Seq)void",
        "call mill.scalalib.package$.<clinit>()void"
    ],
    "def millbuild.NutShell.build$ivys$#chisel3()mill.scalalib.Dep": [],
    "def millbuild.NutShell.build$ivys$#chisel3Plugin()mill.scalalib.Dep": [],
    "def millbuild.NutShell.build$ivys$#scala()java.lang.String": [],
    "def millbuild.build#<init>()void": [
        "call mill.main.RootModule.<clinit>()void",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call sourcecode.Line!<init>(int)void",
        "call sourcecode.File.<clinit>()void",
        "call mill.main.RootModule!<init>(mill.main.RootModule$Info,sourcecode.Enclosing,sourcecode.Line,sourcecode.File)void",
        "call sourcecode.Line.<clinit>()void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call millbuild.MiscInfo_build$#millBaseModuleInfo()mill.main.RootModule$Info",
        "call millbuild.MiscInfo_build$.<clinit>()void"
    ],
    "def millbuild.build#NtShell$lzycompute$1()void": [
        "call millbuild.build$NtShell$!<init>(millbuild.build)void",
        "call millbuild.build$NtShell$.<clinit>()void"
    ],
    "def millbuild.build#NtShell()millbuild.build$NtShell$": [
        "call millbuild.build!NtShell$lzycompute$1()void"
    ],
    "def millbuild.build#difftest$lzycompute$1()void": [
        "call millbuild.build$difftest$.<clinit>()void",
        "call millbuild.build$difftest$!<init>(millbuild.build)void"
    ],
    "def millbuild.build#difftest()millbuild.build$difftest$": [
        "call millbuild.build!difftest$lzycompute$1()void"
    ],
    "def millbuild.build#ut$lzycompute$1()void": [
        "call millbuild.build$ut$.<clinit>()void",
        "call millbuild.build$ut$!<init>(millbuild.build)void"
    ],
    "def millbuild.build#ut()millbuild.build$ut$": [
        "call millbuild.build!ut$lzycompute$1()void"
    ],
    "def millbuild.build$#<init>()void": [
        "call millbuild.build.<clinit>()void",
        "call millbuild.build!<init>()void"
    ],
    "def millbuild.build$.<clinit>()void": [
        "call millbuild.build$!<init>()void"
    ],
    "def millbuild.build$NtShell$#<init>(millbuild.build)void": [
        "def millbuild.build$NtShell$#defaultCommandName()java.lang.String",
        "def millbuild.build$NtShell$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build",
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call mill.scalalib.RunModule.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests.$init$(millbuild.NutShell.build$HasChiselTests)void",
        "call mill.scalalib.TestModule$JavaModuleBase.<clinit>()void",
        "call mill.scalalib.WithZincWorker.$init$(mill.scalalib.WithZincWorker)void",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call millbuild.build#millModuleBasePath()mill.define.Ctx$BasePath",
        "call mill.define.Caller.<clinit>()void",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.MavenModule.$init$(mill.scalalib.MavenModule)void",
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call mill.define.Module.$init$(mill.define.Module)void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.scalalib.GenIdeaModule.$init$(mill.scalalib.GenIdeaModule)void",
        "call sourcecode.File.<clinit>()void",
        "call mill.scalalib.WithZincWorker.<clinit>()void",
        "call mill.scalalib.CoursierModule.$init$(mill.scalalib.CoursierModule)void",
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call sourcecode.Line.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.$init$(mill.scalalib.bsp.BspModule)void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call millbuild.build#millModuleShared()mill.define.Ctx$Foreign",
        "call millbuild.build#millModuleSegments()mill.define.Segments",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call millbuild.build.<clinit>()void",
        "call mill.define.Module$BaseClass!<init>(mill.define.Ctx)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.define.Module.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.$init$(mill.scalalib.ScalaModule)void",
        "call millbuild.NutShell.build$HasChiselTests.<clinit>()void",
        "call mill.scalalib.OfflineSupportModule.<clinit>()void",
        "call mill.define.Module$BaseClass.<clinit>()void",
        "call mill.scalalib.SbtModule.$init$(mill.scalalib.SbtModule)void",
        "call mill.scalalib.TestModule$JavaModuleBase.$init$(mill.scalalib.TestModule$JavaModuleBase)void",
        "call mill.scalalib.TestModule$ScalaModuleBase.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.$init$(millbuild.NutShell.build$CommonModule)void",
        "call mill.scalalib.OfflineSupportModule.$init$(mill.scalalib.OfflineSupportModule)void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call mill.scalalib.TestModule$ScalaModuleBase.$init$(mill.scalalib.TestModule$ScalaModuleBase)void",
        "call mill.scalalib.SbtModule.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.$init$(millbuild.NutShell.build$HasChisel3)void",
        "call mill.scalalib.JavaModule.$init$(mill.scalalib.JavaModule)void",
        "call mill.scalalib.SemanticDbJavaModule.$init$(mill.scalalib.SemanticDbJavaModule)void",
        "call mill.scalalib.RunModule.$init$(mill.scalalib.RunModule)void",
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call millbuild.build#millModuleExternal()mill.define.Ctx$External"
    ],
    "def millbuild.build$NtShell$#allIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.allIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#allLocalMainClasses()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.allLocalMainClasses$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#allScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#allSourceFiles()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allSourceFiles$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#allSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.allSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#ammoniteMainClass()mill.define.Task": [
        "call mill.scalalib.ScalaModule.ammoniteMainClass$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#ammoniteReplClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteReplClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#ammoniteVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#artifactId()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactId$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#artifactName()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactName$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#artifactNameParts()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactNameParts$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#artifactScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#artifactSuffix()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactSuffix$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#assembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#assemblyRules()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assemblyRules$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#bindDependency()mill.define.Task": [
        "call mill.scalalib.CoursierModule.bindDependency$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.ScalaModule.bspBuildTarget$(mill.scalalib.ScalaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#bspBuildTargetData()mill.define.Task": [
        "call mill.scalalib.ScalaModule.bspBuildTargetData$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#bspCompileClassesPath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.bspCompileClassesPath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#bspCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#bspCompiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.bspCompiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#bspDisplayName()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#bspDisplayName0()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName0$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#bspLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#bspLocalRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#bspTransitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.bspTransitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#bspTransitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspTransitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#compile()mill.define.Target": [
        "call mill.scalalib.ScalaModule.compile$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#compileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#compileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#compileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#compileModuleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#compileResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#compiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.compiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#console()mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#consoleScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.consoleScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#coursierCacheCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.coursierCacheCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#crossFullScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.crossFullScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#defaultCommandName()java.lang.String": [
        "call mill.scalalib.JavaModule.defaultCommandName$(mill.scalalib.JavaModule)java.lang.String",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#defaultResolver()mill.define.Task": [
        "call mill.scalalib.CoursierModule.defaultResolver$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.doRunBackground$(mill.scalalib.JavaModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.build$NtShell$#docJar()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docJar$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#docJarUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docJarUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#docResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#docSources()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docSources$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#finalMainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#finalMainClassOpt()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClassOpt$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#forkArgs()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkArgs$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#forkEnv()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkEnv$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkWorkingDir$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#generatedSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.generatedSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#ideaCompileOutput()mill.define.Target": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaCompileOutput$(mill.scalalib.GenIdeaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#ideaConfigFiles(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaConfigFiles$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#ideaJavaModuleFacets(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaJavaModuleFacets$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#intellijModulePath()os.Path": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.intellijModulePath$(mill.scalalib.GenIdeaModule)os.Path"
    ],
    "def millbuild.build$NtShell$#ivyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.ivyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.ivyDepsTree$default$1$(mill.scalalib.JavaModule)mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.build$NtShell$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#jar()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.jar$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#javacOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.javacOptions$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#javadocOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.javadocOptions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#launcher()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.launcher$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#localClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#localCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.localCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#localRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.mandatoryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mandatoryScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.mandatoryScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#manifest()mill.define.Target": [
        "call mill.scalalib.ScalaModule.manifest$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mapDependencies()mill.define.Task": [
        "call mill.scalalib.ScalaModule.mapDependencies$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "call mill.define.Module.mill$define$Module$$millModuleDirectChildrenImpl$(mill.define.Module)scala.collection.immutable.Seq",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq": [
        "call millbuild.build$NtShell$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.build$NtShell$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.build$NtShell$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.bsp.BspModule.bspBuildTarget$(mill.scalalib.bsp.BspModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.doRunBackground$(mill.scalalib.RunModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$forkArgs()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkArgs$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$forkEnv()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkEnv$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkWorkingDir$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$localRunClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.localRunClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.OfflineSupportModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundLogToConsole$(mill.scalalib.RunModule)boolean"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$runClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.RunModule.runUseArgsFile$(mill.scalalib.RunModule)mill.define.Target",
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.WithZincWorker.zincWorker$(mill.scalalib.WithZincWorker)mill.define.ModuleRef",
        "call mill.scalalib.WithZincWorker.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.JavaModule.bspBuildTarget$(mill.scalalib.JavaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$ScalaModule$$super$mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mandatoryIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$ScalaModule$$super$manifest()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.manifest$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task": [
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.mapDependencies$(mill.scalalib.CoursierModule)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$ScalaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#mill$scalalib$ScalaModule$$super$zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#millInternal$lzycompute$2()void": [
        "call mill.define.Module$millInternal$!<init>(mill.define.Module)void",
        "call mill.define.Module$millInternal$.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#millInternal()mill.define.Module$millInternal$": [
        "call millbuild.build$NtShell$!millInternal$lzycompute$2()void"
    ],
    "def millbuild.build$NtShell$#millModuleBasePath()mill.define.Ctx$BasePath": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleBasePath$(mill.define.Module)mill.define.Ctx$BasePath"
    ],
    "def millbuild.build$NtShell$#millModuleDirectChildren()scala.collection.immutable.Seq": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleDirectChildren$(mill.define.Module)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#millModuleExternal()mill.define.Ctx$External": [
        "call mill.define.Module.millModuleExternal$(mill.define.Module)mill.define.Ctx$External",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#millModuleSegments()mill.define.Segments": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleSegments$(mill.define.Module)mill.define.Segments"
    ],
    "def millbuild.build$NtShell$#millModuleShared()mill.define.Ctx$Foreign": [
        "call mill.define.Module.millModuleShared$(mill.define.Module)mill.define.Ctx$Foreign",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#millSourcePath()os.Path": [
        "call os.package$.<clinit>()void",
        "call os.package$#pwd()os.Path",
        "call os.PathChunk$.<clinit>()void",
        "call os.Path.<clinit>()void",
        "call os.PathChunk$#StringPathChunk(java.lang.String)os.PathChunk$StringPathChunk",
        "call os.Path#$div(os.PathChunk)os.Path"
    ],
    "def millbuild.build$NtShell$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build": [
        "call millbuild.NutShell.build$.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build": [
        "call millbuild.NutShell.build$.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task": [
        "call mill.scalalib.CoursierModule.repositoriesTask$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#millbuild$NutShell$build$HasChiselTests$$$outer()millbuild.NutShell.build": [
        "call millbuild.NutShell.build$.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#moduleDeps()scala.collection.immutable.Seq": [
        "call scala.collection.immutable.Seq#$plus$plus(scala.collection.IterableOnce)java.lang.Object",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call millbuild.build.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call millbuild.build#difftest()millbuild.build$difftest$"
    ],
    "def millbuild.build$NtShell$#moduleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#platformSuffix()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.platformSuffix$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#prependShellScript()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.prependShellScript$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.printDepsTree$(mill.scalalib.JavaModule,boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#recursiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.recursiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#repositoriesTask()mill.define.Task": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.repositoriesTask$(millbuild.NutShell.build$HasChisel3)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#resolutionCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolutionCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#resolveCoursierDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolveCoursierDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#resolveDeps$default$2()boolean": [
        "call mill.scalalib.CoursierModule.resolveDeps$default$2$(mill.scalalib.CoursierModule)boolean",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#resolveDeps(mill.define.Task,boolean)mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolveDeps$(mill.scalalib.CoursierModule,mill.define.Task,boolean)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#resolvePublishDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolvePublishDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#resolvedAmmoniteReplIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.resolvedAmmoniteReplIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#resolvedIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#resolvedRunIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedRunIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#resolvedSemanticDbJavaPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.resolvedSemanticDbJavaPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#resources()mill.define.Target": [
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call mill.scalalib.MavenModule.resources$(mill.scalalib.MavenModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#run$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.run$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runBackgroundLogToConsole$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.build$NtShell$#runBackgroundTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#runClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#runForkedTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#runIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#runLocal$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runLocal$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#runLocalTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$NtShell$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#scalaCompilerClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaCompilerClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalaDocClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalaDocOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalaDocPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalaDocPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalaLibraryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaLibraryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalaOrganization()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaOrganization$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalaVersion()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalaVersion$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalacOptions()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalacOptions$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#scalacPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalacPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#scalacPluginIvyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.scalacPluginIvyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#semanticDbData()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbData$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#semanticDbEnablePluginScalacOptions()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbEnablePluginScalacOptions$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#semanticDbJavaVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbJavaVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#semanticDbPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#semanticDbPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#semanticDbScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#semanticDbVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#showModuleDeps$default$1()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.showModuleDeps$default$1$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.build$NtShell$#showModuleDeps(boolean)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#skipIdea()boolean": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.skipIdea$(mill.scalalib.GenIdeaModule)boolean"
    ],
    "def millbuild.build$NtShell$#sourceJar()mill.define.Target": [
        "call mill.scalalib.JavaModule.sourceJar$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#sources()mill.define.Target": [
        "call mill.scalalib.SbtModule.sources$(mill.scalalib.SbtModule)mill.define.Target",
        "call mill.scalalib.SbtModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#test$lzycompute$1()void": [
        "call millbuild.NutShell.build$HasChiselTests$test$.<clinit>()void",
        "call millbuild.NutShell.build$HasChiselTests$test$!<init>(millbuild.NutShell.build$HasChiselTests)void"
    ],
    "def millbuild.build$NtShell$#test()millbuild.NutShell.build$HasChiselTests$test$": [
        "call millbuild.build$NtShell$!test$lzycompute$1()void"
    ],
    "def millbuild.build$NtShell$#toString()java.lang.String": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.toString$(mill.define.Module)java.lang.String"
    ],
    "def millbuild.build$NtShell$#transitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#transitiveCompileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.transitiveCompileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#transitiveIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#transitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveModuleCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$NtShell$#transitiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.transitiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#unmanagedClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.unmanagedClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#upstreamAssembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#upstreamAssembly2()mill.define.Target": [
        "call mill.scalalib.JavaModule.upstreamAssembly2$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#upstreamAssemblyClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssemblyClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#upstreamCompileOutput()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamCompileOutput$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#zincIncrementalCompilation()mill.define.Target": [
        "call mill.scalalib.JavaModule.zincIncrementalCompilation$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$NtShell$#zincReportCachedProblems()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincReportCachedProblems$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$NtShell$#zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.JavaModule.zincWorker$(mill.scalalib.JavaModule)mill.define.ModuleRef",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#<init>(millbuild.build)void": [
        "def millbuild.build$difftest$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build",
        "def millbuild.build$difftest$#defaultCommandName()java.lang.String",
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.TestModule$JavaModuleBase.<clinit>()void",
        "call mill.scalalib.WithZincWorker.$init$(mill.scalalib.WithZincWorker)void",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call millbuild.build#millModuleBasePath()mill.define.Ctx$BasePath",
        "call mill.define.Caller.<clinit>()void",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.MavenModule.$init$(mill.scalalib.MavenModule)void",
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call mill.define.Module.$init$(mill.define.Module)void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.scalalib.GenIdeaModule.$init$(mill.scalalib.GenIdeaModule)void",
        "call sourcecode.File.<clinit>()void",
        "call mill.scalalib.WithZincWorker.<clinit>()void",
        "call mill.scalalib.CoursierModule.$init$(mill.scalalib.CoursierModule)void",
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call sourcecode.Line.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.$init$(mill.scalalib.bsp.BspModule)void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call millbuild.build#millModuleShared()mill.define.Ctx$Foreign",
        "call millbuild.build#millModuleSegments()mill.define.Segments",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call millbuild.build.<clinit>()void",
        "call mill.define.Module$BaseClass!<init>(mill.define.Ctx)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.define.Module.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.$init$(mill.scalalib.ScalaModule)void",
        "call mill.scalalib.OfflineSupportModule.<clinit>()void",
        "call mill.define.Module$BaseClass.<clinit>()void",
        "call mill.scalalib.SbtModule.$init$(mill.scalalib.SbtModule)void",
        "call mill.scalalib.TestModule$JavaModuleBase.$init$(mill.scalalib.TestModule$JavaModuleBase)void",
        "call mill.scalalib.TestModule$ScalaModuleBase.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.$init$(millbuild.NutShell.build$CommonModule)void",
        "call mill.scalalib.OfflineSupportModule.$init$(mill.scalalib.OfflineSupportModule)void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call mill.scalalib.TestModule$ScalaModuleBase.$init$(mill.scalalib.TestModule$ScalaModuleBase)void",
        "call mill.scalalib.SbtModule.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.$init$(millbuild.NutShell.build$HasChisel3)void",
        "call mill.scalalib.JavaModule.$init$(mill.scalalib.JavaModule)void",
        "call mill.scalalib.SemanticDbJavaModule.$init$(mill.scalalib.SemanticDbJavaModule)void",
        "call mill.scalalib.RunModule.$init$(mill.scalalib.RunModule)void",
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call millbuild.build#millModuleExternal()mill.define.Ctx$External"
    ],
    "def millbuild.build$difftest$#allIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.allIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#allLocalMainClasses()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.allLocalMainClasses$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#allScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#allSourceFiles()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allSourceFiles$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#allSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.allSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#ammoniteMainClass()mill.define.Task": [
        "call mill.scalalib.ScalaModule.ammoniteMainClass$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#ammoniteReplClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteReplClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#ammoniteVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#artifactId()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactId$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#artifactName()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactName$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#artifactNameParts()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactNameParts$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#artifactScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#artifactSuffix()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactSuffix$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#assembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#assemblyRules()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assemblyRules$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#bindDependency()mill.define.Task": [
        "call mill.scalalib.CoursierModule.bindDependency$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.ScalaModule.bspBuildTarget$(mill.scalalib.ScalaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#bspBuildTargetData()mill.define.Task": [
        "call mill.scalalib.ScalaModule.bspBuildTargetData$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#bspCompileClassesPath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.bspCompileClassesPath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#bspCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#bspCompiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.bspCompiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#bspDisplayName()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#bspDisplayName0()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName0$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#bspLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#bspLocalRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#bspTransitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.bspTransitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#bspTransitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspTransitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#compile()mill.define.Target": [
        "call mill.scalalib.ScalaModule.compile$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#compileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#compileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#compileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#compileModuleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#compileResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#compiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.compiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#console()mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#consoleScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.consoleScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#coursierCacheCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.coursierCacheCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#crossFullScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.crossFullScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#defaultCommandName()java.lang.String": [
        "call mill.scalalib.JavaModule.defaultCommandName$(mill.scalalib.JavaModule)java.lang.String",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#defaultResolver()mill.define.Task": [
        "call mill.scalalib.CoursierModule.defaultResolver$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.doRunBackground$(mill.scalalib.JavaModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.build$difftest$#docJar()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docJar$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#docJarUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docJarUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#docResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#docSources()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docSources$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#finalMainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#finalMainClassOpt()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClassOpt$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#forkArgs()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkArgs$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#forkEnv()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkEnv$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkWorkingDir$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#generatedSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.generatedSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#ideaCompileOutput()mill.define.Target": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaCompileOutput$(mill.scalalib.GenIdeaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#ideaConfigFiles(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaConfigFiles$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.build$difftest$#ideaJavaModuleFacets(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaJavaModuleFacets$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.build$difftest$#intellijModulePath()os.Path": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.intellijModulePath$(mill.scalalib.GenIdeaModule)os.Path"
    ],
    "def millbuild.build$difftest$#ivyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.ivyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.ivyDepsTree$default$1$(mill.scalalib.JavaModule)mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.build$difftest$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#jar()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.jar$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#javacOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.javacOptions$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#javadocOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.javadocOptions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#launcher()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.launcher$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#localClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#localCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.localCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#localRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.mandatoryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mandatoryScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.mandatoryScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#manifest()mill.define.Target": [
        "call mill.scalalib.ScalaModule.manifest$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mapDependencies()mill.define.Task": [
        "call mill.scalalib.ScalaModule.mapDependencies$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "call mill.define.Module.mill$define$Module$$millModuleDirectChildrenImpl$(mill.define.Module)scala.collection.immutable.Seq",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq": [
        "call millbuild.build$difftest$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.build$difftest$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.build$difftest$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.bsp.BspModule.bspBuildTarget$(mill.scalalib.bsp.BspModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.doRunBackground$(mill.scalalib.RunModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$forkArgs()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkArgs$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$forkEnv()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkEnv$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkWorkingDir$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$localRunClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.localRunClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.OfflineSupportModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundLogToConsole$(mill.scalalib.RunModule)boolean"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$runClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.RunModule.runUseArgsFile$(mill.scalalib.RunModule)mill.define.Target",
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.WithZincWorker.zincWorker$(mill.scalalib.WithZincWorker)mill.define.ModuleRef",
        "call mill.scalalib.WithZincWorker.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.JavaModule.bspBuildTarget$(mill.scalalib.JavaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$ScalaModule$$super$mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mandatoryIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mill$scalalib$ScalaModule$$super$manifest()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.manifest$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task": [
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.mapDependencies$(mill.scalalib.CoursierModule)mill.define.Task"
    ],
    "def millbuild.build$difftest$#mill$scalalib$ScalaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#mill$scalalib$ScalaModule$$super$zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#millInternal$lzycompute$1()void": [
        "call mill.define.Module$millInternal$!<init>(mill.define.Module)void",
        "call mill.define.Module$millInternal$.<clinit>()void"
    ],
    "def millbuild.build$difftest$#millInternal()mill.define.Module$millInternal$": [
        "call millbuild.build$difftest$!millInternal$lzycompute$1()void"
    ],
    "def millbuild.build$difftest$#millModuleBasePath()mill.define.Ctx$BasePath": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleBasePath$(mill.define.Module)mill.define.Ctx$BasePath"
    ],
    "def millbuild.build$difftest$#millModuleDirectChildren()scala.collection.immutable.Seq": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleDirectChildren$(mill.define.Module)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#millModuleExternal()mill.define.Ctx$External": [
        "call mill.define.Module.millModuleExternal$(mill.define.Module)mill.define.Ctx$External",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$difftest$#millModuleSegments()mill.define.Segments": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleSegments$(mill.define.Module)mill.define.Segments"
    ],
    "def millbuild.build$difftest$#millModuleShared()mill.define.Ctx$Foreign": [
        "call mill.define.Module.millModuleShared$(mill.define.Module)mill.define.Ctx$Foreign",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$difftest$#millSourcePath()os.Path": [
        "call os.package$.<clinit>()void",
        "call os.package$#pwd()os.Path",
        "call os.PathChunk$.<clinit>()void",
        "call os.Path.<clinit>()void",
        "call os.PathChunk$#StringPathChunk(java.lang.String)os.PathChunk$StringPathChunk",
        "call os.Path#$div(os.PathChunk)os.Path"
    ],
    "def millbuild.build$difftest$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build": [
        "call millbuild.NutShell.build$.<clinit>()void"
    ],
    "def millbuild.build$difftest$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build": [
        "call millbuild.NutShell.build$.<clinit>()void"
    ],
    "def millbuild.build$difftest$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task": [
        "call mill.scalalib.CoursierModule.repositoriesTask$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#moduleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#moduleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#platformSuffix()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.platformSuffix$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#prependShellScript()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.prependShellScript$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.printDepsTree$(mill.scalalib.JavaModule,boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task"
    ],
    "def millbuild.build$difftest$#recursiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.recursiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#repositoriesTask()mill.define.Task": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.repositoriesTask$(millbuild.NutShell.build$HasChisel3)mill.define.Task"
    ],
    "def millbuild.build$difftest$#resolutionCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolutionCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#resolveCoursierDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolveCoursierDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#resolveDeps$default$2()boolean": [
        "call mill.scalalib.CoursierModule.resolveDeps$default$2$(mill.scalalib.CoursierModule)boolean",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#resolveDeps(mill.define.Task,boolean)mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolveDeps$(mill.scalalib.CoursierModule,mill.define.Task,boolean)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#resolvePublishDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolvePublishDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#resolvedAmmoniteReplIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.resolvedAmmoniteReplIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#resolvedIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#resolvedRunIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedRunIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#resolvedSemanticDbJavaPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.resolvedSemanticDbJavaPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#resources()mill.define.Target": [
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call mill.scalalib.MavenModule.resources$(mill.scalalib.MavenModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#run$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.run$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.build$difftest$#run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runBackgroundLogToConsole$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.build$difftest$#runBackgroundTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$difftest$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$difftest$#runClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#runForkedTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$difftest$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$difftest$#runIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#runLocal$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runLocal$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.build$difftest$#runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#runLocalTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$difftest$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$difftest$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#scalaCompilerClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaCompilerClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalaDocClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalaDocOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalaDocPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalaDocPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalaLibraryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaLibraryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalaOrganization()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaOrganization$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalaVersion()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalaVersion$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalacOptions()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalacOptions$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#scalacPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalacPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#scalacPluginIvyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.scalacPluginIvyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.build$difftest$#semanticDbData()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbData$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#semanticDbEnablePluginScalacOptions()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbEnablePluginScalacOptions$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#semanticDbJavaVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbJavaVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#semanticDbPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#semanticDbPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#semanticDbScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#semanticDbVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#showModuleDeps$default$1()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.showModuleDeps$default$1$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.build$difftest$#showModuleDeps(boolean)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#skipIdea()boolean": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.skipIdea$(mill.scalalib.GenIdeaModule)boolean"
    ],
    "def millbuild.build$difftest$#sourceJar()mill.define.Target": [
        "call mill.scalalib.JavaModule.sourceJar$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#sources()mill.define.Target": [
        "call mill.scalalib.SbtModule.sources$(mill.scalalib.SbtModule)mill.define.Target",
        "call mill.scalalib.SbtModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#toString()java.lang.String": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.toString$(mill.define.Module)java.lang.String"
    ],
    "def millbuild.build$difftest$#transitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#transitiveCompileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.transitiveCompileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#transitiveIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#transitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveModuleCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$difftest$#transitiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.transitiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#unmanagedClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.unmanagedClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#upstreamAssembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#upstreamAssembly2()mill.define.Target": [
        "call mill.scalalib.JavaModule.upstreamAssembly2$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#upstreamAssemblyClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssemblyClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#upstreamCompileOutput()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamCompileOutput$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#zincIncrementalCompilation()mill.define.Target": [
        "call mill.scalalib.JavaModule.zincIncrementalCompilation$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$difftest$#zincReportCachedProblems()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincReportCachedProblems$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$difftest$#zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.JavaModule.zincWorker$(mill.scalalib.JavaModule)mill.define.ModuleRef",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#<init>(millbuild.build)void": [
        "def millbuild.build$ut$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build",
        "def millbuild.build$ut$#defaultCommandName()java.lang.String",
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.TestModule$JavaModuleBase.<clinit>()void",
        "call mill.scalalib.WithZincWorker.$init$(mill.scalalib.WithZincWorker)void",
        "call sourcecode.File!<init>(java.lang.String)void",
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call millbuild.build#millModuleBasePath()mill.define.Ctx$BasePath",
        "call mill.scalalib.TestModule.$init$(mill.scalalib.TestModule)void",
        "call mill.define.Caller.<clinit>()void",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.MavenModule.$init$(mill.scalalib.MavenModule)void",
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call mill.define.Ctx$.<clinit>()void",
        "call mill.define.Module.$init$(mill.define.Module)void",
        "call sourcecode.Line!<init>(int)void",
        "call mill.scalalib.GenIdeaModule.$init$(mill.scalalib.GenIdeaModule)void",
        "call sourcecode.File.<clinit>()void",
        "call mill.scalalib.WithZincWorker.<clinit>()void",
        "call mill.scalalib.TestModule$ScalaTest.$init$(mill.scalalib.TestModule$ScalaTest)void",
        "call mill.scalalib.CoursierModule.$init$(mill.scalalib.CoursierModule)void",
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call sourcecode.Line.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.$init$(mill.scalalib.bsp.BspModule)void",
        "call sourcecode.Enclosing.<clinit>()void",
        "call millbuild.build#millModuleShared()mill.define.Ctx$Foreign",
        "call millbuild.build#millModuleSegments()mill.define.Segments",
        "call mill.define.Caller!<init>(java.lang.Object)void",
        "call millbuild.build.<clinit>()void",
        "call mill.define.Module$BaseClass!<init>(mill.define.Ctx)void",
        "call sourcecode.Enclosing!<init>(java.lang.String)void",
        "call mill.define.Module.<clinit>()void",
        "call mill.scalalib.bsp.BspModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.$init$(mill.scalalib.ScalaModule)void",
        "call mill.scalalib.TestModule$ScalaTest.<clinit>()void",
        "call mill.scalalib.OfflineSupportModule.<clinit>()void",
        "call mill.define.Module$BaseClass.<clinit>()void",
        "call mill.scalalib.SbtModule.$init$(mill.scalalib.SbtModule)void",
        "call mill.scalalib.TestModule$JavaModuleBase.$init$(mill.scalalib.TestModule$JavaModuleBase)void",
        "call mill.scalalib.TestModule.<clinit>()void",
        "call mill.scalalib.TestModule$ScalaModuleBase.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.$init$(millbuild.NutShell.build$CommonModule)void",
        "call mill.scalalib.OfflineSupportModule.$init$(mill.scalalib.OfflineSupportModule)void",
        "call mill.define.Ctx$#make(sourcecode.Enclosing,sourcecode.Line,mill.define.Ctx$BasePath,mill.define.Segments,mill.define.Ctx$External,mill.define.Ctx$Foreign,sourcecode.File,mill.define.Caller)mill.define.Ctx",
        "call mill.scalalib.TestModule$ScalaModuleBase.$init$(mill.scalalib.TestModule$ScalaModuleBase)void",
        "call mill.scalalib.SbtModule.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.$init$(millbuild.NutShell.build$HasChisel3)void",
        "call mill.scalalib.JavaModule.$init$(mill.scalalib.JavaModule)void",
        "call mill.scalalib.SemanticDbJavaModule.$init$(mill.scalalib.SemanticDbJavaModule)void",
        "call mill.scalalib.RunModule.$init$(mill.scalalib.RunModule)void",
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call millbuild.build#millModuleExternal()mill.define.Ctx$External"
    ],
    "def millbuild.build$ut$#allIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.allIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#allLocalMainClasses()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.allLocalMainClasses$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#allScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#allSourceFiles()mill.define.Target": [
        "call mill.scalalib.ScalaModule.allSourceFiles$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#allSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.allSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#ammoniteMainClass()mill.define.Task": [
        "call mill.scalalib.ScalaModule.ammoniteMainClass$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#ammoniteReplClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteReplClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#ammoniteVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.ammoniteVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#artifactId()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactId$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#artifactName()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactName$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#artifactNameParts()mill.define.Target": [
        "call mill.scalalib.JavaModule.artifactNameParts$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#artifactScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#artifactSuffix()mill.define.Target": [
        "call mill.scalalib.ScalaModule.artifactSuffix$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#assembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#assemblyRules()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.assemblyRules$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#bindDependency()mill.define.Task": [
        "call mill.scalalib.CoursierModule.bindDependency$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.TestModule.<clinit>()void",
        "call mill.scalalib.TestModule.bspBuildTarget$(mill.scalalib.TestModule)mill.scalalib.bsp.BspBuildTarget"
    ],
    "def millbuild.build$ut$#bspBuildTargetData()mill.define.Task": [
        "call mill.scalalib.ScalaModule.bspBuildTargetData$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#bspCompileClassesPath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.bspCompileClassesPath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#bspCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#bspCompiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.bspCompiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#bspDisplayName()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#bspDisplayName0()java.lang.String": [
        "call mill.scalalib.bsp.BspModule.bspDisplayName0$(mill.scalalib.bsp.BspModule)java.lang.String",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#bspLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#bspLocalRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspLocalRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#bspTransitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.bspTransitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#bspTransitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.bspTransitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#compile()mill.define.Target": [
        "call mill.scalalib.ScalaModule.compile$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#compileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#compileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#compileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#compileModuleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileModuleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#compileResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.compileResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#compiledClassesAndSemanticDbFiles()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.compiledClassesAndSemanticDbFiles$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#console()mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#consoleScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.consoleScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#coursierCacheCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.coursierCacheCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#crossFullScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.crossFullScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#defaultCommandName()java.lang.String": [
        "call mill.scalalib.TestModule.defaultCommandName$(mill.scalalib.TestModule)java.lang.String",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#defaultResolver()mill.define.Task": [
        "call mill.scalalib.CoursierModule.defaultResolver$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#discoveredTestClasses()mill.define.Target": [
        "call mill.scalalib.TestModule.discoveredTestClasses$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.doRunBackground$(mill.scalalib.JavaModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.build$ut$#docJar()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docJar$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#docJarUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docJarUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#docResources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.docResources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#docSources()mill.define.Target": [
        "call mill.scalalib.ScalaModule.docSources$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#finalMainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#finalMainClassOpt()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.finalMainClassOpt$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#forkArgs()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkArgs$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#forkEnv()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkEnv$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.forkWorkingDir$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#generatedSources()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.generatedSources$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#ideaCompileOutput()mill.define.Target": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaCompileOutput$(mill.scalalib.GenIdeaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#ideaConfigFiles(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaConfigFiles$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.build$ut$#ideaJavaModuleFacets(int)mill.define.Task": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.ideaJavaModuleFacets$(mill.scalalib.GenIdeaModule,int)mill.define.Task"
    ],
    "def millbuild.build$ut$#intellijModulePath()os.Path": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.intellijModulePath$(mill.scalalib.GenIdeaModule)os.Path"
    ],
    "def millbuild.build$ut$#ivyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.ivyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.build$ut$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.ivyDepsTree$default$1$(mill.scalalib.JavaModule)mill.scalalib.IvyDepsTreeArgs"
    ],
    "def millbuild.build$ut$#ivyDepsTree(mill.scalalib.IvyDepsTreeArgs)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#jar()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.jar$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#javacOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.javacOptions$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#javadocOptions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.javadocOptions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#launcher()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.launcher$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#localClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#localCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.localCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#localRunClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.localRunClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mainClass()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mainClass$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.mandatoryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mandatoryScalacOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.<clinit>()void",
        "call mill.scalalib.ScalaModule.mandatoryScalacOptions$(mill.scalalib.ScalaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#manifest()mill.define.Target": [
        "call mill.scalalib.ScalaModule.manifest$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mapDependencies()mill.define.Task": [
        "call mill.scalalib.ScalaModule.mapDependencies$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq": [
        "call mill.define.Module.mill$define$Module$$millModuleDirectChildrenImpl$(mill.define.Module)scala.collection.immutable.Seq",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq": [
        "call millbuild.build$ut$!mill$define$Module$$millModuleDirectChildrenImpl$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.build$ut$!mill$scalalib$JavaModule$$recCompileModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.mill$scalalib$JavaModule$$recModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq": [
        "call millbuild.build$ut$!mill$scalalib$JavaModule$$recModuleDeps$lzycompute()scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.bsp.BspModule.bspBuildTarget$(mill.scalalib.bsp.BspModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.bsp.BspModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.doRunBackground$(mill.scalalib.RunModule,os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$forkArgs()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkArgs$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$forkEnv()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkEnv$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$forkWorkingDir()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.forkWorkingDir$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$localRunClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.localRunClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.OfflineSupportModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundLogToConsole$(mill.scalalib.RunModule)boolean"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$runClasspath()mill.define.Target": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runClasspath$(mill.scalalib.RunModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.RunModule.runUseArgsFile$(mill.scalalib.RunModule)mill.define.Target",
        "call mill.scalalib.RunModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.WithZincWorker.zincWorker$(mill.scalalib.WithZincWorker)mill.define.ModuleRef",
        "call mill.scalalib.WithZincWorker.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.JavaModule.bspBuildTarget$(mill.scalalib.JavaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$ScalaModule$$super$mandatoryIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.mandatoryIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mill$scalalib$ScalaModule$$super$manifest()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.manifest$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task": [
        "call mill.scalalib.CoursierModule.<clinit>()void",
        "call mill.scalalib.CoursierModule.mapDependencies$(mill.scalalib.CoursierModule)mill.define.Task"
    ],
    "def millbuild.build$ut$#mill$scalalib$ScalaModule$$super$prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#mill$scalalib$ScalaModule$$super$zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#mill$scalalib$TestModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget": [
        "call mill.scalalib.ScalaModule.bspBuildTarget$(mill.scalalib.ScalaModule)mill.scalalib.bsp.BspBuildTarget",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#millInternal$lzycompute$3()void": [
        "call mill.define.Module$millInternal$!<init>(mill.define.Module)void",
        "call mill.define.Module$millInternal$.<clinit>()void"
    ],
    "def millbuild.build$ut$#millInternal()mill.define.Module$millInternal$": [
        "call millbuild.build$ut$!millInternal$lzycompute$3()void"
    ],
    "def millbuild.build$ut$#millModuleBasePath()mill.define.Ctx$BasePath": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleBasePath$(mill.define.Module)mill.define.Ctx$BasePath"
    ],
    "def millbuild.build$ut$#millModuleDirectChildren()scala.collection.immutable.Seq": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleDirectChildren$(mill.define.Module)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#millModuleExternal()mill.define.Ctx$External": [
        "call mill.define.Module.millModuleExternal$(mill.define.Module)mill.define.Ctx$External",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$ut$#millModuleSegments()mill.define.Segments": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.millModuleSegments$(mill.define.Module)mill.define.Segments"
    ],
    "def millbuild.build$ut$#millModuleShared()mill.define.Ctx$Foreign": [
        "call mill.define.Module.millModuleShared$(mill.define.Module)mill.define.Ctx$Foreign",
        "call mill.define.Module.<clinit>()void"
    ],
    "def millbuild.build$ut$#millSourcePath()os.Path": [
        "call os.package$.<clinit>()void",
        "call os.package$#pwd()os.Path"
    ],
    "def millbuild.build$ut$#millbuild$NutShell$build$CommonModule$$$outer()millbuild.NutShell.build": [
        "call millbuild.NutShell.build$.<clinit>()void"
    ],
    "def millbuild.build$ut$#millbuild$NutShell$build$HasChisel3$$$outer()millbuild.NutShell.build": [
        "call millbuild.NutShell.build$.<clinit>()void"
    ],
    "def millbuild.build$ut$#millbuild$NutShell$build$HasChisel3$$super$repositoriesTask()mill.define.Task": [
        "call mill.scalalib.CoursierModule.repositoriesTask$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#moduleDeps()scala.collection.immutable.Seq": [
        "call millbuild.build#NtShell()millbuild.build$NtShell$",
        "call scala.collection.immutable.Seq#$plus$plus(scala.collection.IterableOnce)java.lang.Object",
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call scala.collection.immutable.$colon$colon.<clinit>()void",
        "call scala.collection.immutable.Seq.<clinit>()void",
        "call scala.collection.immutable.Nil$.<clinit>()void",
        "call scala.collection.immutable.$colon$colon!<init>(java.lang.Object,scala.collection.immutable.List)void",
        "call millbuild.build.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#moduleDepsChecked()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.moduleDepsChecked$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#platformSuffix()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.platformSuffix$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#prepareOffline(mainargs.Flag)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#prependShellScript()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.prependShellScript$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.printDepsTree$(mill.scalalib.JavaModule,boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task"
    ],
    "def millbuild.build$ut$#recursiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.recursiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#repl(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#repositoriesTask()mill.define.Task": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.repositoriesTask$(millbuild.NutShell.build$HasChisel3)mill.define.Task"
    ],
    "def millbuild.build$ut$#resolutionCustomizer()mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolutionCustomizer$(mill.scalalib.CoursierModule)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#resolveCoursierDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolveCoursierDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#resolveDeps$default$2()boolean": [
        "call mill.scalalib.CoursierModule.resolveDeps$default$2$(mill.scalalib.CoursierModule)boolean",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#resolveDeps(mill.define.Task,boolean)mill.define.Task": [
        "call mill.scalalib.CoursierModule.resolveDeps$(mill.scalalib.CoursierModule,mill.define.Task,boolean)mill.define.Task",
        "call mill.scalalib.CoursierModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#resolvePublishDependency()mill.define.Task": [
        "call mill.scalalib.ScalaModule.resolvePublishDependency$(mill.scalalib.ScalaModule)mill.define.Task",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#resolvedAmmoniteReplIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.resolvedAmmoniteReplIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#resolvedIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#resolvedRunIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.resolvedRunIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#resolvedSemanticDbJavaPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.resolvedSemanticDbJavaPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#resources()mill.define.Target": [
        "call mill.scalalib.MavenModule.<clinit>()void",
        "call mill.scalalib.MavenModule.resources$(mill.scalalib.MavenModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#run$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.run$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.build$ut$#run(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#runBackground(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#runBackgroundLogToConsole()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runBackgroundLogToConsole$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.build$ut$#runBackgroundTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$ut$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runBackgroundTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$ut$#runClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#runForkedTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$ut$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runForkedTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$ut$#runIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#runLocal$default$1()mill.define.Task": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runLocal$default$1$(mill.scalalib.JavaModule)mill.define.Task"
    ],
    "def millbuild.build$ut$#runLocal(mill.define.Task)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#runLocalTask$default$2()mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$default$2$(mill.scalalib.RunModule)mill.define.Task"
    ],
    "def millbuild.build$ut$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.RunModule.<clinit>()void",
        "call mill.scalalib.RunModule.runLocalTask$(mill.scalalib.RunModule,mill.define.Task,mill.define.Task)mill.define.Task"
    ],
    "def millbuild.build$ut$#runMain(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#runMainBackground(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#runMainLocal(java.lang.String,scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#runUseArgsFile()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.runUseArgsFile$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#scalaCompilerClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaCompilerClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalaDocClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalaDocOptions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocOptions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalaDocPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalaDocPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaDocPluginIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalaLibraryIvyDeps()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaLibraryIvyDeps$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalaOrganization()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalaOrganization$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalaVersion()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalaVersion$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#scalacHelp(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalacOptions()mill.define.Target": [
        "call millbuild.NutShell.build$CommonModule.<clinit>()void",
        "call millbuild.NutShell.build$CommonModule.scalacOptions$(millbuild.NutShell.build$CommonModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#scalacPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.scalacPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#scalacPluginIvyDeps()mill.define.Target": [
        "call millbuild.NutShell.build$HasChisel3.<clinit>()void",
        "call millbuild.NutShell.build$HasChisel3.scalacPluginIvyDeps$(millbuild.NutShell.build$HasChisel3)mill.define.Target"
    ],
    "def millbuild.build$ut$#semanticDbData()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbData$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#semanticDbEnablePluginScalacOptions()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbEnablePluginScalacOptions$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#semanticDbJavaVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbJavaVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#semanticDbPluginClasspath()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbPluginClasspath$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#semanticDbPluginIvyDeps()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbPluginIvyDeps$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#semanticDbScalaVersion()mill.define.Target": [
        "call mill.scalalib.ScalaModule.semanticDbScalaVersion$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#semanticDbVersion()mill.define.Target": [
        "call mill.scalalib.SemanticDbJavaModule.semanticDbVersion$(mill.scalalib.SemanticDbJavaModule)mill.define.Target",
        "call mill.scalalib.SemanticDbJavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#showModuleDeps$default$1()boolean": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.showModuleDeps$default$1$(mill.scalalib.JavaModule)boolean"
    ],
    "def millbuild.build$ut$#showModuleDeps(boolean)mill.define.Command": [
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#skipIdea()boolean": [
        "call mill.scalalib.GenIdeaModule.<clinit>()void",
        "call mill.scalalib.GenIdeaModule.skipIdea$(mill.scalalib.GenIdeaModule)boolean"
    ],
    "def millbuild.build$ut$#sourceJar()mill.define.Target": [
        "call mill.scalalib.JavaModule.sourceJar$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#sources()mill.define.Target": [
        "call mill.scalalib.SbtModule.sources$(mill.scalalib.SbtModule)mill.define.Target",
        "call mill.scalalib.SbtModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#test(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#testCached()mill.define.Target": [
        "call mill.scalalib.TestModule.testCached$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#testCachedArgs()mill.define.Target": [
        "call mill.scalalib.TestModule.testCachedArgs$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#testClasspath()mill.define.Target": [
        "call mill.scalalib.TestModule.testClasspath$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#testFramework()mill.define.Target": [
        "call mill.scalalib.TestModule$ScalaTest.testFramework$(mill.scalalib.TestModule$ScalaTest)mill.define.Target",
        "call mill.scalalib.TestModule$ScalaTest.<clinit>()void"
    ],
    "def millbuild.build$ut$#testLocal(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#testOnly(scala.collection.immutable.Seq)mill.define.Command": [
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#testReportXml()mill.define.Target": [
        "call mill.scalalib.TestModule.testReportXml$(mill.scalalib.TestModule)mill.define.Target",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#testTask(mill.define.Task,mill.define.Task)mill.define.Task": [
        "call mill.scalalib.TestModule.testTask$(mill.scalalib.TestModule,mill.define.Task,mill.define.Task)mill.define.Task",
        "call mill.scalalib.TestModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#testUseArgsFile()mill.define.Target": [
        "call mill.scalalib.TestModule.<clinit>()void",
        "call mill.scalalib.TestModule.testUseArgsFile$(mill.scalalib.TestModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#toString()java.lang.String": [
        "call mill.define.Module.<clinit>()void",
        "call mill.define.Module.toString$(mill.define.Module)java.lang.String"
    ],
    "def millbuild.build$ut$#transitiveCompileClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveCompileClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#transitiveCompileIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.transitiveCompileIvyDeps$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#transitiveIvyDeps()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveIvyDeps$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#transitiveLocalClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveLocalClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.transitiveModuleCompileModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq"
    ],
    "def millbuild.build$ut$#transitiveModuleDeps()scala.collection.immutable.Seq": [
        "call mill.scalalib.JavaModule.transitiveModuleDeps$(mill.scalalib.JavaModule)scala.collection.immutable.Seq",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#unmanagedClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.unmanagedClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#upstreamAssembly()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssembly$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#upstreamAssembly2()mill.define.Target": [
        "call mill.scalalib.JavaModule.upstreamAssembly2$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#upstreamAssemblyClasspath()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamAssemblyClasspath$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#upstreamCompileOutput()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.upstreamCompileOutput$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#zincAuxiliaryClassFileExtensions()mill.define.Target": [
        "call mill.scalalib.ScalaModule.zincAuxiliaryClassFileExtensions$(mill.scalalib.ScalaModule)mill.define.Target",
        "call mill.scalalib.ScalaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#zincIncrementalCompilation()mill.define.Target": [
        "call mill.scalalib.JavaModule.zincIncrementalCompilation$(mill.scalalib.JavaModule)mill.define.Target",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "def millbuild.build$ut$#zincReportCachedProblems()mill.define.Target": [
        "call mill.scalalib.JavaModule.<clinit>()void",
        "call mill.scalalib.JavaModule.zincReportCachedProblems$(mill.scalalib.JavaModule)mill.define.Target"
    ],
    "def millbuild.build$ut$#zincWorker()mill.define.ModuleRef": [
        "call mill.scalalib.JavaModule.zincWorker$(mill.scalalib.JavaModule)mill.define.ModuleRef",
        "call mill.scalalib.JavaModule.<clinit>()void"
    ],
    "external coursier.maven.MavenRepository$": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external java.io.Serializable": [
        "external java.lang.Object"
    ],
    "external java.lang.CharSequence": [
        "external java.lang.Object"
    ],
    "external java.lang.Comparable": [
        "external java.lang.Object"
    ],
    "external java.lang.Object": [
        "def millbuild.NutShell.build$difftest$#toString()java.lang.String",
        "def millbuild.NutShell.build$HasChiselTests$test$#toString()java.lang.String",
        "def millbuild.build$ut$#toString()java.lang.String",
        "def millbuild.build$difftest$#toString()java.lang.String",
        "def millbuild.build$NtShell$#toString()java.lang.String",
        "def millbuild.NutShell.build$chiselModule$#toString()java.lang.String"
    ],
    "external java.lang.String": [
        "external java.lang.Comparable",
        "external java.io.Serializable",
        "external java.lang.CharSequence",
        "external java.lang.constant.ConstantDesc",
        "external java.lang.Object",
        "external java.lang.constant.Constable"
    ],
    "external java.lang.constant.Constable": [
        "external java.lang.Object"
    ],
    "external java.lang.constant.ConstantDesc": [
        "external java.lang.Object"
    ],
    "external mainargs.ArgSig$": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mainargs.Flag": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mainargs.Leftover": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mainargs.MainData": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mainargs.MainData$": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mainargs.TokensReader": [
        "external java.lang.Object"
    ],
    "external mainargs.TokensReader$": [
        "external java.lang.Object"
    ],
    "external mainargs.TokensReader$BooleanRead$": [
        "external mainargs.TokensReader$Simple",
        "external java.lang.Object"
    ],
    "external mainargs.TokensReader$Flag": [
        "external java.lang.Object",
        "external mainargs.TokensReader$Terminal"
    ],
    "external mainargs.TokensReader$FlagRead$": [
        "external mainargs.TokensReader$Flag",
        "external java.lang.Object"
    ],
    "external mainargs.TokensReader$ShortNamed": [
        "external java.lang.Object",
        "external mainargs.TokensReader$Terminal"
    ],
    "external mainargs.TokensReader$Simple": [
        "external mainargs.TokensReader$ShortNamed",
        "external java.lang.Object"
    ],
    "external mainargs.TokensReader$StringRead$": [
        "external mainargs.TokensReader$Simple",
        "external java.lang.Object"
    ],
    "external mainargs.TokensReader$Terminal": [
        "external mainargs.TokensReader",
        "external java.lang.Object"
    ],
    "external mainargs.arg": [
        "external scala.annotation.ClassfileAnnotation",
        "external scala.annotation.Annotation"
    ],
    "external mainargs.arg$": [
        "external java.lang.Object"
    ],
    "external mainargs.main": [
        "external scala.annotation.ClassfileAnnotation",
        "external scala.annotation.Annotation"
    ],
    "external mainargs.main$": [
        "external java.lang.Object"
    ],
    "external mill.api.AggWrapper": [
        "external java.lang.Object"
    ],
    "external mill.api.AggWrapper$Agg": [
        "external scala.collection.IterableOps",
        "external java.lang.Object"
    ],
    "external mill.api.AggWrapper$Agg$": [
        "external java.lang.Object",
        "external scala.collection.IterableFactory"
    ],
    "external mill.api.Ctx": [
        "external mill.api.Ctx$Log",
        "external mill.api.Ctx$Workspace",
        "external mill.api.Ctx$Env",
        "external mill.api.Ctx$Home",
        "external mill.api.Ctx$Args",
        "external mill.api.Ctx$Dest",
        "external java.lang.Object"
    ],
    "external mill.api.Ctx$Args": [
        "external java.lang.Object"
    ],
    "external mill.api.Ctx$Dest": [
        "external java.lang.Object"
    ],
    "external mill.api.Ctx$Env": [
        "external java.lang.Object"
    ],
    "external mill.api.Ctx$Home": [
        "external java.lang.Object"
    ],
    "external mill.api.Ctx$Log": [
        "external java.lang.Object"
    ],
    "external mill.api.Ctx$Workspace": [
        "external java.lang.Object"
    ],
    "external mill.api.JsonFormatters": [
        "external java.lang.Object"
    ],
    "external mill.api.Loose$": [
        "external mill.api.AggWrapper"
    ],
    "external mill.api.Result$": [
        "external java.lang.Object"
    ],
    "external mill.define.Applicative$Applyable": [
        "external java.lang.Object"
    ],
    "external mill.define.Applicative$Applyer": [
        "external java.lang.Object"
    ],
    "external mill.define.BaseModule": [
        "external mill.define.Module",
        "external mill.define.Module$BaseClass"
    ],
    "external mill.define.Caller": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.define.Ctx": [
        "external java.lang.Object"
    ],
    "external mill.define.Ctx$": [
        "external java.lang.Object"
    ],
    "external mill.define.Ctx$BasePath": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.define.Ctx$External": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.define.Ctx$Foreign": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.define.Discover": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.define.Discover$": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.define.Module": [
        "def millbuild.build$NtShell$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.build$ut$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$chiselModule$#millInternal()mill.define.Module$millInternal$",
        "def millbuild.NutShell.build$difftest$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.build$NtShell$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#toString()java.lang.String",
        "def millbuild.NutShell.build$HasChiselTests$test$#millInternal()mill.define.Module$millInternal$",
        "def millbuild.NutShell.build$chiselModule$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.NutShell.build$HasChiselTests$test$#toString()java.lang.String",
        "def millbuild.NutShell.build$difftest$#millSourcePath()os.Path",
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.build$ut$#toString()java.lang.String",
        "def millbuild.build$NtShell$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$HasChiselTests$test$#millSourcePath()os.Path",
        "def millbuild.build$difftest$#toString()java.lang.String",
        "def millbuild.build$difftest$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$chiselModule$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.NutShell.build$difftest$#millInternal()mill.define.Module$millInternal$",
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleDirectChildren()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$difftest$#millModuleSegments()mill.define.Segments",
        "def millbuild.NutShell.build$difftest$#millModuleDirectChildren()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.NutShell.build$difftest$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.build$NtShell$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.NutShell.build$chiselModule$#millSourcePath()os.Path",
        "def millbuild.build$ut$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$ut$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.build$NtShell$#millModuleDirectChildren()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#millSourcePath()os.Path",
        "def millbuild.build$difftest$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.build$difftest$#millInternal()mill.define.Module$millInternal$",
        "def millbuild.build$difftest$#millSourcePath()os.Path",
        "def millbuild.NutShell.build$chiselModule$#millModuleSegments()mill.define.Segments",
        "def millbuild.build$NtShell$#millSourcePath()os.Path",
        "def millbuild.build$NtShell$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$ut$#millModuleDirectChildren()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.build$ut$#millInternal()mill.define.Module$millInternal$",
        "def millbuild.build$difftest$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq",
        "def millbuild.build$NtShell$#toString()java.lang.String",
        "def millbuild.NutShell.build$chiselModule$#toString()java.lang.String",
        "def millbuild.NutShell.build$chiselModule$#millModuleDirectChildren()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#millModuleExternal()mill.define.Ctx$External",
        "def millbuild.build$ut$#millModuleBasePath()mill.define.Ctx$BasePath",
        "def millbuild.NutShell.build$HasChiselTests$test$#millModuleShared()mill.define.Ctx$Foreign",
        "def millbuild.build$difftest$#millModuleDirectChildren()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#mill$define$Module$$millModuleDirectChildrenImpl()scala.collection.immutable.Seq",
        "def millbuild.build$NtShell$#millInternal()mill.define.Module$millInternal$",
        "external java.lang.Object"
    ],
    "external mill.define.Module$BaseClass": [
        "external mill.moduledefs.Cacher",
        "external java.lang.Object"
    ],
    "external mill.define.Module$Internal": [
        "external java.lang.Object"
    ],
    "external mill.define.Module$millInternal$": [
        "external mill.define.Module$Internal"
    ],
    "external mill.define.NamedTask": [
        "external java.lang.Object"
    ],
    "external mill.define.Segments": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.define.Segments$": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.define.Target": [
        "external java.lang.Object",
        "external mill.define.NamedTask"
    ],
    "external mill.define.Target$": [
        "external java.lang.Object",
        "external mill.define.Applicative$Applyer"
    ],
    "external mill.define.TargetImpl": [
        "external mill.define.Target",
        "external mill.define.Task"
    ],
    "external mill.define.Task": [
        "external mill.define.Task$Ops",
        "external mill.define.Applicative$Applyable"
    ],
    "external mill.define.Task$Ops": [
        "external java.lang.Object"
    ],
    "external mill.define.TaskModule": [
        "external mill.define.Module",
        "external java.lang.Object"
    ],
    "external mill.eval.Evaluator": [
        "external java.lang.Object"
    ],
    "external mill.main.MainModule": [
        "external mill.define.Module",
        "external java.lang.Object"
    ],
    "external mill.main.RootModule": [
        "external mill.main.MainModule",
        "external mill.define.BaseModule"
    ],
    "external mill.main.RootModule$Foreign": [
        "external mill.main.MainModule",
        "external mill.define.BaseModule"
    ],
    "external mill.main.RootModule$Info": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.main.TokenReaders$": [
        "external java.lang.Object"
    ],
    "external mill.moduledefs.Cacher": [
        "external java.lang.Object"
    ],
    "external mill.package$": [
        "external java.lang.Object",
        "external mill.api.JsonFormatters"
    ],
    "external mill.runner.MillBuildRootModule$Info": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.scalalib.CoursierModule": [
        "def millbuild.NutShell.build$HasChiselTests$test$#defaultResolver()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#resolveDeps$default$2()boolean",
        "def millbuild.NutShell.build$chiselModule$#coursierCacheCustomizer()mill.define.Task",
        "def millbuild.build$NtShell$#bindDependency()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#resolveDeps(mill.define.Task,boolean)mill.define.Task",
        "def millbuild.NutShell.build$difftest$#defaultResolver()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#resolutionCustomizer()mill.define.Task",
        "def millbuild.build$ut$#bindDependency()mill.define.Task",
        "def millbuild.build$ut$#resolutionCustomizer()mill.define.Task",
        "def millbuild.build$NtShell$#repositoriesTask()mill.define.Task",
        "def millbuild.build$difftest$#resolutionCustomizer()mill.define.Task",
        "def millbuild.build$ut$#mapDependencies()mill.define.Task",
        "def millbuild.build$difftest$#bindDependency()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#resolveDeps(mill.define.Task,boolean)mill.define.Task",
        "def millbuild.build$NtShell$#resolveDeps$default$2()boolean",
        "def millbuild.build$ut$#repositoriesTask()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#bindDependency()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#coursierCacheCustomizer()mill.define.Task",
        "def millbuild.build$NtShell$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$difftest$#resolveDeps$default$2()boolean",
        "def millbuild.NutShell.build$HasChisel3#repositoriesTask()mill.define.Task",
        "def millbuild.build$ut$#resolveDeps(mill.define.Task,boolean)mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#repositoriesTask()mill.define.Task",
        "def millbuild.build$ut$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$difftest$#mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$difftest$#resolveDeps(mill.define.Task,boolean)mill.define.Task",
        "def millbuild.build$ut$#defaultResolver()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#resolutionCustomizer()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#resolveDeps$default$2()boolean",
        "def millbuild.NutShell.build$HasChiselTests$test$#bindDependency()mill.define.Task",
        "def millbuild.build$NtShell$#resolveDeps(mill.define.Task,boolean)mill.define.Task",
        "def millbuild.build$difftest$#defaultResolver()mill.define.Task",
        "def millbuild.build$NtShell$#mapDependencies()mill.define.Task",
        "def millbuild.build$difftest$#repositoriesTask()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#repositoriesTask()mill.define.Task",
        "def millbuild.build$difftest$#coursierCacheCustomizer()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#repositoriesTask()mill.define.Task",
        "def millbuild.build$NtShell$#resolutionCustomizer()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#resolutionCustomizer()mill.define.Task",
        "def millbuild.build$difftest$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$NtShell$#coursierCacheCustomizer()mill.define.Task",
        "def millbuild.build$NtShell$#defaultResolver()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#coursierCacheCustomizer()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#defaultResolver()mill.define.Task",
        "def millbuild.build$ut$#resolveDeps$default$2()boolean",
        "def millbuild.build$ut$#coursierCacheCustomizer()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#resolveDeps$default$2()boolean",
        "def millbuild.NutShell.build$chiselModule$#bindDependency()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#resolveDeps(mill.define.Task,boolean)mill.define.Task",
        "external mill.define.Module",
        "external java.lang.Object"
    ],
    "external mill.scalalib.Dep": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.scalalib.Dep$": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external mill.scalalib.GenIdeaModule": [
        "def millbuild.NutShell.build$difftest$#ideaJavaModuleFacets(int)mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#skipIdea()boolean",
        "def millbuild.NutShell.build$difftest$#skipIdea()boolean",
        "def millbuild.NutShell.build$HasChiselTests$test$#ideaJavaModuleFacets(int)mill.define.Task",
        "def millbuild.build$difftest$#skipIdea()boolean",
        "def millbuild.build$NtShell$#intellijModulePath()os.Path",
        "def millbuild.NutShell.build$chiselModule$#ideaJavaModuleFacets(int)mill.define.Task",
        "def millbuild.build$difftest$#ideaJavaModuleFacets(int)mill.define.Task",
        "def millbuild.build$NtShell$#ideaJavaModuleFacets(int)mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#ideaConfigFiles(int)mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#skipIdea()boolean",
        "def millbuild.NutShell.build$difftest$#ideaConfigFiles(int)mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#intellijModulePath()os.Path",
        "def millbuild.build$ut$#ideaJavaModuleFacets(int)mill.define.Task",
        "def millbuild.build$difftest$#intellijModulePath()os.Path",
        "def millbuild.build$ut$#skipIdea()boolean",
        "def millbuild.build$ut$#ideaConfigFiles(int)mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#ideaConfigFiles(int)mill.define.Task",
        "def millbuild.build$ut$#intellijModulePath()os.Path",
        "def millbuild.NutShell.build$HasChiselTests$test$#intellijModulePath()os.Path",
        "def millbuild.build$NtShell$#skipIdea()boolean",
        "def millbuild.NutShell.build$difftest$#intellijModulePath()os.Path",
        "def millbuild.build$NtShell$#ideaConfigFiles(int)mill.define.Task",
        "def millbuild.build$difftest$#ideaConfigFiles(int)mill.define.Task",
        "external mill.define.Module",
        "external java.lang.Object"
    ],
    "external mill.scalalib.IvyDepsTreeArgs": [
        "external java.lang.Object"
    ],
    "external mill.scalalib.IvyDepsTreeArgs$": [
        "external java.lang.Object"
    ],
    "external mill.scalalib.JavaModule": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task",
        "def millbuild.build$ut$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "def millbuild.build$ut$#runLocal$default$1()mill.define.Task",
        "def millbuild.build$NtShell$#moduleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task",
        "def millbuild.build$NtShell$#resolvePublishDependency()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$chiselModule$#zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$difftest$#recursiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#moduleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#showModuleDeps$default$1()boolean",
        "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTargetData()mill.define.Task",
        "def millbuild.build$NtShell$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean",
        "def millbuild.build$ut$#recursiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$chiselModule$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean",
        "def millbuild.build$NtShell$#runLocal$default$1()mill.define.Task",
        "def millbuild.build$NtShell$#run$default$1()mill.define.Task",
        "def millbuild.build$ut$#transitiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#recursiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$chiselModule$#resolvePublishDependency()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "def millbuild.build$ut$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task",
        "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$difftest$#recursiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$NtShell$#showModuleDeps$default$1()boolean",
        "def millbuild.build$difftest$#compileModuleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$difftest$#moduleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#moduleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.build$NtShell$#runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$chiselModule$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$chiselModule$#compileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#showModuleDeps$default$1()boolean",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$chiselModule$#runLocal$default$1()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#compileModuleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#moduleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task",
        "def millbuild.NutShell.build$difftest$#run$default$1()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#moduleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#runLocal$default$1()mill.define.Task",
        "def millbuild.build$NtShell$#compileModuleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#resolvePublishDependency()mill.define.Task",
        "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$chiselModule$#showModuleDeps$default$1()boolean",
        "def millbuild.NutShell.build$HasChiselTests$test$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#moduleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#run$default$1()mill.define.Task",
        "def millbuild.build$NtShell$#transitiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#bspBuildTargetData()mill.define.Task",
        "def millbuild.build$ut$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.build$ut$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$ut$#moduleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackgroundLogToConsole()boolean",
        "def millbuild.build$ut$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$difftest$#resolvePublishDependency()mill.define.Task",
        "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$difftest$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$NtShell$#bspBuildTargetData()mill.define.Task",
        "def millbuild.build$NtShell$#assemblyRules()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$HasChiselTests$test$#compileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$HasChiselTests$test$#resolvePublishDependency()mill.define.Task",
        "def millbuild.build$ut$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#compileModuleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean",
        "def millbuild.build$ut$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task",
        "def millbuild.build$NtShell$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#transitiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#showModuleDeps$default$1()boolean",
        "def millbuild.NutShell.build$HasChiselTests$test$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$chiselModule$#assemblyRules()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#moduleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$NtShell$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$NtShell$#recursiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$chiselModule$#run$default$1()mill.define.Task",
        "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.build$difftest$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "def millbuild.build$NtShell$#compileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#compileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#assemblyRules()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.build$difftest$#runBackgroundLogToConsole()boolean",
        "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#resolvePublishDependency()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#recursiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#showModuleDeps$default$1()boolean",
        "def millbuild.build$ut$#mill$scalalib$JavaModule$$recCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$difftest$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$difftest$#compileModuleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#bspBuildTargetData()mill.define.Task",
        "def millbuild.build$difftest$#zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$difftest$#moduleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$HasChiselTests$test$#moduleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#transitiveModuleCompileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean",
        "def millbuild.build$NtShell$#printDepsTree(boolean,mill.define.Task,scala.collection.immutable.List)mill.define.Task",
        "def millbuild.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$HasChiselTests$test$#transitiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "def millbuild.build$NtShell$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$ut$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$chiselModule$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$difftest$#assemblyRules()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#run$default$1()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#compileModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$JavaModule$$super$zincWorker()mill.define.ModuleRef",
        "def millbuild.build$difftest$#transitiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "def millbuild.build$difftest$#runLocal$default$1()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$super$doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$super$runBackgroundLogToConsole()boolean",
        "def millbuild.build$NtShell$#moduleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#transitiveModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$HasChiselTests$test$#assemblyRules()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.build$ut$#assemblyRules()scala.collection.immutable.Seq",
        "def millbuild.build$NtShell$#ivyDepsTree$default$1()mill.scalalib.IvyDepsTreeArgs",
        "def millbuild.build$NtShell$#mill$scalalib$JavaModule$$recModuleDeps()scala.collection.immutable.Seq",
        "def millbuild.NutShell.build$chiselModule$#compileModuleDepsChecked()scala.collection.immutable.Seq",
        "def millbuild.build$difftest$#compileModuleDeps()scala.collection.immutable.Seq",
        "external mill.scalalib.SemanticDbJavaModule",
        "external mill.scalalib.GenIdeaModule",
        "external mill.scalalib.RunModule",
        "external mill.define.TaskModule",
        "external java.lang.Object",
        "external mill.scalalib.OfflineSupportModule",
        "external mill.scalalib.TestModule$JavaModuleBase"
    ],
    "external mill.scalalib.JavaModule$JavaModuleTests": [
        "def millbuild.NutShell.build$HasChiselTests$test$#skipIdea()boolean",
        "def millbuild.NutShell.build$HasChiselTests$test$#zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$HasChiselTests$test$#hierarchyChecks()void",
        "def millbuild.NutShell.build$HasChiselTests$test$#resolutionCustomizer()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#repositoriesTask()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#moduleDeps()scala.collection.immutable.Seq",
        "external mill.scalalib.TestModule",
        "external java.lang.Object",
        "external mill.scalalib.JavaModule"
    ],
    "external mill.scalalib.JsonFormatters": [
        "external java.lang.Object"
    ],
    "external mill.scalalib.MavenModule": [
        "external java.lang.Object",
        "external mill.scalalib.JavaModule"
    ],
    "external mill.scalalib.MavenModule$MavenModuleTests": [
        "def millbuild.NutShell.build$HasChiselTests$test$#millSourcePath()os.Path",
        "def millbuild.NutShell.build$HasChiselTests$test$#intellijModulePath()os.Path",
        "external mill.scalalib.JavaModule$JavaModuleTests",
        "external java.lang.Object"
    ],
    "external mill.scalalib.OfflineSupportModule": [
        "external mill.define.Module",
        "external java.lang.Object"
    ],
    "external mill.scalalib.RunModule": [
        "def millbuild.NutShell.build$HasChiselTests$test$#run$default$1()mill.define.Task",
        "def millbuild.build$difftest$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$ut$#runLocal$default$1()mill.define.Task",
        "def millbuild.build$NtShell$#runBackgroundTask$default$2()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$difftest$#runBackgroundTask$default$2()mill.define.Task",
        "def millbuild.build$NtShell$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.build$NtShell$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$difftest$#runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$difftest$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$NtShell$#runLocal$default$1()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#runBackgroundTask$default$2()mill.define.Task",
        "def millbuild.build$NtShell$#run$default$1()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#runLocalTask$default$2()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.build$difftest$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.build$difftest$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$difftest$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$NtShell$#runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$chiselModule$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$difftest$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#runLocal$default$1()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocalTask$default$2()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#run$default$1()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#runLocal$default$1()mill.define.Task",
        "def millbuild.build$difftest$#runBackgroundTask$default$2()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#runForkedTask$default$2()mill.define.Task",
        "def millbuild.build$difftest$#run$default$1()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#runForkedTask$default$2()mill.define.Task",
        "def millbuild.build$ut$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$chiselModule$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$ut$#runLocalTask$default$2()mill.define.Task",
        "def millbuild.build$ut$#runBackgroundTask$default$2()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#runBackgroundLogToConsole()boolean",
        "def millbuild.build$difftest$#runLocalTask$default$2()mill.define.Task",
        "def millbuild.build$ut$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$difftest$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#doRunBackground(os.Path,scala.collection.immutable.Seq,mill.api.AggWrapper$Agg,scala.collection.immutable.Seq,scala.collection.immutable.Map,java.lang.String,os.Path,boolean,scala.Option,scala.collection.immutable.Seq)scala.Function1",
        "def millbuild.NutShell.build$chiselModule$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$NtShell$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#run$default$1()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#runForkedTask$default$2()mill.define.Task",
        "def millbuild.build$NtShell$#runForkedTask$default$2()mill.define.Task",
        "def millbuild.build$difftest$#runBackgroundLogToConsole()boolean",
        "def millbuild.NutShell.build$HasChiselTests$test$#runBackgroundTask$default$2()mill.define.Task",
        "def millbuild.build$ut$#runLocalTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$ut$#runBackgroundLogToConsole()boolean",
        "def millbuild.build$ut$#runBackgroundTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$NtShell$#runLocalTask$default$2()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$ut$#runForkedTask$default$2()mill.define.Task",
        "def millbuild.build$difftest$#runForkedTask$default$2()mill.define.Task",
        "def millbuild.build$ut$#run$default$1()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#runLocalTask$default$2()mill.define.Task",
        "def millbuild.build$difftest$#runLocal$default$1()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#runLocal$default$1()mill.define.Task",
        "def millbuild.build$NtShell$#runForkedTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "external mill.scalalib.WithZincWorker",
        "external java.lang.Object"
    ],
    "external mill.scalalib.SbtModule": [
        "external mill.scalalib.MavenModule",
        "external mill.scalalib.ScalaModule",
        "external java.lang.Object"
    ],
    "external mill.scalalib.SbtModule$SbtModuleTests": [
        "external mill.scalalib.MavenModule$MavenModuleTests",
        "external mill.scalalib.ScalaModule$ScalaTests",
        "external java.lang.Object"
    ],
    "external mill.scalalib.ScalaModule": [
        "def millbuild.build$NtShell$#resolvePublishDependency()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$HasChiselTests$test$#mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#ammoniteMainClass()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTargetData()mill.define.Task",
        "def millbuild.build$NtShell$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$ut$#ammoniteMainClass()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#resolvePublishDependency()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task",
        "def millbuild.build$difftest$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$NtShell$#ammoniteMainClass()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$ut$#mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$difftest$#resolvePublishDependency()mill.define.Task",
        "def millbuild.build$difftest$#ammoniteMainClass()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$difftest$#bspBuildTargetData()mill.define.Task",
        "def millbuild.build$NtShell$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$ut$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$difftest$#resolvePublishDependency()mill.define.Task",
        "def millbuild.build$ut$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$NtShell$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#resolvePublishDependency()mill.define.Task",
        "def millbuild.build$ut$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$difftest$#mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$ut$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#ammoniteMainClass()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task",
        "def millbuild.build$NtShell$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$NtShell$#mapDependencies()mill.define.Task",
        "def millbuild.build$ut$#resolvePublishDependency()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#ammoniteMainClass()mill.define.Task",
        "def millbuild.build$difftest$#resolveCoursierDependency()mill.define.Task",
        "def millbuild.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$NtShell$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$chiselModule$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$difftest$#mapDependencies()mill.define.Task",
        "def millbuild.build$difftest$#mill$scalalib$ScalaModule$$super$mapDependencies()mill.define.Task",
        "def millbuild.build$ut$#mill$scalalib$ScalaModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "external mill.scalalib.TestModule$ScalaModuleBase",
        "external java.lang.Object",
        "external mill.scalalib.JavaModule"
    ],
    "external mill.scalalib.ScalaModule$ScalaTests": [
        "external mill.scalalib.JavaModule$JavaModuleTests",
        "external mill.scalalib.ScalaModule",
        "external java.lang.Object"
    ],
    "external mill.scalalib.SemanticDbJavaModule": [
        "def millbuild.NutShell.build$chiselModule$#zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$ut$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$HasChiselTests$test$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$ut$#zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$difftest$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$NtShell$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$difftest$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$NtShell$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$chiselModule$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "external mill.scalalib.CoursierModule",
        "external java.lang.Object"
    ],
    "external mill.scalalib.TestModule": [
        "def millbuild.NutShell.build$HasChiselTests$test$#testTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.build$ut$#testTask(mill.define.Task,mill.define.Task)mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$HasChiselTests$test$#mill$scalalib$TestModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$ut$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$ut$#mill$scalalib$TestModule$$super$bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "external mill.scalalib.RunModule",
        "external mill.define.TaskModule",
        "external java.lang.Object",
        "external mill.scalalib.TestModule$JavaModuleBase"
    ],
    "external mill.scalalib.TestModule$JavaModuleBase": [
        "external mill.scalalib.bsp.BspModule",
        "external java.lang.Object"
    ],
    "external mill.scalalib.TestModule$ScalaModuleBase": [
        "external mill.define.Module",
        "external java.lang.Object"
    ],
    "external mill.scalalib.TestModule$ScalaTest": [
        "external mill.scalalib.TestModule",
        "external java.lang.Object"
    ],
    "external mill.scalalib.WithZincWorker": [
        "def millbuild.NutShell.build$chiselModule$#zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$HasChiselTests$test$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$ut$#zincWorker()mill.define.ModuleRef",
        "def millbuild.NutShell.build$difftest$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$NtShell$#zincWorker()mill.define.ModuleRef",
        "def millbuild.build$difftest$#zincWorker()mill.define.ModuleRef",
        "external mill.define.Module",
        "external java.lang.Object"
    ],
    "external mill.scalalib.bsp.BspModule": [
        "def millbuild.NutShell.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$difftest$#bspDisplayName()java.lang.String",
        "def millbuild.build$NtShell$#bspDisplayName()java.lang.String",
        "def millbuild.build$difftest$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$difftest$#bspDisplayName0()java.lang.String",
        "def millbuild.build$ut$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$NtShell$#bspDisplayName0()java.lang.String",
        "def millbuild.build$difftest$#bspDisplayName0()java.lang.String",
        "def millbuild.build$NtShell$#bspBuildTargetData()mill.define.Task",
        "def millbuild.build$ut$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspDisplayName()java.lang.String",
        "def millbuild.NutShell.build$chiselModule$#bspDisplayName0()java.lang.String",
        "def millbuild.build$ut$#bspDisplayName()java.lang.String",
        "def millbuild.NutShell.build$HasChiselTests$test$#bspDisplayName0()java.lang.String",
        "def millbuild.NutShell.build$difftest$#bspBuildTargetData()mill.define.Task",
        "def millbuild.NutShell.build$chiselModule$#bspBuildTargetData()mill.define.Task",
        "def millbuild.build$difftest$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$NtShell$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.NutShell.build$chiselModule$#bspBuildTarget()mill.scalalib.bsp.BspBuildTarget",
        "def millbuild.build$ut$#bspDisplayName0()java.lang.String",
        "def millbuild.NutShell.build$chiselModule$#bspDisplayName()java.lang.String",
        "def millbuild.NutShell.build$difftest$#bspDisplayName()java.lang.String",
        "external mill.define.Module",
        "external java.lang.Object"
    ],
    "external mill.scalalib.package$": [
        "external mill.scalalib.JsonFormatters",
        "external java.lang.Object"
    ],
    "external mill.scalalib.package$DepSyntax": [
        "external java.lang.Object"
    ],
    "external os.BasePath": [
        "external java.lang.Object"
    ],
    "external os.BasePathImpl": [
        "external java.lang.Object",
        "external os.BasePath"
    ],
    "external os.FilePath": [
        "external java.lang.Object",
        "external os.BasePath"
    ],
    "external os.Path": [
        "external os.ReadablePath",
        "external os.BasePathImpl",
        "external os.FilePath",
        "external java.lang.Object"
    ],
    "external os.Path$": [
        "external java.lang.Object"
    ],
    "external os.PathChunk": [
        "external java.lang.Object"
    ],
    "external os.PathChunk$": [
        "external java.lang.Object"
    ],
    "external os.PathConvertible": [
        "external java.lang.Object"
    ],
    "external os.PathConvertible$StringConvertible$": [
        "external java.lang.Object",
        "external os.PathConvertible"
    ],
    "external os.ReadablePath": [
        "external java.lang.Object"
    ],
    "external os.package$": [
        "external java.lang.Object"
    ],
    "external scala.Equals": [
        "external java.lang.Object"
    ],
    "external scala.Function0": [
        "external java.lang.Object"
    ],
    "external scala.Function1": [
        "external java.lang.Object"
    ],
    "external scala.Function2": [
        "external java.lang.Object"
    ],
    "external scala.LowPriorityImplicits": [
        "external scala.LowPriorityImplicits2"
    ],
    "external scala.LowPriorityImplicits2": [
        "external java.lang.Object"
    ],
    "external scala.None$": [
        "external scala.Option"
    ],
    "external scala.Option": [
        "external scala.Product",
        "external java.io.Serializable",
        "external scala.collection.IterableOnce",
        "external java.lang.Object"
    ],
    "external scala.PartialFunction": [
        "external java.lang.Object",
        "external scala.Function1"
    ],
    "external scala.Predef$": [
        "external scala.LowPriorityImplicits"
    ],
    "external scala.Predef$ArrowAssoc$": [
        "external java.lang.Object"
    ],
    "external scala.Product": [
        "external scala.Equals",
        "external java.lang.Object"
    ],
    "external scala.Product2": [
        "external scala.Product",
        "external java.lang.Object"
    ],
    "external scala.Some": [
        "external scala.Option"
    ],
    "external scala.StringContext": [
        "external scala.Product",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external scala.Tuple2": [
        "external scala.Product2",
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external scala.annotation.Annotation": [
        "external java.lang.Object"
    ],
    "external scala.annotation.ClassfileAnnotation": [
        "external scala.annotation.ConstantAnnotation",
        "external java.lang.Object"
    ],
    "external scala.annotation.ConstantAnnotation": [
        "external java.lang.Object",
        "external scala.annotation.StaticAnnotation"
    ],
    "external scala.annotation.StaticAnnotation": [
        "external java.lang.Object"
    ],
    "external scala.collection.AbstractIterable": [
        "external java.lang.Object",
        "external scala.collection.Iterable"
    ],
    "external scala.collection.AbstractSeq": [
        "external scala.collection.Seq",
        "external scala.collection.AbstractIterable"
    ],
    "external scala.collection.Factory": [
        "external java.lang.Object"
    ],
    "external scala.collection.Iterable": [
        "external java.lang.Object",
        "external scala.collection.IterableFactoryDefaults"
    ],
    "external scala.collection.IterableFactory": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external scala.collection.IterableFactoryDefaults": [
        "external scala.collection.IterableOps",
        "external java.lang.Object"
    ],
    "external scala.collection.IterableOnce": [
        "external java.lang.Object"
    ],
    "external scala.collection.IterableOnceOps": [
        "external java.lang.Object"
    ],
    "external scala.collection.IterableOps": [
        "external scala.collection.IterableOnceOps",
        "external scala.collection.IterableOnce",
        "external java.lang.Object"
    ],
    "external scala.collection.LinearSeq": [
        "external scala.collection.Seq",
        "external scala.collection.LinearSeqOps",
        "external java.lang.Object"
    ],
    "external scala.collection.LinearSeqOps": [
        "external scala.collection.SeqOps",
        "external java.lang.Object"
    ],
    "external scala.collection.Map": [
        "external scala.collection.MapFactoryDefaults",
        "external scala.Equals",
        "external java.lang.Object",
        "external scala.collection.Iterable"
    ],
    "external scala.collection.MapFactory": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external scala.collection.MapFactoryDefaults": [
        "external scala.collection.MapOps",
        "external java.lang.Object"
    ],
    "external scala.collection.MapOps": [
        "external scala.collection.IterableOps",
        "external scala.PartialFunction",
        "external java.lang.Object"
    ],
    "external scala.collection.Seq": [
        "external scala.collection.SeqOps",
        "external scala.Equals",
        "external scala.PartialFunction",
        "external java.lang.Object",
        "external scala.collection.Iterable"
    ],
    "external scala.collection.SeqFactory": [
        "external java.lang.Object",
        "external scala.collection.IterableFactory"
    ],
    "external scala.collection.SeqFactory$Delegate": [
        "external java.lang.Object",
        "external scala.collection.SeqFactory"
    ],
    "external scala.collection.SeqOps": [
        "external scala.collection.IterableOps",
        "external java.lang.Object"
    ],
    "external scala.collection.StrictOptimizedIterableOps": [
        "external scala.collection.IterableOps",
        "external java.lang.Object"
    ],
    "external scala.collection.StrictOptimizedLinearSeqOps": [
        "external scala.collection.LinearSeqOps",
        "external scala.collection.StrictOptimizedSeqOps",
        "external java.lang.Object"
    ],
    "external scala.collection.StrictOptimizedSeqFactory": [
        "external java.lang.Object",
        "external scala.collection.SeqFactory"
    ],
    "external scala.collection.StrictOptimizedSeqOps": [
        "external scala.collection.SeqOps",
        "external scala.collection.StrictOptimizedIterableOps",
        "external java.lang.Object"
    ],
    "external scala.collection.generic.DefaultSerializable": [
        "external java.io.Serializable",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.$colon$colon": [
        "external scala.collection.immutable.List",
        "external scala.Product"
    ],
    "external scala.collection.immutable.AbstractSeq": [
        "external scala.collection.immutable.Seq",
        "external scala.collection.AbstractSeq"
    ],
    "external scala.collection.immutable.Iterable": [
        "external java.lang.Object",
        "external scala.collection.Iterable"
    ],
    "external scala.collection.immutable.LinearSeq": [
        "external scala.collection.immutable.LinearSeqOps",
        "external scala.collection.LinearSeq",
        "external scala.collection.immutable.Seq",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.LinearSeqOps": [
        "external scala.collection.immutable.SeqOps",
        "external scala.collection.LinearSeqOps",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.List": [
        "external scala.collection.immutable.StrictOptimizedSeqOps",
        "external scala.collection.immutable.LinearSeq",
        "external scala.collection.immutable.AbstractSeq",
        "external scala.collection.generic.DefaultSerializable",
        "external scala.collection.StrictOptimizedLinearSeqOps"
    ],
    "external scala.collection.immutable.List$": [
        "external scala.collection.StrictOptimizedSeqFactory",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.Map": [
        "external scala.collection.Map",
        "external scala.collection.immutable.Iterable",
        "external scala.collection.immutable.MapOps",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.Map$": [
        "external java.lang.Object",
        "external scala.collection.MapFactory"
    ],
    "external scala.collection.immutable.MapOps": [
        "external scala.collection.MapOps",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.Nil$": [
        "external scala.collection.immutable.List",
        "external scala.Product"
    ],
    "external scala.collection.immutable.Seq": [
        "external scala.collection.Seq",
        "external scala.collection.immutable.Iterable",
        "external scala.collection.immutable.SeqOps",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.Seq$": [
        "external scala.collection.SeqFactory$Delegate"
    ],
    "external scala.collection.immutable.SeqOps": [
        "external scala.collection.SeqOps",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.StrictOptimizedSeqOps": [
        "external scala.collection.immutable.SeqOps",
        "external scala.collection.StrictOptimizedSeqOps",
        "external java.lang.Object"
    ],
    "external scala.collection.immutable.Vector$": [
        "external scala.collection.StrictOptimizedSeqFactory",
        "external java.lang.Object"
    ],
    "external scala.package$": [
        "external java.lang.Object"
    ],
    "external scala.runtime.BoxesRunTime": [
        "external java.lang.Object"
    ],
    "external scala.runtime.ScalaRunTime$": [
        "external java.lang.Object"
    ],
    "external sourcecode.Enclosing": [
        "external scala.Product",
        "external java.io.Serializable",
        "external sourcecode.SourceValue"
    ],
    "external sourcecode.File": [
        "external scala.Product",
        "external java.io.Serializable",
        "external sourcecode.SourceValue"
    ],
    "external sourcecode.Line": [
        "external scala.Product",
        "external java.io.Serializable",
        "external sourcecode.SourceValue"
    ],
    "external sourcecode.SourceValue": [
        "external java.lang.Object"
    ],
    "external upickle.Api": [
        "external upickle.MsgReadWriters",
        "external upickle.implicits.CaseClassReadWriters",
        "external upickle.implicits.Readers",
        "external upickle.implicits.Writers",
        "external upickle.core.Annotator",
        "external upickle.JsReadWriters",
        "external java.lang.Object",
        "external upickle.WebJson"
    ],
    "external upickle.AttributeTagged": [
        "external upickle.Api",
        "external java.lang.Object"
    ],
    "external upickle.JsReadWriters": [
        "external upickle.core.Types",
        "external upickle.implicits.MacroImplicits",
        "external java.lang.Object",
        "external upickle.LowPriReadWriters"
    ],
    "external upickle.LowPriReadWriters": [
        "external java.lang.Object"
    ],
    "external upickle.MsgReadWriters": [
        "external upickle.core.Types",
        "external upickle.implicits.MacroImplicits",
        "external java.lang.Object"
    ],
    "external upickle.WebJson": [
        "external upickle.core.Types",
        "external java.lang.Object"
    ],
    "external upickle.core.Annotator": [
        "external java.lang.Object"
    ],
    "external upickle.core.Transformer": [
        "external java.lang.Object"
    ],
    "external upickle.core.Types": [
        "external java.lang.Object"
    ],
    "external upickle.core.Types$ReadWriter": [
        "external upickle.core.Types$Writer",
        "external upickle.core.Types$Reader",
        "external java.lang.Object"
    ],
    "external upickle.core.Types$ReadWriter$": [
        "external java.lang.Object"
    ],
    "external upickle.core.Types$Reader": [
        "external upickle.core.Visitor",
        "external java.lang.Object"
    ],
    "external upickle.core.Types$Writer": [
        "external upickle.core.Transformer",
        "external java.lang.Object"
    ],
    "external upickle.core.Visitor": [
        "external java.lang.Object"
    ],
    "external upickle.default$": [
        "external upickle.AttributeTagged",
        "external java.lang.Object"
    ],
    "external upickle.implicits.CaseClassReadWriters": [
        "external upickle.core.Types",
        "external java.lang.Object"
    ],
    "external upickle.implicits.Generated": [
        "external upickle.implicits.TupleReadWriters",
        "external java.lang.Object"
    ],
    "external upickle.implicits.LowPriWriters": [
        "external upickle.core.Types",
        "external java.lang.Object"
    ],
    "external upickle.implicits.MacroImplicits": [
        "external java.lang.Object",
        "external upickle.implicits.MacrosCommon"
    ],
    "external upickle.implicits.MacrosCommon": [
        "external java.lang.Object"
    ],
    "external upickle.implicits.Readers": [
        "external upickle.implicits.ReadersVersionSpecific",
        "external java.lang.Object",
        "external upickle.implicits.Generated"
    ],
    "external upickle.implicits.ReadersVersionSpecific": [
        "external upickle.implicits.MacroImplicits",
        "external java.lang.Object"
    ],
    "external upickle.implicits.TupleReadWriters": [
        "external upickle.core.Types",
        "external java.lang.Object"
    ],
    "external upickle.implicits.Writers": [
        "external upickle.implicits.WritersVersionSpecific",
        "external java.lang.Object",
        "external upickle.implicits.Generated",
        "external upickle.implicits.LowPriWriters"
    ],
    "external upickle.implicits.WritersVersionSpecific": [
        "external upickle.implicits.MacroImplicits",
        "external java.lang.Object"
    ]
}